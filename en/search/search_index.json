{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AI \u200b\u200bSolution Kit provides a series of machine learning functions based on deep learning, such as text recognition, natural language understanding, face detection, and image understanding. You can easily use out-of-the-box AI features by calling APIs, while seamlessly integrating with other services provided by AWS. APIs The solution automatically creates RESTful APIs through Amazon API Gateway. After deploying the solution , you can send HTTP POST requests to use the AI features. The table below lists the supported APIs. You can click the Details link to view the test method and sample code of each API interface. For more information, see API Reference Guide . Optical Character Recognition (OCR) API Name Description General OCR (Simplified Chinese) Recognize and extract Simplified Chinese, numbers, alphabetical characters and symbols from images, and return information such as coordinates and confidence. Details General OCR (Traditional Chinese) Recognize and extract Traditional Chinese, numbers, alphabetical characters and symbols from images, and return information such as coordinates and confidence. Details Custom OCR Recognize and extract structured text by predefined OCR templates. Details Car License Plate Recognize text on Chinese car license plate. Details Face and Body API Name Description Face Detection Detect the face in an image and return coordinate information of the face. Details Face Comparison Compare two faces of the same person and return a confidence score of the similarity. Details Human Attribute Recognition Recognize the attributes of the human body in an image, such as gender and age. Details Human Image Segmentation Segment human bodies from the image background. Details Image Understanding API Name Description Image Similarity Compare two images and return similarity score. Details Object Recognition Recognize objects and scenes in an image and return confidence score for each object or scene. Details Pornography Detection Detect pornographic image in three dimensions (normal, sexy, porn) and return confidence scores. Details Vision Production API Name Description Image Super Resolution Upscale the resolution and enhance details in the images Details Natural Language Understanding (NLU) API Name Description Text Similarity Compare two Chinese words or sentences and return similarity score Details This implementation guide describes architectural considerations and configuration steps for deploying AI Solution Kit in the AWS cloud. It includes links to CloudFormation templates that launches and configures the AWS services required to deploy this solution using AWS best practices for security and availability. The guide is intended for IT architects, developers, DevOps, data engineers with practical experience architecting in the AWS Cloud.","title":"Welcome"},{"location":"#apis","text":"The solution automatically creates RESTful APIs through Amazon API Gateway. After deploying the solution , you can send HTTP POST requests to use the AI features. The table below lists the supported APIs. You can click the Details link to view the test method and sample code of each API interface. For more information, see API Reference Guide .","title":"APIs"},{"location":"#optical-character-recognition-ocr","text":"API Name Description General OCR (Simplified Chinese) Recognize and extract Simplified Chinese, numbers, alphabetical characters and symbols from images, and return information such as coordinates and confidence. Details General OCR (Traditional Chinese) Recognize and extract Traditional Chinese, numbers, alphabetical characters and symbols from images, and return information such as coordinates and confidence. Details Custom OCR Recognize and extract structured text by predefined OCR templates. Details Car License Plate Recognize text on Chinese car license plate. Details","title":"Optical Character Recognition (OCR)"},{"location":"#face-and-body","text":"API Name Description Face Detection Detect the face in an image and return coordinate information of the face. Details Face Comparison Compare two faces of the same person and return a confidence score of the similarity. Details Human Attribute Recognition Recognize the attributes of the human body in an image, such as gender and age. Details Human Image Segmentation Segment human bodies from the image background. Details","title":"Face and Body"},{"location":"#image-understanding","text":"API Name Description Image Similarity Compare two images and return similarity score. Details Object Recognition Recognize objects and scenes in an image and return confidence score for each object or scene. Details Pornography Detection Detect pornographic image in three dimensions (normal, sexy, porn) and return confidence scores. Details","title":"Image Understanding"},{"location":"#vision-production","text":"API Name Description Image Super Resolution Upscale the resolution and enhance details in the images Details","title":"Vision Production"},{"location":"#natural-language-understanding-nlu","text":"API Name Description Text Similarity Compare two Chinese words or sentences and return similarity score Details This implementation guide describes architectural considerations and configuration steps for deploying AI Solution Kit in the AWS cloud. It includes links to CloudFormation templates that launches and configures the AWS services required to deploy this solution using AWS best practices for security and availability. The guide is intended for IT architects, developers, DevOps, data engineers with practical experience architecting in the AWS Cloud.","title":"Natural Language Understanding (NLU)"},{"location":"additional-resources/","text":"AWS Lambda Amazon SageMaker Amazon API Gateway Amazon ECR Amazon EFS AWS IAM Amazon EC2 AWS CloudFormation Amazon S3","title":"Additional resources"},{"location":"api-explorer/","text":"You can call the following APIs to use the corresponding AI features. General OCR (Simplified Chinese) General OCR (Traditional Chinese) Custom OCR Car License Plate Face Detection Face Comparison Human Attribute Recognition Human Image Segmentation Image Similarity Object Recognition Pornography Detection Image Super Resolution Text Similarity Calling URL You have two options to call URL of AI features: When deploying the solution, set the parameter APIGatewayAuthorization to NONE to allow anonymous access to API. When deploying the solution, set the parameter APIGatewayAuthorization to AWS_IAM to use the IAM permission to control access to API. For more information, see Invoking a REST API in Amazon API Gateway . Tools API Explorer Postman cURL Python Java","title":"Overview"},{"location":"api-explorer/#calling-url","text":"You have two options to call URL of AI features: When deploying the solution, set the parameter APIGatewayAuthorization to NONE to allow anonymous access to API. When deploying the solution, set the parameter APIGatewayAuthorization to AWS_IAM to use the IAM permission to control access to API. For more information, see Invoking a REST API in Amazon API Gateway .","title":"Calling URL"},{"location":"api-explorer/#tools","text":"API Explorer Postman cURL Python Java","title":"Tools"},{"location":"architecture/","text":"This solution architecture has two types of AI feature implementations: architecture based on AWS Lambda and architecture based on Amazon SageMaker. Note The architecture based on Amazon SageMaker is only applicable to Image Super Resolution Solution . Architecture based on AWS Lambda The user or application sends an API request to the Amazon API Gateway. The request payload needs to contain information about the image or text to be processed. Amazon API Gateway sends the incoming user request directly to the AWS Lambda function. The AWS Lambda function returns the result to the invoker. Architecture based on Amazon SageMaker The user or application sends an API request to the Amazon API Gateway. The request payload needs to contain the image or text information to be processed. Amazon API Gateway sends the request to AWS Lambda (invoke endpoint) function. AWS Lambda invokes Amazon SageMaker Endpoint, which performs the inference process in Amazon SageMaker and returns the inference result (usually in JSON format data).","title":"Architecture overview"},{"location":"architecture/#architecture-based-on-aws-lambda","text":"The user or application sends an API request to the Amazon API Gateway. The request payload needs to contain information about the image or text to be processed. Amazon API Gateway sends the incoming user request directly to the AWS Lambda function. The AWS Lambda function returns the result to the invoker.","title":"Architecture based on AWS Lambda"},{"location":"architecture/#architecture-based-on-amazon-sagemaker","text":"The user or application sends an API request to the Amazon API Gateway. The request payload needs to contain the image or text information to be processed. Amazon API Gateway sends the request to AWS Lambda (invoke endpoint) function. AWS Lambda invokes Amazon SageMaker Endpoint, which performs the inference process in Amazon SageMaker and returns the inference result (usually in JSON format data).","title":"Architecture based on Amazon SageMaker"},{"location":"cost/","text":"You will be responsible for the cost of using each of the AWS services when running the solution. As of June 2022, the main factors affecting the solution cost include: AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint node instance type Amazon SageMaker endpoint node data input Amazon SageMaker endpoint node data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution . You can refer to the Cost Estimation section corresponding to each API to check the deployment and actual usage cost estimation for each API feature. API Cost Estimation General OCR (Simplified Chinese) View General OCR (Traditional Chinese) View Custom OCR View Car License Plate View Face Detection View Face Comparison View Human Attribute Recognition View Human Image Segmentation View Image Similarity View Object Recognition View Pornography Detection View Image Super Resolution View Text Similarity View","title":"Cost"},{"location":"deploy-add-delete-api/","text":"Add or remove AI features You can update the AWS CloudFormation stack to add new AI features or remove the AI feature already deployed. Sign in to the AWS CloudFormation console . Select the root stack of this solution, not the nested stack. Choose Update . Select Use current template , and choose Next . Update the parameters as needed, and choose Next . For example, if you have chosen no for Custom Template OCR , you can change it to yes to add the feature. On the Configure stack options page, choose Next . On the Review page, review and confirm the settings. Check the box acknowledging that the template will create AWS Identity and Access Management (IAM) resources. Choose Update stack to update the stack.","title":"Update CloudFormation stack"},{"location":"deploy-add-delete-api/#add-or-remove-ai-features","text":"You can update the AWS CloudFormation stack to add new AI features or remove the AI feature already deployed. Sign in to the AWS CloudFormation console . Select the root stack of this solution, not the nested stack. Choose Update . Select Use current template , and choose Next . Update the parameters as needed, and choose Next . For example, if you have chosen no for Custom Template OCR , you can change it to yes to add the feature. On the Configure stack options page, choose Next . On the Review page, review and confirm the settings. Check the box acknowledging that the template will create AWS Identity and Access Management (IAM) resources. Choose Update stack to update the stack.","title":"Add or remove AI features"},{"location":"deploy-car-license-plate/","text":"Recognize text on Chinese car license plate. Applicable scenarios Applicable to identifying car license plates in car parking lots and communities, or detecting vehicles for traffic violations. REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description words String Recognized license plate number. location JSON Coordinates of the recognized car license plate, including top, left, width, height as integer values. score Float Confidence score of the car license plate, which is a float type value between 0 and 1. Example JSON response [ { \"words\": \"\u4eacC45678\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 } ] API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/car_license_plate\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Car License Plate feature via Amazon CloudFormation as described in Add or remove AI features and make sure the CarLicensePlate parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 6 Minutes","title":"Car License Plate"},{"location":"deploy-car-license-plate/#applicable-scenarios","text":"Applicable to identifying car license plates in car parking lots and communities, or detecting vehicles for traffic violations.","title":"Applicable scenarios"},{"location":"deploy-car-license-plate/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description words String Recognized license plate number. location JSON Coordinates of the recognized car license plate, including top, left, width, height as integer values. score Float Confidence score of the car license plate, which is a float type value between 0 and 1. Example JSON response [ { \"words\": \"\u4eacC45678\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 } ]","title":"REST API Reference"},{"location":"deploy-car-license-plate/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-car-license-plate/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-car-license-plate/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-car-license-plate/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-car-license-plate/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-car-license-plate/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-car-license-plate/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/car_license_plate\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-car-license-plate/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-car-license-plate/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-car-license-plate/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-car-license-plate/#uninstall-the-deployment","text":"You can uninstall the Car License Plate feature via Amazon CloudFormation as described in Add or remove AI features and make sure the CarLicensePlate parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 6 Minutes","title":"Uninstall the deployment"},{"location":"deploy-custom-ocr/","text":"You can customize the OCR template, extract the structured text information in cards and tickets, and display the results in the key-value format. Applicable scenarios Applicable to structured recognition of cards and tickets, such as logistics documents, invoices, business licenses, itineraries, and train tickets. REST API Reference Add templates Before text recognition, you need to create a template through the Add Template API . In order to improve the accuracy of text recognition, the image for template creation should have similar details to the recognized image and clear text content. The same template can contain multiple recognition areas. To create a template, each area to be recognized needs to specify the four coordinate points of the rectangular frame and the name of the area. You can use common image processing software such as GIMP to assist in obtaining coordinate points. The following describes how to create a template: Scale the image size to 100% in the image processing software. Move the mouse to the image and get the X, Y values of the coordinate points at the specified position. According to top left, top right, bottom right, bottom left order to record the four coordinate points of the rectangular box respectively, and specify the name of the recognition area, recognition area example as follows. [[[116, 335], [410, 335], [410, 374], [116, 374]], \"Phone Number\"], !!! Note \"Description\" The rectangular box area must completely cover the text content to be recognized. Please leave enough space for error tolerance on all sides of the recognition area without covering other recognition rectangular areas to get accurate recognition. Please refer to the Add Template API Request Body example to create a custom template and record the template ID after successful creation. After creating the template, first perform a text recognition test with the original image and template ID to ensure that the template can accurately recognize the required information. (Optional) If you find that the extracted information is incomplete, please confirm that the coordinate points are marked correctly and recreate the template by expanding the recognition area appropriately. The following describe the API parameters: HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64-encoded image data. type String Fixed value is add . template List Each element corresponds to the coordinates of an area to be extracted and its name. Example JSON request { \"type\": \"add\", \"url\": \"Image URL address\", \"template\": [ [ [[421, 465], [909, 471], [911, 503], [419, 495]], \"\u540d\u79f0\" ], [ [[419, 495], [911, 503], [909, 533], [415, 527]], \"\u8bc6\u522b\u53f7\" ], [ [[345, 339], [595, 343], [583, 397], [341, 385]], \"\u53d1\u7968\u53f7\" ] ] } { \"type\": \"add\", \"img\": \"Base64-encoded image data\", \"template\": [ [ [[421, 465], [909, 471], [911, 503], [419, 495]], \"\u540d\u79f0\" ], [ [[419, 495], [911, 503], [909, 533], [415, 527]], \"\u8bc6\u522b\u53f7\" ], [ [[345, 339], [595, 343], [583, 397], [341, 385]], \"\u53d1\u7968\u53f7\" ] ] } Response parameters Name Type Description template_id String Template ID Example JSON response { \"template_id\": \"\u6a21\u677f\u7684ID\", } Content recognition After the template is created, you can use the corresponding template ID to perform text recognition on the image, and the returned value is the name and text content of the recognized area in the template. HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. type String Fixed value is query . template_id String Existing template ID. Example JSON request { \"template_id\": \"\u5df2\u5b58\u5728\u7684\u6a21\u677fID\", \"url\": \"Image URL address\" } Response parameters Name Type Description key String Field name. value String Extracted value. score Float Confidence score. Example JSON response [ { \"key\": \"\u540d\u79f0\", \"value\": \"\u4e9a\u9a6c\u900a\u901a\u6280\u672f\u670d\u52a1(\u5317\u4eac)\u6709\u9650\u516c\u53f8\", \"score\": 97.98 }, { \"key\": \"\u8bc6\u522b\u53f7\", \"value\": \"91110116592334142D\", \"score\": 99.62 }, { \"key\": \"\u53d1\u7968\u53f7\", \"value\": \"4403212222\", \"score\": 96.58 } ] Remove templates If you need to delete a template, you can delete it by specifying the template ID to be deleted. Note that a template cannot be recovered after it has been deleted. HTTP request method: POST Request body parameters Name Type Required Description template_id List Existing template ID. type String Fixed value is del . Example JSON request { \"type\": \"del\", \"template_id\": \"\u5df2\u5b58\u5728\u6a21\u677fID\" } Response parameters Name Type Description template_id String Removed template ID. Example JSON response { \"template_id\": \"\u5df2\u5220\u9664\u6a21\u677f\u7684ID\", } List all templates The created templates can be listed by ID. HTTP request method: POST Request body parameters Name Type Description type String Fixed value is list . Example JSON request { \"type\": \"list\", } Response parameters Name Type Description template_id_list List List of existing templates. Example JSON response { \"template_id_list\": [\"\u5df2\u5b58\u5728\u6a21\u677f\u7684\u5217\u8868\"], } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Custom OCR feature via Amazon CloudFormation as described in Add or remove AI features and make sure the CustomOCR parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 20 Minutes","title":"Custom OCR"},{"location":"deploy-custom-ocr/#applicable-scenarios","text":"Applicable to structured recognition of cards and tickets, such as logistics documents, invoices, business licenses, itineraries, and train tickets.","title":"Applicable scenarios"},{"location":"deploy-custom-ocr/#rest-api-reference","text":"","title":"REST API Reference"},{"location":"deploy-custom-ocr/#add-templates","text":"Before text recognition, you need to create a template through the Add Template API . In order to improve the accuracy of text recognition, the image for template creation should have similar details to the recognized image and clear text content. The same template can contain multiple recognition areas. To create a template, each area to be recognized needs to specify the four coordinate points of the rectangular frame and the name of the area. You can use common image processing software such as GIMP to assist in obtaining coordinate points. The following describes how to create a template: Scale the image size to 100% in the image processing software. Move the mouse to the image and get the X, Y values of the coordinate points at the specified position. According to top left, top right, bottom right, bottom left order to record the four coordinate points of the rectangular box respectively, and specify the name of the recognition area, recognition area example as follows. [[[116, 335], [410, 335], [410, 374], [116, 374]], \"Phone Number\"], !!! Note \"Description\" The rectangular box area must completely cover the text content to be recognized. Please leave enough space for error tolerance on all sides of the recognition area without covering other recognition rectangular areas to get accurate recognition. Please refer to the Add Template API Request Body example to create a custom template and record the template ID after successful creation. After creating the template, first perform a text recognition test with the original image and template ID to ensure that the template can accurately recognize the required information. (Optional) If you find that the extracted information is incomplete, please confirm that the coordinate points are marked correctly and recreate the template by expanding the recognition area appropriately. The following describe the API parameters: HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64-encoded image data. type String Fixed value is add . template List Each element corresponds to the coordinates of an area to be extracted and its name. Example JSON request { \"type\": \"add\", \"url\": \"Image URL address\", \"template\": [ [ [[421, 465], [909, 471], [911, 503], [419, 495]], \"\u540d\u79f0\" ], [ [[419, 495], [911, 503], [909, 533], [415, 527]], \"\u8bc6\u522b\u53f7\" ], [ [[345, 339], [595, 343], [583, 397], [341, 385]], \"\u53d1\u7968\u53f7\" ] ] } { \"type\": \"add\", \"img\": \"Base64-encoded image data\", \"template\": [ [ [[421, 465], [909, 471], [911, 503], [419, 495]], \"\u540d\u79f0\" ], [ [[419, 495], [911, 503], [909, 533], [415, 527]], \"\u8bc6\u522b\u53f7\" ], [ [[345, 339], [595, 343], [583, 397], [341, 385]], \"\u53d1\u7968\u53f7\" ] ] } Response parameters Name Type Description template_id String Template ID Example JSON response { \"template_id\": \"\u6a21\u677f\u7684ID\", }","title":"Add templates"},{"location":"deploy-custom-ocr/#content-recognition","text":"After the template is created, you can use the corresponding template ID to perform text recognition on the image, and the returned value is the name and text content of the recognized area in the template. HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. type String Fixed value is query . template_id String Existing template ID. Example JSON request { \"template_id\": \"\u5df2\u5b58\u5728\u7684\u6a21\u677fID\", \"url\": \"Image URL address\" } Response parameters Name Type Description key String Field name. value String Extracted value. score Float Confidence score. Example JSON response [ { \"key\": \"\u540d\u79f0\", \"value\": \"\u4e9a\u9a6c\u900a\u901a\u6280\u672f\u670d\u52a1(\u5317\u4eac)\u6709\u9650\u516c\u53f8\", \"score\": 97.98 }, { \"key\": \"\u8bc6\u522b\u53f7\", \"value\": \"91110116592334142D\", \"score\": 99.62 }, { \"key\": \"\u53d1\u7968\u53f7\", \"value\": \"4403212222\", \"score\": 96.58 } ]","title":"Content recognition"},{"location":"deploy-custom-ocr/#remove-templates","text":"If you need to delete a template, you can delete it by specifying the template ID to be deleted. Note that a template cannot be recovered after it has been deleted. HTTP request method: POST Request body parameters Name Type Required Description template_id List Existing template ID. type String Fixed value is del . Example JSON request { \"type\": \"del\", \"template_id\": \"\u5df2\u5b58\u5728\u6a21\u677fID\" } Response parameters Name Type Description template_id String Removed template ID. Example JSON response { \"template_id\": \"\u5df2\u5220\u9664\u6a21\u677f\u7684ID\", }","title":"Remove templates"},{"location":"deploy-custom-ocr/#list-all-templates","text":"The created templates can be listed by ID. HTTP request method: POST Request body parameters Name Type Description type String Fixed value is list . Example JSON request { \"type\": \"list\", } Response parameters Name Type Description template_id_list List List of existing templates. Example JSON response { \"template_id_list\": [\"\u5df2\u5b58\u5728\u6a21\u677f\u7684\u5217\u8868\"], }","title":"List all templates"},{"location":"deploy-custom-ocr/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-custom-ocr/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-custom-ocr/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-custom-ocr/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-custom-ocr/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-custom-ocr/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-custom-ocr/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-custom-ocr/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-custom-ocr/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-custom-ocr/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-custom-ocr/#uninstall-the-deployment","text":"You can uninstall the Custom OCR feature via Amazon CloudFormation as described in Add or remove AI features and make sure the CustomOCR parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 20 Minutes","title":"Uninstall the deployment"},{"location":"deploy-face-comparison/","text":"Compare two faces of the same person and return a confidence score of the similarity. Applicable scenarios Applicable to customer authentication, photo classification and other scenarios, such as self-service hotel check-in, personnel check-in, campus entrance passage, and photo album production. REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description Faces List List of detected faces in the image. face_hash List List with 768 parameters for a 768-dimensional face vector. BoundingBox JSON Coordinate values of the face in the image, including the percentage of top, left, width, height relative to the full screen. Confidence Float Confidence score of the recognized face, which is a float type value between 0 and 1. FaceModelVersion String Current model version. Example JSON response { \"Faces\": [ { \"BoundingBox\": { \"Width\": 0.057923507690429685, \"Height\": 0.10426715253778117, \"Left\": 0.5258836364746093, \"Top\": 0.40569204600369024 }, \"Confidence\": 0.8736226558685303, \"face_hash\": [64.8125, -86.8125, -9.84375, 12.390625, 161.625, ..., 4.8046875 ] }, { \"BoundingBox\": { \"Width\": 0.04332921028137207, \"Height\": 0.10577215250117152, \"Left\": 0.1566245174407959, \"Top\": 0.6526811308355788 }, \"Confidence\": 0.8055327534675598, \"face_hash\": [61.21875, -33.84375, -36.71875, 70.625, 110.125, ..., -28.421875 ] } ], \"FaceModelVersion\": \"1.2.0\" } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_comparison\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Face Comparison feature via Amazon CloudFormation as described in Add or remove AI features and make sure the FaceComparison parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 6 Minutes","title":"Face Comparison"},{"location":"deploy-face-comparison/#applicable-scenarios","text":"Applicable to customer authentication, photo classification and other scenarios, such as self-service hotel check-in, personnel check-in, campus entrance passage, and photo album production.","title":"Applicable scenarios"},{"location":"deploy-face-comparison/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description Faces List List of detected faces in the image. face_hash List List with 768 parameters for a 768-dimensional face vector. BoundingBox JSON Coordinate values of the face in the image, including the percentage of top, left, width, height relative to the full screen. Confidence Float Confidence score of the recognized face, which is a float type value between 0 and 1. FaceModelVersion String Current model version. Example JSON response { \"Faces\": [ { \"BoundingBox\": { \"Width\": 0.057923507690429685, \"Height\": 0.10426715253778117, \"Left\": 0.5258836364746093, \"Top\": 0.40569204600369024 }, \"Confidence\": 0.8736226558685303, \"face_hash\": [64.8125, -86.8125, -9.84375, 12.390625, 161.625, ..., 4.8046875 ] }, { \"BoundingBox\": { \"Width\": 0.04332921028137207, \"Height\": 0.10577215250117152, \"Left\": 0.1566245174407959, \"Top\": 0.6526811308355788 }, \"Confidence\": 0.8055327534675598, \"face_hash\": [61.21875, -33.84375, -36.71875, 70.625, 110.125, ..., -28.421875 ] } ], \"FaceModelVersion\": \"1.2.0\" }","title":"REST API Reference"},{"location":"deploy-face-comparison/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-face-comparison/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-face-comparison/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-face-comparison/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-face-comparison/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-face-comparison/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-face-comparison/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_comparison\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-face-comparison/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-face-comparison/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-face-comparison/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-face-comparison/#uninstall-the-deployment","text":"You can uninstall the Face Comparison feature via Amazon CloudFormation as described in Add or remove AI features and make sure the FaceComparison parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 6 Minutes","title":"Uninstall the deployment"},{"location":"deploy-face-detection/","text":"Detect the face in an image, and map the detected facial features and contour key point information to 64 vector coordinates. Applicable scenarios Applicable to a variety of scenarios such as camera monitoring, facial feature analysis, and interactive marketing. REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description Faces List List of detected faces in the image. landmark_106 List 106 contour key points. x Int Number of pixels the key point from the left edge. y Int Number of pixels the key point from the upper edge. gender String Gender information. age String Age information. BoundingBox JSON Coordinate values of the face in the image, including the percentage of top, left, width, height relative to the full screen. Confidence Float Confidence score of the recognized face, which is a float type value between 0 and 1. FaceModelVersion String Current model version. Example JSON response { \"Faces\": [ { \"BoundingBox\": { \"Width\": 0.057923507690429685, \"Height\": 0.10426715253778117, \"Left\": 0.5258836364746093, \"Top\": 0.40569204600369024 }, \"Confidence\": 0.8736226558685303, \"landmark_106\": [ {\"x\": 894, \"y\": 542}, {\"x\": 846, \"y\": 461}, ... ], \"gender\": \"male\", \"age\": 27 }, { \"BoundingBox\": { \"Width\": 0.04332921028137207, \"Height\": 0.10577215250117152, \"Left\": 0.1566245174407959, \"Top\": 0.6526811308355788 }, \"Confidence\": 0.8055327534675598, \"landmark_106\": [ {\"x\": 306, \"y\": 802}, {\"x\": 254, \"y\": 734}, ... ], \"gender\": \"male\", \"age\": 35 } ], \"FaceModelVersion\": \"1.2.0\" } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Face Detection feature via Amazon CloudFormation as described in Add or remove AI features and make sure the FaceDetection parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 6 Minutes","title":"Face Detection"},{"location":"deploy-face-detection/#applicable-scenarios","text":"Applicable to a variety of scenarios such as camera monitoring, facial feature analysis, and interactive marketing.","title":"Applicable scenarios"},{"location":"deploy-face-detection/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description Faces List List of detected faces in the image. landmark_106 List 106 contour key points. x Int Number of pixels the key point from the left edge. y Int Number of pixels the key point from the upper edge. gender String Gender information. age String Age information. BoundingBox JSON Coordinate values of the face in the image, including the percentage of top, left, width, height relative to the full screen. Confidence Float Confidence score of the recognized face, which is a float type value between 0 and 1. FaceModelVersion String Current model version. Example JSON response { \"Faces\": [ { \"BoundingBox\": { \"Width\": 0.057923507690429685, \"Height\": 0.10426715253778117, \"Left\": 0.5258836364746093, \"Top\": 0.40569204600369024 }, \"Confidence\": 0.8736226558685303, \"landmark_106\": [ {\"x\": 894, \"y\": 542}, {\"x\": 846, \"y\": 461}, ... ], \"gender\": \"male\", \"age\": 27 }, { \"BoundingBox\": { \"Width\": 0.04332921028137207, \"Height\": 0.10577215250117152, \"Left\": 0.1566245174407959, \"Top\": 0.6526811308355788 }, \"Confidence\": 0.8055327534675598, \"landmark_106\": [ {\"x\": 306, \"y\": 802}, {\"x\": 254, \"y\": 734}, ... ], \"gender\": \"male\", \"age\": 35 } ], \"FaceModelVersion\": \"1.2.0\" }","title":"REST API Reference"},{"location":"deploy-face-detection/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-face-detection/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-face-detection/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-face-detection/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-face-detection/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-face-detection/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-face-detection/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-face-detection/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-face-detection/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-face-detection/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-face-detection/#uninstall-the-deployment","text":"You can uninstall the Face Detection feature via Amazon CloudFormation as described in Add or remove AI features and make sure the FaceDetection parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 6 Minutes","title":"Uninstall the deployment"},{"location":"deploy-general-ocr-traditional/","text":"Recognize and extract Traditional Chinese, numbers, alphabetical characters and symbols from images. Return the information such as text or coordinates. Applicable scenarios Applicable to a variety of scenarios such as paper documents changed to electronic format, document identification, and content review to improve information processing efficiency. REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description words String Recognized text. location JSON Coordinates of the recognized text, including top, left, width, height as integer values. score Float Confidence score of the recognized text, which is a float type value between 0 and 1. Example JSON response [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr_traditional\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the General OCR (Traditional Chinese) feature via Amazon CloudFormation as described in Add or remove AI features and make sure the GeneralOCRTraditional parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"General OCR (Traditional Chinese)"},{"location":"deploy-general-ocr-traditional/#applicable-scenarios","text":"Applicable to a variety of scenarios such as paper documents changed to electronic format, document identification, and content review to improve information processing efficiency.","title":"Applicable scenarios"},{"location":"deploy-general-ocr-traditional/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description words String Recognized text. location JSON Coordinates of the recognized text, including top, left, width, height as integer values. score Float Confidence score of the recognized text, which is a float type value between 0 and 1. Example JSON response [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API Reference"},{"location":"deploy-general-ocr-traditional/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-general-ocr-traditional/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-general-ocr-traditional/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-general-ocr-traditional/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-general-ocr-traditional/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-general-ocr-traditional/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-general-ocr-traditional/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr_traditional\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-general-ocr-traditional/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-general-ocr-traditional/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-general-ocr-traditional/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-general-ocr-traditional/#uninstall-the-deployment","text":"You can uninstall the General OCR (Traditional Chinese) feature via Amazon CloudFormation as described in Add or remove AI features and make sure the GeneralOCRTraditional parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Uninstall the deployment"},{"location":"deploy-general-ocr/","text":"Recognize and extract Simplified Chinese, numbers, alphabetical characters and symbols. Return the information such as text or coordinates. Applicable scenarios Applicable to a variety of scenarios such as paper documents changed to electronic format, document identification, and content review to improve information processing efficiency. API parameters HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example Request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description words String Recognized text. location JSON Coordinates of the recognized text, including top, left, width, height as integer values. score Float Confidence score of the recognized text, which is a float type value between 0 and 1. Example JSON response [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost estimation: example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in one second The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 1 second run each time \u00a5453.9 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 10KB data output each time, \u00a50.933/GB \u00a59.33 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a5556.16 Cost estimation: example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in one second The cost of using this solution to process this image is shown below: Service Dimensions Cost Amazon Lambda 1 million invokes $0.20 Amazon Lambda 4096MB memory, 1 second run each time $66.7 Amazon API Gateway 1 million invokes $3.5 Amazon API Gateway 10KB data output each time, $0.09/GB $0.9 Amazon CloudWatch Logs 10KB data output each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB storage, GB$0.1/GB each month $0.05 Total $76.35 Uninstall the deployment You can uninstall the General OCR (Simplified Chinese) feature via Amazon CloudFormation as described in Add or remove AI features and make sure the GeneralOCR parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"General OCR (Simplified Chinese)"},{"location":"deploy-general-ocr/#applicable-scenarios","text":"Applicable to a variety of scenarios such as paper documents changed to electronic format, document identification, and content review to improve information processing efficiency.","title":"Applicable scenarios"},{"location":"deploy-general-ocr/#api-parameters","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example Request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description words String Recognized text. location JSON Coordinates of the recognized text, including top, left, width, height as integer values. score Float Confidence score of the recognized text, which is a float type value between 0 and 1. Example JSON response [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"API parameters"},{"location":"deploy-general-ocr/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-general-ocr/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-general-ocr/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-general-ocr/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-general-ocr/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-general-ocr/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-general-ocr/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-general-ocr/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in one second The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 1 second run each time \u00a5453.9 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 10KB data output each time, \u00a50.933/GB \u00a59.33 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a5556.16","title":"Cost estimation: example 1"},{"location":"deploy-general-ocr/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in one second The cost of using this solution to process this image is shown below: Service Dimensions Cost Amazon Lambda 1 million invokes $0.20 Amazon Lambda 4096MB memory, 1 second run each time $66.7 Amazon API Gateway 1 million invokes $3.5 Amazon API Gateway 10KB data output each time, $0.09/GB $0.9 Amazon CloudWatch Logs 10KB data output each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB storage, GB$0.1/GB each month $0.05 Total $76.35","title":"Cost estimation: example 2"},{"location":"deploy-general-ocr/#uninstall-the-deployment","text":"You can uninstall the General OCR (Simplified Chinese) feature via Amazon CloudFormation as described in Add or remove AI features and make sure the GeneralOCR parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Uninstall the deployment"},{"location":"deploy-human-attribute-recognition/","text":"Recognize the attributes of the human body in the image, and return the human body position coordinates and attribute analysis in each area, such as the semantic information of 16 attributes such as gender, age, and clothing. Applicable scenarios Applicable to scenarios such as smart security, smart retail, and pedestrian search. List of attributes Name Semantic Upper wear Short sleeve, Long sleeve Lower wear Shorts/Skirts, Pants/Skirts Upper wear texture Pattern, Solid, Stripe/Check Backpack Without bag, With bag Whether to wear glasses No, Yes Whether to wear a hat No, Yes Body orientation Front, Back, Left, Right Truncate above No, Yes Truncate below No, Yes Occlusion None, Light, Heavy Whether to wear a mask No, Yes Gender Male, Female Age Children, teenager, middle-aged, elderly Smoking No, Yes Telephone No, Yes Whether to carry things No, Yes REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description Labels List List of human bodies recognized in the image. upper_wear Dict Short Sleeve, Long Sleeve upper_wear_texture Dict Pattern, Solid, Stripe/Check lower_wear Dict Shorts/Skirts, Pants/Skirts glasses Dict With glasses, without glasses bag Dict With backpack, without backpack headwear Dict With hat, without hat orientation Dict left side, back side, front side, right side upper_cut Dict with truncation, without truncation lower_cut Dict with truncation, without truncation occlusion Dict No Occlusion, Light Occlusion, Heavy Occlusion face_mask Dict With mask, without mask gender Dict Male, Female age Dict Children, Teens, Middle-aged, Seniors smoke Dict Smoking, non-smoking cellphone Dict with telephone, without telephone carrying_item Dict With or without carry BoundingBox Dict Coordinate values of the human body in the image, including the percentage of top, left, width, height relative to the full screen LabelModelVersion String Current model version number Example JSON response { \"Labels\": [ { \"upper_wear\": { \"\u77ed\u8896\": 0.01, \"\u957f\u8896\": 99.99 }, \"upper_wear_texture\": { \"\u56fe\u6848\": 0, \"\u7eaf\u8272\": 99.55, \"\u6761\u7eb9/\u683c\u5b50\": 0.45 }, \"lower_wear\": { \"\u77ed\u88e4/\u88d9\": 0.15, \"\u957f\u88e4/\u88d9\": 99.85 }, \"glasses\": { \"\u6709\u773c\u955c\": 57.74, \"\u65e0\u773c\u955c\": 42.26 }, \"bag\": { \"\u6709\u80cc\u5305\": 0.69, \"\u65e0\u80cc\u5305\": 99.31 }, \"headwear\": { \"\u6709\u5e3d\": 97.02, \"\u65e0\u5e3d\": 2.98 }, \"orientation\": { \"\u5de6\u4fa7\u9762\": 99.99, \"\u80cc\u9762\": 0, \"\u6b63\u9762\": 0, \"\u53f3\u4fa7\u9762\": 0.01 }, \"upper_cut\": { \"\u6709\u622a\u65ad\": 0, \"\u65e0\u622a\u65ad\": 100 }, \"lower_cut\": { \"\u65e0\u622a\u65ad\": 0.18, \"\u6709\u622a\u65ad\": 99.82 }, \"occlusion\": { \"\u65e0\u906e\u6321\": 100, \"\u91cd\u5ea6\u906e\u6321\": 0, \"\u8f7b\u5ea6\u906e\u6321\": 0 }, \"face_mask\": { \"\u65e0\u53e3\u7f69\": 100, \"\u6234\u53e3\u7f69\": 0 }, \"gender\": { \"\u7537\u6027\": 100, \"\u5973\u6027\": 0 }, \"age\": { \"\u5e7c\u513f\": 0, \"\u9752\u5c11\u5e74\": 100, \"\u4e2d\u5e74\": 0, \"\u8001\u5e74\": 0 }, \"smoke\": { \"\u5438\u70df\": 0, \"\u672a\u5438\u70df\": 100 }, \"cellphone\": { \"\u4f7f\u7528\u624b\u673a\": 0, \"\u672a\u4f7f\u7528\u624b\u673a\": 100 }, \"carrying_item\": { \"\u6709\u624b\u63d0\u7269\": 0.03, \"\u65e0\u624b\u63d0\u7269\": 99.97 }, \"BoundingBox\": { \"Width\": 0.11781848725818456, \"Height\": 0.43450208474661556, \"Left\": 0.5310931977771577, \"Top\": 0.45263674786982644 } }, ... ], \"LabelModelVersion\": \"1.2.0\" } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Human Attribute Recognition feature via Amazon CloudFormation as described in Add or remove AI features and make sure the HumanAttributeRecognition parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Human Attribute Recognition"},{"location":"deploy-human-attribute-recognition/#applicable-scenarios","text":"Applicable to scenarios such as smart security, smart retail, and pedestrian search.","title":"Applicable scenarios"},{"location":"deploy-human-attribute-recognition/#list-of-attributes","text":"Name Semantic Upper wear Short sleeve, Long sleeve Lower wear Shorts/Skirts, Pants/Skirts Upper wear texture Pattern, Solid, Stripe/Check Backpack Without bag, With bag Whether to wear glasses No, Yes Whether to wear a hat No, Yes Body orientation Front, Back, Left, Right Truncate above No, Yes Truncate below No, Yes Occlusion None, Light, Heavy Whether to wear a mask No, Yes Gender Male, Female Age Children, teenager, middle-aged, elderly Smoking No, Yes Telephone No, Yes Whether to carry things No, Yes","title":"List of attributes"},{"location":"deploy-human-attribute-recognition/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description Labels List List of human bodies recognized in the image. upper_wear Dict Short Sleeve, Long Sleeve upper_wear_texture Dict Pattern, Solid, Stripe/Check lower_wear Dict Shorts/Skirts, Pants/Skirts glasses Dict With glasses, without glasses bag Dict With backpack, without backpack headwear Dict With hat, without hat orientation Dict left side, back side, front side, right side upper_cut Dict with truncation, without truncation lower_cut Dict with truncation, without truncation occlusion Dict No Occlusion, Light Occlusion, Heavy Occlusion face_mask Dict With mask, without mask gender Dict Male, Female age Dict Children, Teens, Middle-aged, Seniors smoke Dict Smoking, non-smoking cellphone Dict with telephone, without telephone carrying_item Dict With or without carry BoundingBox Dict Coordinate values of the human body in the image, including the percentage of top, left, width, height relative to the full screen LabelModelVersion String Current model version number Example JSON response { \"Labels\": [ { \"upper_wear\": { \"\u77ed\u8896\": 0.01, \"\u957f\u8896\": 99.99 }, \"upper_wear_texture\": { \"\u56fe\u6848\": 0, \"\u7eaf\u8272\": 99.55, \"\u6761\u7eb9/\u683c\u5b50\": 0.45 }, \"lower_wear\": { \"\u77ed\u88e4/\u88d9\": 0.15, \"\u957f\u88e4/\u88d9\": 99.85 }, \"glasses\": { \"\u6709\u773c\u955c\": 57.74, \"\u65e0\u773c\u955c\": 42.26 }, \"bag\": { \"\u6709\u80cc\u5305\": 0.69, \"\u65e0\u80cc\u5305\": 99.31 }, \"headwear\": { \"\u6709\u5e3d\": 97.02, \"\u65e0\u5e3d\": 2.98 }, \"orientation\": { \"\u5de6\u4fa7\u9762\": 99.99, \"\u80cc\u9762\": 0, \"\u6b63\u9762\": 0, \"\u53f3\u4fa7\u9762\": 0.01 }, \"upper_cut\": { \"\u6709\u622a\u65ad\": 0, \"\u65e0\u622a\u65ad\": 100 }, \"lower_cut\": { \"\u65e0\u622a\u65ad\": 0.18, \"\u6709\u622a\u65ad\": 99.82 }, \"occlusion\": { \"\u65e0\u906e\u6321\": 100, \"\u91cd\u5ea6\u906e\u6321\": 0, \"\u8f7b\u5ea6\u906e\u6321\": 0 }, \"face_mask\": { \"\u65e0\u53e3\u7f69\": 100, \"\u6234\u53e3\u7f69\": 0 }, \"gender\": { \"\u7537\u6027\": 100, \"\u5973\u6027\": 0 }, \"age\": { \"\u5e7c\u513f\": 0, \"\u9752\u5c11\u5e74\": 100, \"\u4e2d\u5e74\": 0, \"\u8001\u5e74\": 0 }, \"smoke\": { \"\u5438\u70df\": 0, \"\u672a\u5438\u70df\": 100 }, \"cellphone\": { \"\u4f7f\u7528\u624b\u673a\": 0, \"\u672a\u4f7f\u7528\u624b\u673a\": 100 }, \"carrying_item\": { \"\u6709\u624b\u63d0\u7269\": 0.03, \"\u65e0\u624b\u63d0\u7269\": 99.97 }, \"BoundingBox\": { \"Width\": 0.11781848725818456, \"Height\": 0.43450208474661556, \"Left\": 0.5310931977771577, \"Top\": 0.45263674786982644 } }, ... ], \"LabelModelVersion\": \"1.2.0\" }","title":"REST API Reference"},{"location":"deploy-human-attribute-recognition/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-human-attribute-recognition/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-human-attribute-recognition/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-human-attribute-recognition/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-human-attribute-recognition/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-human-attribute-recognition/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-human-attribute-recognition/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-human-attribute-recognition/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-human-attribute-recognition/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-human-attribute-recognition/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-human-attribute-recognition/#uninstall-the-deployment","text":"You can uninstall the Human Attribute Recognition feature via Amazon CloudFormation as described in Add or remove AI features and make sure the HumanAttributeRecognition parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Uninstall the deployment"},{"location":"deploy-human-image-segmentation/","text":"Segment human bodies from background and return the alpha channel which is a color component representing the degree of transparency of a color. Applicable scenarios Applicable to photo background replacement, post-processing, ID photo production, portrait cutout beautification, background blur and many other scenarios. REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. type String No By default, type is empty, and it will return the Base64 encoding of the Alpha channel of the image after removing the background. When type is foreground , it will return the Base64 encoding of the transparent background image in PNG format. Example JSON request { \"url\": \"Image URL address\", \"type\": \"foreground\" } { \"img\": \"Base64-encoded image data\", \"type\": \"foreground\" } Response parameters Name Type Description result String Base64 encoded image data Example JSON response { \"result\": \"Base64 encoded image data\" } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/human_image_segmentation\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Human Image Segmentation feature via Amazon CloudFormation as described in Add or remove AI features and make sure the HumanImageSegmentation parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 9 Minutes","title":"Human Image Segmentation"},{"location":"deploy-human-image-segmentation/#applicable-scenarios","text":"Applicable to photo background replacement, post-processing, ID photo production, portrait cutout beautification, background blur and many other scenarios.","title":"Applicable scenarios"},{"location":"deploy-human-image-segmentation/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. type String No By default, type is empty, and it will return the Base64 encoding of the Alpha channel of the image after removing the background. When type is foreground , it will return the Base64 encoding of the transparent background image in PNG format. Example JSON request { \"url\": \"Image URL address\", \"type\": \"foreground\" } { \"img\": \"Base64-encoded image data\", \"type\": \"foreground\" } Response parameters Name Type Description result String Base64 encoded image data Example JSON response { \"result\": \"Base64 encoded image data\" }","title":"REST API Reference"},{"location":"deploy-human-image-segmentation/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-human-image-segmentation/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-human-image-segmentation/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-human-image-segmentation/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-human-image-segmentation/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-human-image-segmentation/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-human-image-segmentation/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/human_image_segmentation\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-human-image-segmentation/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-human-image-segmentation/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-human-image-segmentation/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-human-image-segmentation/#uninstall-the-deployment","text":"You can uninstall the Human Image Segmentation feature via Amazon CloudFormation as described in Add or remove AI features and make sure the HumanImageSegmentation parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 9 Minutes","title":"Uninstall the deployment"},{"location":"deploy-image-similarity/","text":"Compare two images by calculating the cosine distance from the image feature vector and converting it into confidence, and return similarity score. Applicable scenarios Applicable to scenarios such as commodity recognition, remake recognition, and intelligent photo albums. REST API Reference The API supports two input modes: single image and image pair. Single image mode With a single image as input, it returns the feature vectors of the image. You need to maintain a vector retrieval system. This is applicable to search or callback scenarios. HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String CChoose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description result List List with 512 parameters for a 512-dimensional image vector. Example JSON response { \"result\": [ -0.02555299922823906, 0.012955999933183193, -0.10079500079154968, ... ] } Image pair mode With two images as input, it returns the cosine similarity of two images. This is applicable to similarity comparison. HTTP request method: POST Request body parameters Name Type Required Description url_1 String Choose url_1 or img_1. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img_1 String Choose img_1 or url_1. Base64 encoded image data. url_2 String Choose url_2 or img_2. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img_2 String Choose img_2 or url_2. Base64 encoded image data. Example JSON request { \"url_1\": \"Image URL address\", \"url_2\": \"Image URL address\" } { \"img_1\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\", \"img_2\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } Response parameters Name Type Description similarity Float Cosine similarity of the two images, which is a Float value between 0 and 1. The closer it is to 1, the more similar the two images are. Example JSON response { \"similarity\": 0.95421 } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Image Similarity feature via Amazon CloudFormation as described in Add or remove AI features and make sure the Image Similarity parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Image Similarity"},{"location":"deploy-image-similarity/#applicable-scenarios","text":"Applicable to scenarios such as commodity recognition, remake recognition, and intelligent photo albums.","title":"Applicable scenarios"},{"location":"deploy-image-similarity/#rest-api-reference","text":"The API supports two input modes: single image and image pair.","title":"REST API Reference"},{"location":"deploy-image-similarity/#single-image-mode","text":"With a single image as input, it returns the feature vectors of the image. You need to maintain a vector retrieval system. This is applicable to search or callback scenarios. HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String CChoose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description result List List with 512 parameters for a 512-dimensional image vector. Example JSON response { \"result\": [ -0.02555299922823906, 0.012955999933183193, -0.10079500079154968, ... ] }","title":"Single image mode"},{"location":"deploy-image-similarity/#image-pair-mode","text":"With two images as input, it returns the cosine similarity of two images. This is applicable to similarity comparison. HTTP request method: POST Request body parameters Name Type Required Description url_1 String Choose url_1 or img_1. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img_1 String Choose img_1 or url_1. Base64 encoded image data. url_2 String Choose url_2 or img_2. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img_2 String Choose img_2 or url_2. Base64 encoded image data. Example JSON request { \"url_1\": \"Image URL address\", \"url_2\": \"Image URL address\" } { \"img_1\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\", \"img_2\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } Response parameters Name Type Description similarity Float Cosine similarity of the two images, which is a Float value between 0 and 1. The closer it is to 1, the more similar the two images are. Example JSON response { \"similarity\": 0.95421 }","title":"Image pair mode"},{"location":"deploy-image-similarity/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-image-similarity/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-image-similarity/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-image-similarity/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-image-similarity/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-image-similarity/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-image-similarity/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-image-similarity/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-image-similarity/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-image-similarity/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-image-similarity/#uninstall-the-deployment","text":"You can uninstall the Image Similarity feature via Amazon CloudFormation as described in Add or remove AI features and make sure the Image Similarity parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Uninstall the deployment"},{"location":"deploy-image-super-resolution/","text":"Upscale the resolution and enhance details in the images. Applicable scenarios Applicable to converting original image assets into high resolution images. Requirements for AWS service quotas This API needs to create a GPU instance based on Amazon SageMaker. If the corresponding instance limit in your AWS account is insufficient, the API feature will be deployed abnormally. You can click Support Center on the toolbar at the top of the AWS Management Console to create a support ticket to request an increase in the instance limit of the Amazon SageMaker service. For more information, see AWS service quotas . The default AWS Lambda memory is about 4GB (4096 MB). If the AWS Lambda function limit in your AWS account is lower than 4096 MB, the API feature will be deployed abnormally. You can click Support Center on the toolbar at the top of the AWS Management Console to create a support ticket and request to increase the memory limit of the AWS Lambda service. For more information, see AWS service quotas . REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp. Image size should not exceed 1920 * 1080. With portrait enhancement enabled, it is recommended that the image size should not exceed 1280 * 720. Due to performance limitations, the recommended image size does not exceed 400 * 400 for architecture based on AWS Lambda. img String Choose url or img. Base64-encoded image data scale Integer no Upscale size. 2 (default) or 4 is supported face Bool no By default, it is False. When set to True, face enhancement is enabled. Only GPU deployment is supported. Example JSON request { \"url\": \"Image URL address\", \"scale\" : 2 } { \"img\": \"Base64-encoded image data\", \"scale\" : 4 } Response parameters Name Type Description result String Base64-encoded image data after scaling Example JSON response { \"result\": \"Base64-encoded image data after scaling\" } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/image_super_resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Example In US East (Ohio) Region (us-east-2), process one million images, with an average processing time of 1 second for one image. Amazon SageMaker endpoint instance will be charged as long as it is started. The cost of using this solution is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 1 second run each time $66.7 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 4MB data output each time, $0.09/GB $360 Amazon CloudWatch Logs 10KB each time, $0.50/GB $0.05 Amazon Elastic Container Registry 0.5GB storage, $0.1/GB per month $0.05 Amazon SageMaker Endpoint instance runs for 278 hours, ml.inf1.xlarge $0.297/hour $82.57 Amazon SageMaker Endpoint instance data input is 1MB each time, $0.016/GB $16 Amazon SageMaker Endpoint instance data output is 4MB each time, $0.016/GB $64 Total $593.07 Uninstall the deployment You can uninstall the Image Super Resolution feature via Amazon CloudFormation as described in Add or remove AI features and make sure the ImageSuperResolution parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 20 Minutes","title":"Image Super Resolution"},{"location":"deploy-image-super-resolution/#applicable-scenarios","text":"Applicable to converting original image assets into high resolution images.","title":"Applicable scenarios"},{"location":"deploy-image-super-resolution/#requirements-for-aws-service-quotas","text":"This API needs to create a GPU instance based on Amazon SageMaker. If the corresponding instance limit in your AWS account is insufficient, the API feature will be deployed abnormally. You can click Support Center on the toolbar at the top of the AWS Management Console to create a support ticket to request an increase in the instance limit of the Amazon SageMaker service. For more information, see AWS service quotas . The default AWS Lambda memory is about 4GB (4096 MB). If the AWS Lambda function limit in your AWS account is lower than 4096 MB, the API feature will be deployed abnormally. You can click Support Center on the toolbar at the top of the AWS Management Console to create a support ticket and request to increase the memory limit of the AWS Lambda service. For more information, see AWS service quotas .","title":"Requirements for AWS service quotas"},{"location":"deploy-image-super-resolution/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp. Image size should not exceed 1920 * 1080. With portrait enhancement enabled, it is recommended that the image size should not exceed 1280 * 720. Due to performance limitations, the recommended image size does not exceed 400 * 400 for architecture based on AWS Lambda. img String Choose url or img. Base64-encoded image data scale Integer no Upscale size. 2 (default) or 4 is supported face Bool no By default, it is False. When set to True, face enhancement is enabled. Only GPU deployment is supported. Example JSON request { \"url\": \"Image URL address\", \"scale\" : 2 } { \"img\": \"Base64-encoded image data\", \"scale\" : 4 } Response parameters Name Type Description result String Base64-encoded image data after scaling Example JSON response { \"result\": \"Base64-encoded image data after scaling\" }","title":"REST API Reference"},{"location":"deploy-image-super-resolution/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-image-super-resolution/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-image-super-resolution/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-image-super-resolution/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-image-super-resolution/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-image-super-resolution/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-image-super-resolution/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/image_super_resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-image-super-resolution/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output","title":"Cost Estimation"},{"location":"deploy-image-super-resolution/#example","text":"In US East (Ohio) Region (us-east-2), process one million images, with an average processing time of 1 second for one image. Amazon SageMaker endpoint instance will be charged as long as it is started. The cost of using this solution is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 1 second run each time $66.7 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 4MB data output each time, $0.09/GB $360 Amazon CloudWatch Logs 10KB each time, $0.50/GB $0.05 Amazon Elastic Container Registry 0.5GB storage, $0.1/GB per month $0.05 Amazon SageMaker Endpoint instance runs for 278 hours, ml.inf1.xlarge $0.297/hour $82.57 Amazon SageMaker Endpoint instance data input is 1MB each time, $0.016/GB $16 Amazon SageMaker Endpoint instance data output is 4MB each time, $0.016/GB $64 Total $593.07","title":"Example"},{"location":"deploy-image-super-resolution/#uninstall-the-deployment","text":"You can uninstall the Image Super Resolution feature via Amazon CloudFormation as described in Add or remove AI features and make sure the ImageSuperResolution parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 20 Minutes","title":"Uninstall the deployment"},{"location":"deploy-object-recognition/","text":"Recognize objects in the image and return the region information and confidence score for each object. 300 types of objects are supported. Applicable scenarios Applicable to IPC image detection, target detection and tracking in image scenes for traffic, security and other industries. List of supported object recognition The following is a list of supported entities for target detection. ID accordion airplane alligator apple army_tank awning backpack ball balloon banana barrel baseball baseball_bat baseball_glove basket bathtub bear bed bee beer_bottle bell_pepper belt bench bicycle billboard bird blackboard boat book bookcase boot bottle bowl bowling_ball box bracelet brassiere bread broccoli building bus_(vehicle) butterfly cabinet cake camel camera can candle candy_bar cannon canoe car_(automobile) carrot cart castle cat caterpillar cello cellular_telephone chair chicken_(animal) chopping_board chopstick christmas_tree clock coat cocktail coffee_table coin computer_keyboard computer_monitor cone cookie cow cowboy_hat crab_(animal) crown cucumber cup cupboard curtain deer desk dessert dinosaur dog doll dolphin door doorknob doughnut dragonfly drawer dress drum_(musical_instrument) duck duffel_bag eagle earring egg elephant fan faucet fireplace fireplug fish flag flower_arrangement flowerpot football_helmet fork fountain french_fries frisbee frog fruit fruit_juice frying_pan gazelle giraffe glass_(drink_container) glove goat goggles goose grape guitar gun hamburger hamster handbag handle harbor_seal hat headset helicopter helmet high_heels hog horse house icecream insect jacket jaguar jean jellyfish kitchen_table kite knife ladder lamp lantern laptop_computer lavender lemon lettuce license_plate life_jacket lightbulb lighthouse lily lion lizard maple mask microphone microwave_oven minivan mirror monkey motorcycle mouse_(computer_equipment) muffin mug mushroom musical_instrument napkin necklace necktie nightstand onion orange_(fruit) oven owl paddle painting palm_tree parachute parking_meter parrot pasta pastry pen penguin person piano pillow pizza plastic_bag plate polar_bear pool_table porch poster potted_plant pumpkin rabbit refrigerator remote_control ring roller_skate rose salad sandal_(type_of_shoe) sandwich saucer saxophone scarf scissors sculpture sheep shirt shoe short_pants shrimp sink skateboard ski skirt skullcap snake snowboard soccer_ball sock sofa sofa_bed sparrow speaker_(stero_equipment) spectacles spider spoon sportswear squirrel stool stop_sign stove straw_(for_drinking) strawberry street_sign streetlight suit_(clothing) suitcase sunflower sunglasses sunhat surfboard sushi swimming_pool swimsuit table tablet_computer taxi teddy_bear telephone television_set tennis_ball tennis_racket tent tiger toilet toilet_tissue tomato toothbrush towel tower toy traffic_light train_(railroad_vehicle) trash_can tray tree tripod trousers truck trumpet turtle umbrella vase vegetables violin wall_socket watch water_jug whale wheel wheelchair window wineglass zebra REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description Labels List List of recognized objects in the image Name String Target category Instances List List of category instances BoundingBox JSON Coordinate value of the instance in the image, including the percentage of top, left, width, height relative to the full screen Confidence Float Instance confidence, which is from 0 to 100 Confidence Int Maximum value of current class instance confidence LabelModelVersion String Current model version number Example JSON response { \"Labels\": [ { \"Name\": \"car_(automobile)\", \"Confidence\": 67.87780523300171, \"Instances\": [ { \"BoundingBox\": { \"Width\": 1.0013043403596384, \"Height\": 0.9958885181613408, \"Left\": -0.00021715163893532008, \"Top\": 0.00033918747441136817 }, \"Confidence\": 67.87780523300171 } ] }, { \"Name\": \"mirror\", \"Confidence\": 59.2678964138031, \"Instances\": [ { \"BoundingBox\": { \"Width\": 0.14041614532470703, \"Height\": 0.29166373257057565, \"Left\": 0.2743588984012604, \"Top\": 0.2794425819140053 }, \"Confidence\": 59.2678964138031 } ] }, { \"Name\": \"window\", \"Confidence\": 16.396354138851166, \"Instances\": [ { \"BoundingBox\": { \"Width\": 0.44319993257522583, \"Height\": 0.6673663154702585, \"Left\": 0.5509995222091675, \"Top\": 0.015529238811174562 }, \"Confidence\": 16.396354138851166 } ] } ], \"LabelModelVersion\": \"1.2.0\" } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/object_recognition\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Object Recognition feature via Amazon CloudFormation as described in Add or remove AI features and make sure the ObjectRecognition parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Object Recognition"},{"location":"deploy-object-recognition/#applicable-scenarios","text":"Applicable to IPC image detection, target detection and tracking in image scenes for traffic, security and other industries.","title":"Applicable scenarios"},{"location":"deploy-object-recognition/#list-of-supported-object-recognition","text":"The following is a list of supported entities for target detection. ID accordion airplane alligator apple army_tank awning backpack ball balloon banana barrel baseball baseball_bat baseball_glove basket bathtub bear bed bee beer_bottle bell_pepper belt bench bicycle billboard bird blackboard boat book bookcase boot bottle bowl bowling_ball box bracelet brassiere bread broccoli building bus_(vehicle) butterfly cabinet cake camel camera can candle candy_bar cannon canoe car_(automobile) carrot cart castle cat caterpillar cello cellular_telephone chair chicken_(animal) chopping_board chopstick christmas_tree clock coat cocktail coffee_table coin computer_keyboard computer_monitor cone cookie cow cowboy_hat crab_(animal) crown cucumber cup cupboard curtain deer desk dessert dinosaur dog doll dolphin door doorknob doughnut dragonfly drawer dress drum_(musical_instrument) duck duffel_bag eagle earring egg elephant fan faucet fireplace fireplug fish flag flower_arrangement flowerpot football_helmet fork fountain french_fries frisbee frog fruit fruit_juice frying_pan gazelle giraffe glass_(drink_container) glove goat goggles goose grape guitar gun hamburger hamster handbag handle harbor_seal hat headset helicopter helmet high_heels hog horse house icecream insect jacket jaguar jean jellyfish kitchen_table kite knife ladder lamp lantern laptop_computer lavender lemon lettuce license_plate life_jacket lightbulb lighthouse lily lion lizard maple mask microphone microwave_oven minivan mirror monkey motorcycle mouse_(computer_equipment) muffin mug mushroom musical_instrument napkin necklace necktie nightstand onion orange_(fruit) oven owl paddle painting palm_tree parachute parking_meter parrot pasta pastry pen penguin person piano pillow pizza plastic_bag plate polar_bear pool_table porch poster potted_plant pumpkin rabbit refrigerator remote_control ring roller_skate rose salad sandal_(type_of_shoe) sandwich saucer saxophone scarf scissors sculpture sheep shirt shoe short_pants shrimp sink skateboard ski skirt skullcap snake snowboard soccer_ball sock sofa sofa_bed sparrow speaker_(stero_equipment) spectacles spider spoon sportswear squirrel stool stop_sign stove straw_(for_drinking) strawberry street_sign streetlight suit_(clothing) suitcase sunflower sunglasses sunhat surfboard sushi swimming_pool swimsuit table tablet_computer taxi teddy_bear telephone television_set tennis_ball tennis_racket tent tiger toilet toilet_tissue tomato toothbrush towel tower toy traffic_light train_(railroad_vehicle) trash_can tray tree tripod trousers truck trumpet turtle umbrella vase vegetables violin wall_socket watch water_jug whale wheel wheelchair window wineglass zebra","title":"List of supported object recognition"},{"location":"deploy-object-recognition/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description Labels List List of recognized objects in the image Name String Target category Instances List List of category instances BoundingBox JSON Coordinate value of the instance in the image, including the percentage of top, left, width, height relative to the full screen Confidence Float Instance confidence, which is from 0 to 100 Confidence Int Maximum value of current class instance confidence LabelModelVersion String Current model version number Example JSON response { \"Labels\": [ { \"Name\": \"car_(automobile)\", \"Confidence\": 67.87780523300171, \"Instances\": [ { \"BoundingBox\": { \"Width\": 1.0013043403596384, \"Height\": 0.9958885181613408, \"Left\": -0.00021715163893532008, \"Top\": 0.00033918747441136817 }, \"Confidence\": 67.87780523300171 } ] }, { \"Name\": \"mirror\", \"Confidence\": 59.2678964138031, \"Instances\": [ { \"BoundingBox\": { \"Width\": 0.14041614532470703, \"Height\": 0.29166373257057565, \"Left\": 0.2743588984012604, \"Top\": 0.2794425819140053 }, \"Confidence\": 59.2678964138031 } ] }, { \"Name\": \"window\", \"Confidence\": 16.396354138851166, \"Instances\": [ { \"BoundingBox\": { \"Width\": 0.44319993257522583, \"Height\": 0.6673663154702585, \"Left\": 0.5509995222091675, \"Top\": 0.015529238811174562 }, \"Confidence\": 16.396354138851166 } ] } ], \"LabelModelVersion\": \"1.2.0\" }","title":"REST API Reference"},{"location":"deploy-object-recognition/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-object-recognition/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-object-recognition/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-object-recognition/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-object-recognition/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-object-recognition/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-object-recognition/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/object_recognition\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-object-recognition/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-object-recognition/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-object-recognition/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-object-recognition/#uninstall-the-deployment","text":"You can uninstall the Object Recognition feature via Amazon CloudFormation as described in Add or remove AI features and make sure the ObjectRecognition parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Uninstall the deployment"},{"location":"deploy-pornography-detection/","text":"Detect pornographic image in three dimensions (normal, sexy, porn) and return confidence scores. Applicable scenarios Applicable to fast processing of pornographic content, thus helping to reduce auditing manpower, effectively reduce the risk of pornography, and improve the efficiency of information processing. REST API Reference HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description normal Float Proportion of normal dimensions of the recognized image sexy Float Proportion of sexy dimensions of the recognized image porn Float Proportion of pornographic dimensions of the recognized image Example JSON response { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/pornography-detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Pornography Detection feature via Amazon CloudFormation as described in Add or remove AI features and make sure the PornographyDetection parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Pornography Detection"},{"location":"deploy-pornography-detection/#applicable-scenarios","text":"Applicable to fast processing of pornographic content, thus helping to reduce auditing manpower, effectively reduce the risk of pornography, and improve the efficiency of information processing.","title":"Applicable scenarios"},{"location":"deploy-pornography-detection/#rest-api-reference","text":"HTTP request method: POST Request body parameters Name Type Required Description url String Choose url or img. Image URL address, which supports HTTP/HTTPS and S3 protocols. Supported image formats are jpg/jpeg/png/bmp, with the longest side not exceeding 4096px. img String Choose url or img. Base64 encoded image data. Example JSON request { \"url\": \"Image URL address\" } { \"img\": \"Base64-encoded image data\" } Response parameters Name Type Description normal Float Proportion of normal dimensions of the recognized image sexy Float Proportion of sexy dimensions of the recognized image porn Float Proportion of pornographic dimensions of the recognized image Example JSON response { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 }","title":"REST API Reference"},{"location":"deploy-pornography-detection/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-pornography-detection/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-pornography-detection/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-pornography-detection/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-pornography-detection/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-pornography-detection/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-pornography-detection/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/pornography-detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-pornography-detection/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-pornography-detection/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-pornography-detection/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-pornography-detection/#uninstall-the-deployment","text":"You can uninstall the Pornography Detection feature via Amazon CloudFormation as described in Add or remove AI features and make sure the PornographyDetection parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Uninstall the deployment"},{"location":"deploy-text-similarity/","text":"Compare two Chinese words or sentences and return similarity score. Applicable scenarios Applicable to search engines, recommendation systems, machine translation, automatic response, named entity recognition, spelling error correction and other scenarios. REST API Reference The API supports two input modes: single text or text pair. Single text mode With a single text as input, it returns the feature vectors of the text. You need to maintain a vector retrieval system. This is applicable to search or callback scenarios. HTTP request method: POST Request body parameters Name Type Required Description text String Yes Text data Example JSON request { \"text\": \"Test\" } Response parameters Name Type Description result List List with 768 parameters for a 768-dimensional text vector Example JSON response { \"result\": [ 0.025645000860095024, 0.001914000022225082, 0.007929000072181225, ... ] } Text pair mode With text pair as input, it returns the cosine similarity of two texts. This is applicable to similarity comparison. HTTP request method: POST Request body parameters Name Type Required Description text_1 String Text data. text_2 String Text data. Example JSON request { \"text_1\": \"Test1\", \"text_2\": \"Test2\" } Response parameters Name Type Description similarity Float Cosine similarity of the text pair, which is a Float value between 0 and 1. The closer it is to 1, the more similar the text pair is. Example JSON response { \"similarity\": 0.95421 } API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55 Uninstall the deployment You can uninstall the Text Similarity feature via Amazon CloudFormation as described in Add or remove AI features and make sure the TextSimilarity parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Text Similarity"},{"location":"deploy-text-similarity/#applicable-scenarios","text":"Applicable to search engines, recommendation systems, machine translation, automatic response, named entity recognition, spelling error correction and other scenarios.","title":"Applicable scenarios"},{"location":"deploy-text-similarity/#rest-api-reference","text":"The API supports two input modes: single text or text pair.","title":"REST API Reference"},{"location":"deploy-text-similarity/#single-text-mode","text":"With a single text as input, it returns the feature vectors of the text. You need to maintain a vector retrieval system. This is applicable to search or callback scenarios. HTTP request method: POST Request body parameters Name Type Required Description text String Yes Text data Example JSON request { \"text\": \"Test\" } Response parameters Name Type Description result List List with 768 parameters for a 768-dimensional text vector Example JSON response { \"result\": [ 0.025645000860095024, 0.001914000022225082, 0.007929000072181225, ... ] }","title":"Single text mode"},{"location":"deploy-text-similarity/#text-pair-mode","text":"With text pair as input, it returns the cosine similarity of two texts. This is applicable to similarity comparison. HTTP request method: POST Request body parameters Name Type Required Description text_1 String Text data. text_2 String Text data. Example JSON request { \"text_1\": \"Test1\", \"text_2\": \"Test2\" } Response parameters Name Type Description similarity Float Cosine similarity of the text pair, which is a Float value between 0 and 1. The closer it is to 1, the more similar the text pair is. Example JSON response { \"similarity\": 0.95421 }","title":"Text pair mode"},{"location":"deploy-text-similarity/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"deploy-text-similarity/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"deploy-text-similarity/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"Image URL address\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"deploy-text-similarity/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"Image URL address\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"Image URL address\" }'","title":"cURL"},{"location":"deploy-text-similarity/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'Image URL address' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"deploy-text-similarity/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"Image URL address\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"deploy-text-similarity/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"Image URL address\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"deploy-text-similarity/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"deploy-text-similarity/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"deploy-text-similarity/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"deploy-text-similarity/#uninstall-the-deployment","text":"You can uninstall the Text Similarity feature via Amazon CloudFormation as described in Add or remove AI features and make sure the TextSimilarity parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: 10 Minutes","title":"Uninstall the deployment"},{"location":"deployment/","text":"Before you launch the solution, review the architecture, supported regions, and other considerations discussed in this guide. Follow the step-by-step instructions in this section to configure and deploy the solution into your account. Deployment time Approximately 10 minutes for deploying an AI feature based on the Amazon Lambda architecture Approximately 20 minutes for deploying an AI feature based on the Amazon SageMaker architecture Prerequisite If you choose to launch the stack from AWS China Regions, make sure a domain registered by ICP is available. For more information, see ICP Recordal . Launch the stack Log in to the AWS Management Console and select the link to launch the AWS CloudFormation stack. Launch the stack in Global Regions Launch the stack in China Regions The template is launched in the default region after you log in to the console. To launch the solution in a different AWS Region, use the Region selector in the console navigation bar. On the Create Stack page, verify that the correct template URL is displayed in the Amazon S3 URL text box, and choose Next . On the Specify stack details page, assign a name to your solution stack. For information about naming character limitations, refer to IAM and STS Limits in the AWS Identity and Access Management User Guide . Under Parameters , modify the General Configuration and select the AI features to be deployed, and choose Next . You can choose whether to deploy API explorer, and the authentication method of the API gateway. Parameter Name Default Value Description APIExplorer yes Deploys the API Explorer to visualize and interact with API resources. See API Reference Guide for details. If you choose no , you can only view the API definitions in API explorer, but cannot perform online test. APIGatewayAuthorization NONE The authentication method of the API gateway. The default is NONE , which means no privilege authentication method. You can also choose to use the IAM permission to control access to the API. APIGatewayStageName prod The first path field in the API gateway (URI). For more information, see stageVariable . You can change the parameter for each AI feature to yes to deploy it. By default, it is no for each AI feature. Parameter ID Default Description GeneralOCR no Deploy General OCR (Simplified Chinese) GeneralOCRTraditional no Deploy General OCR (Traditional Chinese) CustomOCR no Deploy Custom OCR CarLicensePlate no Deploy Car License Plate FaceComparison no Deploy Face Comparison FaceDetection no Deploy Face Detection HumanAttributeRecognition no Deploy Human Attribute Recognition HumanImageSegmentation no Deploy Human Image Segmentation ImageSimilarity no Deploy Image Similarity ObjectRecognition no Deploy Object Recognition PornographyDetection no Deploy Pornography Detection ImageSuperResolution no Deploy Image Super Resolution TextSimilarity no Deploy Text Similarity On the Configure Stack Options page, choose Next . On the Review page, review and confirm the settings. Check the box acknowledging that the template creates AWS Identity and Access Management (IAM) resources. Choose Next . Choose Create Stack to deploy the stack. You can view the status of the stack in the Status column of the AWS CloudFormation console. You should receive a CREATE_COMPLETE status when the creation is complete. Follow-up actions After successful deployment, go to the Outputs tab in AWS CloudFormation's console to find the invoke URL based on Amazon API Gateway according to Parameter ID . Next, you can perform the following operations: Check API and test calling API. For more information, see API Reference Guide . Add or remove AI features. For more information, see Update CloudFormation stack .","title":"Launch CloudFormation stack"},{"location":"deployment/#prerequisite","text":"If you choose to launch the stack from AWS China Regions, make sure a domain registered by ICP is available. For more information, see ICP Recordal .","title":"Prerequisite"},{"location":"deployment/#launch-the-stack","text":"Log in to the AWS Management Console and select the link to launch the AWS CloudFormation stack. Launch the stack in Global Regions Launch the stack in China Regions The template is launched in the default region after you log in to the console. To launch the solution in a different AWS Region, use the Region selector in the console navigation bar. On the Create Stack page, verify that the correct template URL is displayed in the Amazon S3 URL text box, and choose Next . On the Specify stack details page, assign a name to your solution stack. For information about naming character limitations, refer to IAM and STS Limits in the AWS Identity and Access Management User Guide . Under Parameters , modify the General Configuration and select the AI features to be deployed, and choose Next . You can choose whether to deploy API explorer, and the authentication method of the API gateway. Parameter Name Default Value Description APIExplorer yes Deploys the API Explorer to visualize and interact with API resources. See API Reference Guide for details. If you choose no , you can only view the API definitions in API explorer, but cannot perform online test. APIGatewayAuthorization NONE The authentication method of the API gateway. The default is NONE , which means no privilege authentication method. You can also choose to use the IAM permission to control access to the API. APIGatewayStageName prod The first path field in the API gateway (URI). For more information, see stageVariable . You can change the parameter for each AI feature to yes to deploy it. By default, it is no for each AI feature. Parameter ID Default Description GeneralOCR no Deploy General OCR (Simplified Chinese) GeneralOCRTraditional no Deploy General OCR (Traditional Chinese) CustomOCR no Deploy Custom OCR CarLicensePlate no Deploy Car License Plate FaceComparison no Deploy Face Comparison FaceDetection no Deploy Face Detection HumanAttributeRecognition no Deploy Human Attribute Recognition HumanImageSegmentation no Deploy Human Image Segmentation ImageSimilarity no Deploy Image Similarity ObjectRecognition no Deploy Object Recognition PornographyDetection no Deploy Pornography Detection ImageSuperResolution no Deploy Image Super Resolution TextSimilarity no Deploy Text Similarity On the Configure Stack Options page, choose Next . On the Review page, review and confirm the settings. Check the box acknowledging that the template creates AWS Identity and Access Management (IAM) resources. Choose Next . Choose Create Stack to deploy the stack. You can view the status of the stack in the Status column of the AWS CloudFormation console. You should receive a CREATE_COMPLETE status when the creation is complete.","title":"Launch the stack"},{"location":"deployment/#follow-up-actions","text":"After successful deployment, go to the Outputs tab in AWS CloudFormation's console to find the invoke URL based on Amazon API Gateway according to Parameter ID . Next, you can perform the following operations: Check API and test calling API. For more information, see API Reference Guide . Add or remove AI features. For more information, see Update CloudFormation stack .","title":"Follow-up actions"},{"location":"faq/","text":"1. How to make ICP recordal when deploying the solution in AWS China Regions? This solution uses Amazon API Gateway to receive API call requests. If you want to provide API requests that can be accessed without authentication in the AWS China Regions, you need to apply for and ensure that your AWS account has been registered with the Internet Content Provider (ICP), and 80 /443 port can be enabled normally. For more information, refer to ICP Recordal . 2. When deploying the solution, I encountered The account-level service limit 'ml.g4dn.xlarge for endpoint usage' is 0 Instances . How to resolve it? This API needs to create a GPU instance based on Amazon SageMaker. If the corresponding instance limit in your AWS account is insufficient, the API feature will be deployed abnormally. You can click Support Center on the toolbar at the top of the AWS Management Console to create a support ticket to request an increase in the instance limit of the Amazon SageMaker service. For more information, see AWS service quotas . 3. When deploying the solution, I encountered Resource handler returned message: \"'MemorySize' value failed to satisfy constraint: Member must have value less than or equal to 3008 . How to resolve it? The default AWS Lambda memory is about 4GB (4096 MB). If the AWS Lambda function limit in your AWS account is lower than 4096 MB, the API feature will be deployed abnormally. You can click Support Center on the toolbar at the top of the AWS Management Console to create a support ticket and request to increase the memory limit of the AWS Lambda service. For more information, see AWS service quotas . 4. What AWS Identity and Access Management (IAM) permissions are required to deploy the solution? The following permissions are required to deploy the solution and invoke the API via API Gateway after deployment. sagemaker: is only applicable to the Image Super Resolution API. Actions apigateway:DELETE apigateway:GET apigateway:PATCH apigateway:POST apigateway:PUT cloudformation:CancelUpdateStack cloudformation:ContinueUpdateRollback cloudformation:CreateChangeSet cloudformation:CreateStack cloudformation:DeleteStack cloudformation:DescribeChangeSet cloudformation:DescribeStackEvents cloudformation:DescribeStackResources cloudformation:DescribeStackStacks cloudformation:GetStackPolicy cloudformation:GetTemplateSummary cloudformation:ListChangeSets cloudformation:ListStackResources cloudformation:ListStacks cloudformation:RollbackStack cloudformation:UpdateStack cloudformation:UpdateStackSet cloudformation:UpdateStackSet ecr:BatchDeleteImage ecr:BatchGetImage ecr:CreateRepository ecr:DeleteRepository ecr:DescribeRepositories ecr:GetDownloadUrlForLayer ecr:GetRepositoryPolicy ecr:InitiateLayerUpload ecr:PutImage ecr:SetRepositoryPolicy iam:AttachRolePolicy iam:CreateRole iam:DeleteRole iam:DeleteRolePolicy iam:DetachRolePolicy iam:GetRole iam:ListRoles iam:PassRole iam:PutRolePolicy lambda:AddPermission lambda:CreateFunction lambda:DeleteFunction lambda:GetFunction lambda:InvokeFunction lambda:RemovePermission lambda:UpdateFunctionConfiguration s3:GetObject sagemaker:CreateEndpoint sagemaker:CreateEndpointConfig sagemaker:CreateModel sagemaker:DeleteEndpoint sagemaker:DeleteEndpointConfig sagemaker:DeleteModel sagemaker:DescribeEndpoint sagemaker:DescribeEndpointConfig sagemaker:DescribeModel sagemaker:InvokeEndpoint sns:ListTopics 5. How to universally switch the way APIs are authenticated for access in Amazon API Gateway? With AWS CloudFormation, you can update the stack to change the properties of existing resources in your stack. Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. On the Stack details page, choose Update . Select Use current template , and choose Next . Update the parameter API Gateway Authorization , and choose Next . On the Configure stack options page, choose Next . On the Review page, review and confirm the settings. Check the box acknowledging that the template will create AWS Identity and Access Management (IAM) resources. Choose Next . Choose Update stack to update the stack. 6. How to individually switch the way APIs are authenticated for access in Amazon API Gateway? Follow the steps below: Access Amazon API Gateway console . Select the most recently created AI Solution Kit API in the API list, and open the API details page. You can sort by Created to facilitate the search. Expand the resource tree, find the OPTIONS node under the path of the resource you need to modify the access rights, and click it to display the method execution configuration page. Click the Method Request link under Method Execution. Choose the Edit button on the right side of the authorization, expand the drop-down list, and select Amazon IAM . Choose the Update button to complete the modification. After the update, the authorization item should be displayed as 'Amazon IAM'. 6. Choose the POST button under OPTIONS in the resource tree, and modify the method of OPTIONS, change the authorization method to Amazon IAM in the method request, and then choose the Update button. Choose the Actions drop-down button on the left side of the method execution, and click on the Deploy API option under API Actions. In the Deploy API dialog box, select prod or a custom name for the deployment phase (do not select [New Phase]), and then click the Deploy button below to complete the deployment. 7. How to create and use a usage plan with API key? This solution supports API Usage Plans. After deploying the solution and testing the APIs, you can implement API Gateway Usage Plans and offer them as a customer-facing product/service. You can configure usage plans and API keys to allow customers to access selected APIs at agreed request rates and quotas that meet their business needs and budget constraints. You can set default method level limits for APIs or set limits for individual API methods if desired. The API caller must provide an assigned API key in the x-api-key header of the API request. To configure an API usage plan , refer to Configure Usage Plan .","title":"FAQ"},{"location":"faq/#1-how-to-make-icp-recordal-when-deploying-the-solution-in-aws-china-regions","text":"This solution uses Amazon API Gateway to receive API call requests. If you want to provide API requests that can be accessed without authentication in the AWS China Regions, you need to apply for and ensure that your AWS account has been registered with the Internet Content Provider (ICP), and 80 /443 port can be enabled normally. For more information, refer to ICP Recordal .","title":"1. How to make ICP recordal when deploying the solution in AWS China Regions?"},{"location":"faq/#2-when-deploying-the-solution-i-encountered-the-account-level-service-limit-mlg4dnxlarge-for-endpoint-usage-is-0-instances-how-to-resolve-it","text":"This API needs to create a GPU instance based on Amazon SageMaker. If the corresponding instance limit in your AWS account is insufficient, the API feature will be deployed abnormally. You can click Support Center on the toolbar at the top of the AWS Management Console to create a support ticket to request an increase in the instance limit of the Amazon SageMaker service. For more information, see AWS service quotas .","title":"2. When deploying the solution, I encountered The account-level service limit 'ml.g4dn.xlarge for endpoint usage' is 0 Instances. How to resolve it?"},{"location":"faq/#3-when-deploying-the-solution-i-encountered-resource-handler-returned-message-memorysize-value-failed-to-satisfy-constraint-member-must-have-value-less-than-or-equal-to-3008-how-to-resolve-it","text":"The default AWS Lambda memory is about 4GB (4096 MB). If the AWS Lambda function limit in your AWS account is lower than 4096 MB, the API feature will be deployed abnormally. You can click Support Center on the toolbar at the top of the AWS Management Console to create a support ticket and request to increase the memory limit of the AWS Lambda service. For more information, see AWS service quotas .","title":"3. When deploying the solution, I encountered Resource handler returned message: \"'MemorySize' value failed to satisfy constraint: Member must have value less than or equal to 3008. How to resolve it?"},{"location":"faq/#4-what-aws-identity-and-access-management-iam-permissions-are-required-to-deploy-the-solution","text":"The following permissions are required to deploy the solution and invoke the API via API Gateway after deployment. sagemaker: is only applicable to the Image Super Resolution API. Actions apigateway:DELETE apigateway:GET apigateway:PATCH apigateway:POST apigateway:PUT cloudformation:CancelUpdateStack cloudformation:ContinueUpdateRollback cloudformation:CreateChangeSet cloudformation:CreateStack cloudformation:DeleteStack cloudformation:DescribeChangeSet cloudformation:DescribeStackEvents cloudformation:DescribeStackResources cloudformation:DescribeStackStacks cloudformation:GetStackPolicy cloudformation:GetTemplateSummary cloudformation:ListChangeSets cloudformation:ListStackResources cloudformation:ListStacks cloudformation:RollbackStack cloudformation:UpdateStack cloudformation:UpdateStackSet cloudformation:UpdateStackSet ecr:BatchDeleteImage ecr:BatchGetImage ecr:CreateRepository ecr:DeleteRepository ecr:DescribeRepositories ecr:GetDownloadUrlForLayer ecr:GetRepositoryPolicy ecr:InitiateLayerUpload ecr:PutImage ecr:SetRepositoryPolicy iam:AttachRolePolicy iam:CreateRole iam:DeleteRole iam:DeleteRolePolicy iam:DetachRolePolicy iam:GetRole iam:ListRoles iam:PassRole iam:PutRolePolicy lambda:AddPermission lambda:CreateFunction lambda:DeleteFunction lambda:GetFunction lambda:InvokeFunction lambda:RemovePermission lambda:UpdateFunctionConfiguration s3:GetObject sagemaker:CreateEndpoint sagemaker:CreateEndpointConfig sagemaker:CreateModel sagemaker:DeleteEndpoint sagemaker:DeleteEndpointConfig sagemaker:DeleteModel sagemaker:DescribeEndpoint sagemaker:DescribeEndpointConfig sagemaker:DescribeModel sagemaker:InvokeEndpoint sns:ListTopics","title":"4. What AWS Identity and Access Management (IAM) permissions are required to deploy the solution?"},{"location":"faq/#5-how-to-universally-switch-the-way-apis-are-authenticated-for-access-in-amazon-api-gateway","text":"With AWS CloudFormation, you can update the stack to change the properties of existing resources in your stack. Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. On the Stack details page, choose Update . Select Use current template , and choose Next . Update the parameter API Gateway Authorization , and choose Next . On the Configure stack options page, choose Next . On the Review page, review and confirm the settings. Check the box acknowledging that the template will create AWS Identity and Access Management (IAM) resources. Choose Next . Choose Update stack to update the stack.","title":"5. How to universally switch the way APIs are authenticated for access in Amazon API Gateway?"},{"location":"faq/#6-how-to-individually-switch-the-way-apis-are-authenticated-for-access-in-amazon-api-gateway","text":"Follow the steps below: Access Amazon API Gateway console . Select the most recently created AI Solution Kit API in the API list, and open the API details page. You can sort by Created to facilitate the search. Expand the resource tree, find the OPTIONS node under the path of the resource you need to modify the access rights, and click it to display the method execution configuration page. Click the Method Request link under Method Execution. Choose the Edit button on the right side of the authorization, expand the drop-down list, and select Amazon IAM . Choose the Update button to complete the modification. After the update, the authorization item should be displayed as 'Amazon IAM'. 6. Choose the POST button under OPTIONS in the resource tree, and modify the method of OPTIONS, change the authorization method to Amazon IAM in the method request, and then choose the Update button. Choose the Actions drop-down button on the left side of the method execution, and click on the Deploy API option under API Actions. In the Deploy API dialog box, select prod or a custom name for the deployment phase (do not select [New Phase]), and then click the Deploy button below to complete the deployment.","title":"6. How to individually switch the way APIs are authenticated for access in Amazon API Gateway?"},{"location":"faq/#7-how-to-create-and-use-a-usage-plan-with-api-key","text":"This solution supports API Usage Plans. After deploying the solution and testing the APIs, you can implement API Gateway Usage Plans and offer them as a customer-facing product/service. You can configure usage plans and API keys to allow customers to access selected APIs at agreed request rates and quotas that meet their business needs and budget constraints. You can set default method level limits for APIs or set limits for individual API methods if desired. The API caller must provide an assigned API key in the x-api-key header of the API request. To configure an API usage plan , refer to Configure Usage Plan .","title":"7. How to create and use a usage plan with API key?"},{"location":"include-call-url/","text":"Calling URL You have two options to call URL of AI features: When deploying the solution, set the parameter APIGatewayAuthorization to NONE to allow anonymous access to API. When deploying the solution, set the parameter APIGatewayAuthorization to AWS_IAM to use the IAM permission to control access to API. For more information, see Invoking a REST API in Amazon API Gateway .","title":"Include call url"},{"location":"include-call-url/#calling-url","text":"You have two options to call URL of AI features: When deploying the solution, set the parameter APIGatewayAuthorization to NONE to allow anonymous access to API. When deploying the solution, set the parameter APIGatewayAuthorization to AWS_IAM to use the IAM permission to control access to API. For more information, see Invoking a REST API in Amazon API Gateway .","title":"Calling URL"},{"location":"include-deploy-code/","text":"API test You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs. API Explorer Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses. Postman ( AWS_IAM Authentication\uff09 Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"{{ no such element: dict object['sample_image'] }}\" } cURL Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"{{ no such element: dict object['sample_image'] }}\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"{{ no such element: dict object['sample_image'] }}\" }' Python \uff08 AWS_IAM Authentication\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' payload = { 'url': '{{ no such element: dict object['sample_image'] }}' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE Authentication\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" payload = json.dumps({ \"url\": \"{{ no such element: dict object['sample_image'] }}\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"{{ no such element: dict object['sample_image'] }}\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Include deploy code"},{"location":"include-deploy-code/#api-test","text":"You can use the following tools (API explorer, Postman, cURL, Python, Java) to test calling APIs.","title":"API test"},{"location":"include-deploy-code/#api-explorer","text":"Prerequisites When deploying the solution , you need to\uff1a set the parameter API Explorer to yes . set the parameter API Gateway Authorization to NONE . Otherwise, you can only view the API definitions in the API explorer, but cannot test calling API online. Steps Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Do not select the NESTED stack. Choose the Outputs tab, and find the URL for APIExplorer. Click the URL to access the API explorer. The APIs that you have selected during deployment will be displayed. For the API you want to test, click the down arrow to display the request method. Choose the Try it out button, and enter the correct Body data to test API and check the test result. Make sure the format is correct, and choose Execute . Check the returned result in JSON format in the Responses body . If needed, copy or download the result. Check the Response headers . (Optional) Choose Clear next to the Execute button to clear the request body and responses.","title":"API Explorer"},{"location":"include-deploy-code/#postman-aws_iam-authentication","text":"Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the URL with the prefix GeneralOCR . Create a new tab in Postman. Paste the URL into the address bar, and select POST as the HTTP call method. Open the Authorization configuration, select Amazon Web Service Signature from the drop-down list, and enter the AccessKey, SecretKey and Amazon Web Service Region of the corresponding account (such as cn-north-1 or cn-northwest-1 ). Open the Body configuration item and select the raw and JSON data types. Enter the test data in the Body, and click the Send button to see the corresponding return results. { \"url\": \"{{ no such element: dict object['sample_image'] }}\" }","title":"Postman (AWS_IAM Authentication\uff09"},{"location":"include-deploy-code/#curl","text":"Windows curl --location --request POST \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" ^ --header \"Content-Type: application/json\" ^ --data-raw \"{\\\"url\\\": \\\"{{ no such element: dict object['sample_image'] }}\\\"}\" Linux/MacOS curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"{{ no such element: dict object['sample_image'] }}\" }'","title":"cURL"},{"location":"include-deploy-code/#python-aws_iam-authentication","text":"import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' payload = { 'url': '{{ no such element: dict object['sample_image'] }}' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text))","title":"Python \uff08AWS_IAM Authentication\uff09"},{"location":"include-deploy-code/#python-none-authentication","text":"import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" payload = json.dumps({ \"url\": \"{{ no such element: dict object['sample_image'] }}\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text)","title":"Python \uff08NONE Authentication\uff09"},{"location":"include-deploy-code/#java","text":"OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"{{ no such element: dict object['sample_image'] }}\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"Java"},{"location":"include-deploy-cost/","text":"Cost Estimation You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution. Cost estimation example 1 In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83 Cost estimation example 2 In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Include deploy cost"},{"location":"include-deploy-cost/#cost-estimation","text":"You are responsible for the cost of using each Amazon Web Services service when running the solution. As of June 2022, the main cost factors affecting the solution include. AWS Lambda invocations AWS Lambda running time Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs storage Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance type Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Note The cost incurred by Amazon SageMaker is only applicable to Image Super Resolution.","title":"Cost Estimation"},{"location":"include-deploy-cost/#cost-estimation-example-1","text":"In AWS China (Ningxia) Region operated by NWCD (cn-northwest-1), process an image of 1MB in 4 seconds The cost of using this solution to process the image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations \u00a51.36 AWS Lambda 4096MB memory, 4 seconds run each time \u00a51815.6 Amazon API Gateway 1 million invocations \u00a528.94 Amazon API Gateway 100KB data output each time, \u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs 10KB each time, \u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB storage, \u00a50.69/GB each month \u00a50.35 Total \u00a52001.83","title":"Cost estimation example 1"},{"location":"include-deploy-cost/#cost-estimation-example-2","text":"In US East (Ohio) Region (us-east-2), process an image of 1MB in 4 seconds The cost of using this solution to process this image is shown below: Service Dimensions Cost AWS Lambda 1 million invocations $0.20 AWS Lambda 4096MB memory, 4 seconds run each time $266.8 Amazon API Gateway 1 million invocations $3.5 Amazon API Gateway 100KB data output each time, $0.09/GB $9 Amazon CloudWatch Logs 10KB each time, $0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c$0.1/GB each month $0.05 Total $284.55","title":"Cost estimation example 2"},{"location":"include-deploy-description/","text":"{{ no such element: dict object['feature_description'] }} Applicable scenarios {{ no such element: dict object['feature_scenario'] }}","title":"Include deploy description"},{"location":"include-deploy-description/#applicable-scenarios","text":"{{ no such element: dict object['feature_scenario'] }}","title":"Applicable scenarios"},{"location":"include-deploy-uninstall/","text":"Uninstall the deployment You can uninstall the {{ no such element: dict object['feature_name'] }} feature via Amazon CloudFormation as described in Add or remove AI features and make sure the {{ no such element: dict object['feature_id'] }} parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: {{ no such element: dict object['destroy_time'] }}","title":"Include deploy uninstall"},{"location":"include-deploy-uninstall/#uninstall-the-deployment","text":"You can uninstall the {{ no such element: dict object['feature_name'] }} feature via Amazon CloudFormation as described in Add or remove AI features and make sure the {{ no such element: dict object['feature_id'] }} parameter is set to no in the parameters section. Note Time to uninstall the deployment is approximately: {{ no such element: dict object['destroy_time'] }}","title":"Uninstall the deployment"},{"location":"regions/","text":"Regional Deployment This solution uses services which may not be currently available in all AWS Regions. Launch this solution in an AWS Region where required services are available. For the most current availability by Region, refer to the AWS Regional Services List. Supported regions for deployment in AWS Global Regions Region Name Region ID US East (N. Virginia) Region us-east-1 US East (Ohio) Region us-east-2 US West (N. California) Region us-west-1 US West (Oregon) Region us-west-2 Asia Pacific (Mumbai) Region ap-south-1 Asia Pacific (Tokyo) Region ap-northeast-1 Asia Pacific (Seoul) Region ap-northeast-2 Asia Pacific (Singapore) Region ap-southeast-1 Asia Pacific (Sydney) Region ap-southeast-2 Canada (Central) Region ca-central-1 Europe (Ireland) Region eu-west-1 Europe (London) Region eu-west-2 Europe (Paris) Region eu-west-3 Europe (Frankfurt) Region eu-central-1 South America (Sao Paulo) Region sa-east-1 Supported regions for deployment in AWS China Regions Region Name Region ID AWS China (Beijing) Region operated by Sinnet cn-north-1 AWS China (Ningxia) Region operated by NWCD cn-northwest-1","title":"Design considerations"},{"location":"regions/#regional-deployment","text":"This solution uses services which may not be currently available in all AWS Regions. Launch this solution in an AWS Region where required services are available. For the most current availability by Region, refer to the AWS Regional Services List.","title":"Regional Deployment"},{"location":"regions/#supported-regions-for-deployment-in-aws-global-regions","text":"Region Name Region ID US East (N. Virginia) Region us-east-1 US East (Ohio) Region us-east-2 US West (N. California) Region us-west-1 US West (Oregon) Region us-west-2 Asia Pacific (Mumbai) Region ap-south-1 Asia Pacific (Tokyo) Region ap-northeast-1 Asia Pacific (Seoul) Region ap-northeast-2 Asia Pacific (Singapore) Region ap-southeast-1 Asia Pacific (Sydney) Region ap-southeast-2 Canada (Central) Region ca-central-1 Europe (Ireland) Region eu-west-1 Europe (London) Region eu-west-2 Europe (Paris) Region eu-west-3 Europe (Frankfurt) Region eu-central-1 South America (Sao Paulo) Region sa-east-1","title":"Supported regions for deployment in AWS Global Regions"},{"location":"regions/#supported-regions-for-deployment-in-aws-china-regions","text":"Region Name Region ID AWS China (Beijing) Region operated by Sinnet cn-north-1 AWS China (Ningxia) Region operated by NWCD cn-northwest-1","title":"Supported regions for deployment in AWS China Regions"},{"location":"revisions/","text":"Date Description September 2021 Release 1.0.0 Support the following AI features: General OCR Image Super Resolution Pornography Detection Human Image Segmentation June 2022 Release 1.2.0 Updated the following AI features: Optimized General OCR General OCR (Traditional Chinese) Custom OCR Image Similarity Object Recognition Face Detection Face Comparison Human Attribute Recognition Car License Plate Text Similarity Updated the solution architecture: Support OpenAPI specification and integrate API Explorer AI model containerization Upgrade CDK to 2.20.0 Support CloudFormation deployment","title":"Release Notes"},{"location":"security/","text":"Security Information When you build solutions on Amazon Web Services, security responsibilities are shared between you and Amazon Cloud. This Shared Responsibility Model reduces your operational burden due to the Amazon Web Services operations, management, and control components, including host operations The physical security of the system, the virtualization layer, and the facility where the service runs. For more information on Amazon Web Services, visit Amazon Web Services Cloud Security . IAM roles AWS Identity and Access Management (IAM) roles allow customers to assign fine-grained access policies and permissions to services and users on AWS. This solution creates IAM roles that grant access between components of the solution.","title":"Security"},{"location":"security/#security-information","text":"When you build solutions on Amazon Web Services, security responsibilities are shared between you and Amazon Cloud. This Shared Responsibility Model reduces your operational burden due to the Amazon Web Services operations, management, and control components, including host operations The physical security of the system, the virtualization layer, and the facility where the service runs. For more information on Amazon Web Services, visit Amazon Web Services Cloud Security .","title":"Security Information"},{"location":"security/#iam-roles","text":"AWS Identity and Access Management (IAM) roles allow customers to assign fine-grained access policies and permissions to services and users on AWS. This solution creates IAM roles that grant access between components of the solution.","title":"IAM roles"},{"location":"source/","text":"Visit our GitHub repository to download the source code of this solution. The template of the AI Solution Kit is generated by AWS CloudFormation . For more information, refer to the README.md file.","title":"Source code"},{"location":"template/","text":"Before deploying the solution, you can download the following AWS CloudFormation template used by the solution. For more information, see CloudFormation concepts . AI-Solution-Kit.template : You can use this template to launch the solution and related services. You can also customize the template according to your needs.","title":"CloudFormation template"},{"location":"uninstall/","text":"To uninstall AI Solution Kit, you must delete the AWS CloudFormation stack. You can use either the AWS Management Console or the AWS Command Line Interface (CLI) to delete the CloudFormation stack. Using the AWS Management Console Sign in to the AWS CloudFormation console. Select this solution\u2019s installation stack. Choose Delete . Using AWS Command Line Interface Determine whether the AWS CLI is available in your environment. For installation instructions, see What Is the AWS Command Line Interface in the AWS CLI User Guide . After confirming that the AWS CLI is available, run the following command. $ aws cloudformation delete-stack --stack-name <installation-stack-name>","title":"Uninstall the solution"},{"location":"uninstall/#using-the-aws-management-console","text":"Sign in to the AWS CloudFormation console. Select this solution\u2019s installation stack. Choose Delete .","title":"Using the AWS Management Console"},{"location":"uninstall/#using-aws-command-line-interface","text":"Determine whether the AWS CLI is available in your environment. For installation instructions, see What Is the AWS Command Line Interface in the AWS CLI User Guide . After confirming that the AWS CLI is available, run the following command. $ aws cloudformation delete-stack --stack-name <installation-stack-name>","title":"Using AWS Command Line Interface"},{"location":"upgrade/","text":"Upgrade scenario 1 When you have deployed and are using some of the API features from release 1.0.0, you can continue to use the original APIs that have been deployed in your AWS account while deploying the features provided in the new APIs available in release 1.2.0. The interface definition parameters of the four APIs (General OCR, Image Super Resolution, Human Image Segmentation, Pornography Detection) in the release 1.0.0 are identical to the same four features in release 1.2.0, and you only need to replace the original URLs to use them. Upgrade scenario 2 If you want to switch the original API invoke URL to the new version, you can perform the following operations after deploying the new version: Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the invoke URL. Replace the old invoke URL in the code. After the replacement, you can completely remove the original stack in the AWS CloudFormation console to avoid incurring extra cost, which takes about 10 minutes.","title":"Upgrade the solution"},{"location":"upgrade/#upgrade-scenario-1","text":"When you have deployed and are using some of the API features from release 1.0.0, you can continue to use the original APIs that have been deployed in your AWS account while deploying the features provided in the new APIs available in release 1.2.0. The interface definition parameters of the four APIs (General OCR, Image Super Resolution, Human Image Segmentation, Pornography Detection) in the release 1.0.0 are identical to the same four features in release 1.2.0, and you only need to replace the original URLs to use them.","title":"Upgrade scenario 1"},{"location":"upgrade/#upgrade-scenario-2","text":"If you want to switch the original API invoke URL to the new version, you can perform the following operations after deploying the new version: Sign in to the AWS CloudFormation console . On the Stacks page, select the solution\u2019s root stack. Choose the Outputs tab, and find the invoke URL. Replace the old invoke URL in the code. After the replacement, you can completely remove the original stack in the AWS CloudFormation console to avoid incurring extra cost, which takes about 10 minutes.","title":"Upgrade scenario 2"}]}