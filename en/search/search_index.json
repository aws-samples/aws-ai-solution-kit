{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AI Solution Kit provides solutions of various use cases, allowing you to use out-of-box AI solutions, such as text recognition (OCR) solution, image super resolution solution, pornography detection solution, human segmentation solution. Benefits Best practices for multiple scenarios You can find the code implementation of most common AI use cases. All solutions and applications included are vetted by Amazon Web Services. Out-of-box AI features The solutions automatically create RESTful APIs through Amazon API Gateway. After deploying the solution, you can send HTTP POST requests to use the AI functions. The deployment guides provides all API test methods (e.g. Postman) and offers sample codes. Open Source and Customization All the solutions are open sourced. You can use the solutions and applications for free. If you have different use cases, you can take the source code as reference to make your own implementation. APIs Optical Character Recognition(OCR) APIs API Name Description General OCR (Simplified Chinese) Recognize and extract Simplified Chinese, numbers, alphabetical characters and symbols Get started General OCR (Traditional Chinese) Recognize and extract Traditional Chinese, numbers, alphabetical characters and symbols Get started Custom OCR Recognize and extract estructured text by predefined OCR templates Get started Car License Plate Recognize text on Chinese car license plate Get started Facial & Body APIs API Name Description Face Comparison Compare two faces of same person and return a confidence score of the similarity Get started Face Detection Detect the face in a image and return coordinate information of the face Get started Human Attribute Recognition Recognize the attributes of the human body in the image Get started Human Image Segmentation Segment human bodies from background and return the alpha channel Get started Image Understanding APIs API Name Description Image Similarity Compare two images and return similarity score Get started Object Recognition Segment human bodies from background and return the alpha channel Get started Pornography Detection Detect pornographic image in three dimensions (normal, sexy, porn) and return confidence scores Get started Computer Vision Production APIs API Name Description Image Super Resolution Upscale the resolution and enhance details in the images Get started Natural Language Understanding(NLU) APIs API Name Description Text Similarity Compare two Chinese words or sentences and return similarity score Get started","title":"Welcome"},{"location":"#benefits","text":"Best practices for multiple scenarios You can find the code implementation of most common AI use cases. All solutions and applications included are vetted by Amazon Web Services. Out-of-box AI features The solutions automatically create RESTful APIs through Amazon API Gateway. After deploying the solution, you can send HTTP POST requests to use the AI functions. The deployment guides provides all API test methods (e.g. Postman) and offers sample codes. Open Source and Customization All the solutions are open sourced. You can use the solutions and applications for free. If you have different use cases, you can take the source code as reference to make your own implementation.","title":"Benefits"},{"location":"#apis","text":"","title":"APIs"},{"location":"#optical-character-recognitionocr-apis","text":"API Name Description General OCR (Simplified Chinese) Recognize and extract Simplified Chinese, numbers, alphabetical characters and symbols Get started General OCR (Traditional Chinese) Recognize and extract Traditional Chinese, numbers, alphabetical characters and symbols Get started Custom OCR Recognize and extract estructured text by predefined OCR templates Get started Car License Plate Recognize text on Chinese car license plate Get started","title":"Optical Character Recognition(OCR) APIs"},{"location":"#facial-body-apis","text":"API Name Description Face Comparison Compare two faces of same person and return a confidence score of the similarity Get started Face Detection Detect the face in a image and return coordinate information of the face Get started Human Attribute Recognition Recognize the attributes of the human body in the image Get started Human Image Segmentation Segment human bodies from background and return the alpha channel Get started","title":"Facial &amp; Body APIs"},{"location":"#image-understanding-apis","text":"API Name Description Image Similarity Compare two images and return similarity score Get started Object Recognition Segment human bodies from background and return the alpha channel Get started Pornography Detection Detect pornographic image in three dimensions (normal, sexy, porn) and return confidence scores Get started","title":"Image Understanding APIs"},{"location":"#computer-vision-production-apis","text":"API Name Description Image Super Resolution Upscale the resolution and enhance details in the images Get started","title":"Computer Vision Production APIs"},{"location":"#natural-language-understandingnlu-apis","text":"API Name Description Text Similarity Compare two Chinese words or sentences and return similarity score Get started","title":"Natural Language Understanding(NLU) APIs"},{"location":"additional-resources/","text":"AWS Lambda Amazon SageMaker Amazon API Gateway Amazon ECR Amazon EFS AWS IAM Amazon EC2 AWS CloudFormation Amazon S3","title":"Additional resources"},{"location":"api-explorer/","text":"The API Resource Browser provides a display framework that offers an interactive documentation site based on Swagger UI to facilitate the reading of AI application interface specification documents defined based on the OpenAPI specification and to support integration testing. The following is an example of how to view and test API calls using the API Resource Browser . When you deploy a solution via Amazon CloudFormation (deployment.md#amazon-cloudformation) and set the parameter APIExplorer to yes , you can see the API calls in Amazon CloudFormation's Outputs tab, click on the URL to access the Swagger UI based API resource browser. If the user does not activate (active) the API in the interaction document when deploying the solution, only the reference definition of the API can be seen in the API Explorer, and online testing is not available. APIs have been classified by functional type into Optical Character Recognition (OCR), Facial & Body (face and body recognition), Image Understanding, Computer Vision Production, Natural After expanding the corresponding types, you can view the request method and pattern definition of the API. results. This test feature is currently only available when the API Gateway authentication method is NONE. Here is an example of how to test the API using the General Text Recognition API. Expand the /general-ocr-standard path in the Optical Character Recognition(OCR) tab to see the request method of the general-ocr-standard API standard model. Click Try it out and enter the sample data for testing in the blank field under Request body , e.g. { \"url\": \"https://images-cn.ssl-images-amazon.cn/images/G/28/AGS/LIANG/Deals/2020/Dealpage_KV/1500300.jpg\" } After confirming that the format is correct, click the blue Execute below, and you can see the text-aware JSON results returned at Responses body after running, and you can save the processing results by copying or downloading the button link on the right. In Response headers you can see the details of the response headers. Click the blue Execute button to the right of Clear to clear the Request body and Responses test results.","title":"API Explorer"},{"location":"architecture/","text":"Architecture overview A user or program sends an API request to Amazon API Gateway, and the request payload needs to contain the processed image or text information. After receiving the HTTP request, Amazon API Gateway sends the request data to the corresponding Amazon Lambda function or Amazon SageMaker Endpoint, thereby Implement the inference process and return the inference result (JSON format data). This solution architecture includes two types of AI function implementations (the Amazon SageMaker architecture in version 1.2.0 is only applicable to Image Super Resolution API) Based on Amazon Lambda architecture Amazon API Gateway directly sends the received user request to the Lambda function, and the Lambda function returns the result to the calling end. Based on Amazon SageMaker architecture First, API Gateway sends the user request to the Lambda (invoke endpoint) function, invokes the SageMaker Endpoint through Lambda, executes the inference process in SageMaker and returns the inference result.","title":"Architecture overview"},{"location":"architecture/#architecture-overview","text":"A user or program sends an API request to Amazon API Gateway, and the request payload needs to contain the processed image or text information. After receiving the HTTP request, Amazon API Gateway sends the request data to the corresponding Amazon Lambda function or Amazon SageMaker Endpoint, thereby Implement the inference process and return the inference result (JSON format data). This solution architecture includes two types of AI function implementations (the Amazon SageMaker architecture in version 1.2.0 is only applicable to Image Super Resolution API)","title":"Architecture overview"},{"location":"architecture/#based-on-amazon-lambda-architecture","text":"Amazon API Gateway directly sends the received user request to the Lambda function, and the Lambda function returns the result to the calling end.","title":"Based on Amazon Lambda architecture"},{"location":"architecture/#based-on-amazon-sagemaker-architecture","text":"First, API Gateway sends the user request to the Lambda (invoke endpoint) function, invokes the SageMaker Endpoint through Lambda, executes the inference process in SageMaker and returns the inference result.","title":"Based on Amazon SageMaker architecture"},{"location":"cost/","text":"You are responsible for the cost of using Amazon Web Service's services used while running this solution. As of April 2022, the cost of the solution varies depending on: Amazon Lambda invocation Amazon Lambda running Amazon API Gateway calls Amazon API Gateway data output Amazon CloudWatch Logs Amazon Elastic Container Registry storage Amazon SageMaker endpoint instance Amazon SageMaker endpoint data input Amazon SageMaker endpoint data output Info Amazon SageMaker related fees are limited to Image Super Resolution API Please refer to the cost estimation chapter corresponding to the API to understand the deployment and actual usage costs of each API application. API Cost General OCR (Simplified Chinese) Link General OCR (Traditional Chinese) Link Custom OCR Link Car License Plate Link Face Detection Link Face Comparison Link Human Attribute Recognition Link Human Image Segmentation Link Image Similarity Link Object Recognition Link Pornography Detection Link Image Super Resolution Link Text Similarity Link","title":"Cost"},{"location":"deploy-car-license-plate/","text":"\u8bc6\u522b\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u5883\u5185\u5e38\u89c1\u673a\u52a8\u8f66\u53f7\u724c\uff0c\u63d0\u53d6\u673a\u52a8\u8f66\u53f7\u724c\u4fe1\u606f\u4e2d\u7684\u5730\u533a\u7f16\u53f7\u548c\u8f66\u724c\u53f7\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u505c\u8f66\u573a\u3001\u5c0f\u533a\u81ea\u52a8\u8bc6\u522b\u8f66\u8f86\u53f7\u724c\u4fe1\u606f\uff0c\u6216\u8f66\u8f86\u8fdd\u7ae0\u4fe1\u606f\u68c0\u6d4b\u7b49\u573a\u666f\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CarLicensePlate \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/car_license_plate\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Car License Plate"},{"location":"deploy-car-license-plate/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u505c\u8f66\u573a\u3001\u5c0f\u533a\u81ea\u52a8\u8bc6\u522b\u8f66\u8f86\u53f7\u724c\u4fe1\u606f\uff0c\u6216\u8f66\u8f86\u8fdd\u7ae0\u4fe1\u606f\u68c0\u6d4b\u7b49\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-car-license-plate/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-car-license-plate/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-car-license-plate/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CarLicensePlate \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-car-license-plate/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-car-license-plate/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-car-license-plate/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-car-license-plate/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/car_license_plate\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-car-license-plate/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-car-license-plate/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-custom-ocr/","text":"\u7528\u6237\u53ef\u81ea\u5b9a\u4e49OCR\u6a21\u7248\uff0c\u63d0\u53d6\u5361\u8bc1\u7968\u636e\u4e2d\u7ed3\u6784\u5316\u6587\u5b57\u4fe1\u606f\uff0c\u7ed3\u679c\u5c06\u4ee5\u952e\u503c\u5bf9\u5e94\u5173\u7cfb\u7684\u5f62\u5f0f\u5c55\u73b0\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u5361\u8bc1\u7968\u636e\u7c7b\u56fe\u7247\u7684\u7ed3\u6784\u5316\u8bc6\u522b\u573a\u666f\uff0c\u5982\u7269\u6d41\u5355\u636e\u3001\u53d1\u7968\u3001\u8425\u4e1a\u6267\u7167\u3001\u884c\u7a0b\u5355\u3001\u706b\u8f66\u7968\u7b49\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CustomOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Custom OCR"},{"location":"deploy-custom-ocr/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u5361\u8bc1\u7968\u636e\u7c7b\u56fe\u7247\u7684\u7ed3\u6784\u5316\u8bc6\u522b\u573a\u666f\uff0c\u5982\u7269\u6d41\u5355\u636e\u3001\u53d1\u7968\u3001\u8425\u4e1a\u6267\u7167\u3001\u884c\u7a0b\u5355\u3001\u706b\u8f66\u7968\u7b49\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-custom-ocr/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-custom-ocr/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-custom-ocr/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b CustomOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-custom-ocr/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-custom-ocr/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-custom-ocr/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-custom-ocr/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-custom-ocr/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-custom-ocr/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-face-comparison/","text":"\u901a\u8fc7\u4e24\u5f20\u4eba\u8138\u56fe\u7247\u4e2d\u7684\u7279\u5f81\u5411\u91cf\u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb(Euclidean Distance)\uff0c\u5e76\u8f6c\u5316\u4e3a\u7f6e\u4fe1\u5ea6\uff0c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6bd4\u8f83\u4e24\u5f20\u4eba\u8138\uff0c\u4ece\u800c\u786e\u5b9a\u5b83\u4eec\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u3001\u7167\u7247\u5206\u7c7b\u7b49\u573a\u666f\uff0c\u5982\uff1a\u81ea\u52a9\u9152\u5e97\u5165\u4f4f\u3001\u4eba\u5458\u62a5\u5230\u3001\u6821\u56ed\u5165\u53e3\u901a\u884c\u3001\u76f8\u518c\u5236\u4f5c\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b FaceComparison \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_comparison\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Face Comparison"},{"location":"deploy-face-comparison/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u3001\u7167\u7247\u5206\u7c7b\u7b49\u573a\u666f\uff0c\u5982\uff1a\u81ea\u52a9\u9152\u5e97\u5165\u4f4f\u3001\u4eba\u5458\u62a5\u5230\u3001\u6821\u56ed\u5165\u53e3\u901a\u884c\u3001\u76f8\u518c\u5236\u4f5c\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-face-comparison/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-face-comparison/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-face-comparison/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b FaceComparison \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-face-comparison/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-face-comparison/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-face-comparison/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-face-comparison/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_comparison\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-face-comparison/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-face-comparison/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-face-detection/","text":"\u8bc6\u522b\u4eba\u8138\u9762\u90e8\u7279\u5f81\uff0c\u5c06\u68c0\u6d4b\u5230\u7684\u4e94\u5b98\u4e0e\u8f6e\u5ed3\u5173\u952e\u70b9\u4fe1\u606f\u6620\u5c04\u523064\u4e2a\u77e2\u91cf\u5750\u6807\u4e0a\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u6444\u50cf\u5934\u76d1\u63a7\u3001\u4eba\u8138\u7279\u5f81\u5206\u6790\u3001\u4e92\u52a8\u8425\u9500\u7b49\u591a\u79cd\u573a\u666f\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b FaceDetection \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Face Detection"},{"location":"deploy-face-detection/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u6444\u50cf\u5934\u76d1\u63a7\u3001\u4eba\u8138\u7279\u5f81\u5206\u6790\u3001\u4e92\u52a8\u8425\u9500\u7b49\u591a\u79cd\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-face-detection/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-face-detection/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-face-detection/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b FaceDetection \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-face-detection/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-face-detection/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-face-detection/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-face-detection/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-face-detection/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-face-detection/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-general-ocr-traditional/","text":"\u9002\u7528\u4e8e\u901a\u7528\u573a\u666f\u6587\u5b57\u63d0\u53d6\uff0c\u901a\u8fc7\u8fd4\u56de\u5728\u56fe\u7247\u4e2d\u6587\u5b57\u5185\u5bb9\u4e0e\u5750\u6807\u4f4d\u7f6e\u7b49\u4fe1\u606f\uff0c\u4fbf\u4e8e\u7528\u6237\u8fdb\u884c\u6bd4\u5bf9\u6216\u7ed3\u6784\u5316\u64cd\u4f5c\u3002\u652f\u6301\u8bc6\u522b \u7e41\u4f53\u4e2d\u6587 \u3001\u82f1\u6587\u3001\u6570\u5b57\u548c\u5e38\u7528\u7b26\u53f7\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b GeneralOCRTraditional \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr_traditional\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"General OCR (Traditional Chinese)"},{"location":"deploy-general-ocr-traditional/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-general-ocr-traditional/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-general-ocr-traditional/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-general-ocr-traditional/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b GeneralOCRTraditional \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-general-ocr-traditional/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-general-ocr-traditional/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-general-ocr-traditional/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-general-ocr-traditional/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr_traditional\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-general-ocr-traditional/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-general-ocr-traditional/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-general-ocr/","text":"\u9002\u7528\u4e8e\u901a\u7528\u573a\u666f\u6587\u5b57\u63d0\u53d6\uff0c\u901a\u8fc7\u8fd4\u56de\u5728\u56fe\u7247\u4e2d\u6587\u5b57\u5185\u5bb9\u4e0e\u5750\u6807\u4f4d\u7f6e\u7b49\u4fe1\u606f\uff0c\u4fbf\u4e8e\u7528\u6237\u8fdb\u884c\u6bd4\u5bf9\u6216\u7ed3\u6784\u5316\u64cd\u4f5c\u3002\u652f\u6301\u8bc6\u522b \u7b80\u4f53\u4e2d\u6587 \u3001\u82f1\u6587\u3001\u6570\u5b57\u548c\u5e38\u7528\u7b26\u53f7\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 \u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c AI Solution Kit \u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e745\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a Amazon Lambda\u8c03\u7528 Amazon Lambda\u8fd0\u884c Amazon API Gateway\u8c03\u7528 Amazon API Gateway\u6570\u636e\u8f93\u51fa Amazon CloudWatch Logs Amazon Elastic Container Registry\u5b58\u50a8 \u4ee5\u56fe\u50cf\u5927\u5c0f1MB\uff0c\u5904\u7406\u65f6\u95f41\u79d2\u8fdb\u884c\u4f30\u7b97 \u5b81\u590f \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 \u00a51.36 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 \u00a5453.9 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 \u00a528.94 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b2110KB\u8ba1\u7b97,\u00a50.933/GB \u00a59.33 Amazon CloudWatch Logs \u6bcf\u6b2110KB,\u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry\u5b58\u50a8 0.5GB,\u6bcf\u6708\u6bcfGB\u00a50.69 \u00a50.35 \u5408\u8ba1 \u00a5556.16 \u200b \u7f8e\u56fd\u4e1c\u90e8(\u4fc4\u4ea5\u4fc4) \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 $0.20 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 $66.7 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 $3.5 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b2110KB\u8ba1\u7b97,$0.09/GB $0.9 Amazon CloudWatch Logs \u6bcf\u6b2110KB,$0.50/GB $5 Amazon Elastic Container Registry\u5b58\u50a8 0.5GB,\u6bcf\u6708\u6bcfGB$0.1 $0.05 \u5408\u8ba1 $76.35 \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b GeneralOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"General OCR"},{"location":"deploy-general-ocr/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-general-ocr/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-general-ocr/#_3","text":"\u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c AI Solution Kit \u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e745\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a Amazon Lambda\u8c03\u7528 Amazon Lambda\u8fd0\u884c Amazon API Gateway\u8c03\u7528 Amazon API Gateway\u6570\u636e\u8f93\u51fa Amazon CloudWatch Logs Amazon Elastic Container Registry\u5b58\u50a8 \u4ee5\u56fe\u50cf\u5927\u5c0f1MB\uff0c\u5904\u7406\u65f6\u95f41\u79d2\u8fdb\u884c\u4f30\u7b97","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-general-ocr/#_4","text":"\u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 \u00a51.36 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 \u00a5453.9 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 \u00a528.94 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b2110KB\u8ba1\u7b97,\u00a50.933/GB \u00a59.33 Amazon CloudWatch Logs \u6bcf\u6b2110KB,\u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry\u5b58\u50a8 0.5GB,\u6bcf\u6708\u6bcfGB\u00a50.69 \u00a50.35 \u5408\u8ba1 \u00a5556.16 \u200b","title":"\u5b81\u590f"},{"location":"deploy-general-ocr/#_5","text":"\u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 $0.20 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 $66.7 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 $3.5 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b2110KB\u8ba1\u7b97,$0.09/GB $0.9 Amazon CloudWatch Logs \u6bcf\u6b2110KB,$0.50/GB $5 Amazon Elastic Container Registry\u5b58\u50a8 0.5GB,\u6bcf\u6708\u6bcfGB$0.1 $0.05 \u5408\u8ba1 $76.35","title":"\u7f8e\u56fd\u4e1c\u90e8(\u4fc4\u4ea5\u4fc4)"},{"location":"deploy-general-ocr/#_6","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b GeneralOCR \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-general-ocr/#_7","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-general-ocr/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-general-ocr/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-general-ocr/#_8","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-general-ocr/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-general-ocr/#_9","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-human-attribute-recognition/","text":"\u8bc6\u522b\u8f93\u5165\u56fe\u7247\u4e2d\u7684\u4eba\u4f53\u533a\u57df\uff0c\u5e76\u8fd4\u56de\u6bcf\u4e2a\u533a\u57df\u4eba\u4f53\u4f4d\u7f6e\u5750\u6807\u53ca\u5c5e\u6027\u5206\u6790\uff0c\u5982\u6027\u522b\u3001\u5e74\u9f84\u3001\u670d\u9970\u7b4916\u79cd\u5c5e\u6027\u7684\u8bed\u4e49\u4fe1\u606f\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u667a\u6167\u5b89\u9632\u3001\u667a\u6167\u96f6\u552e\u3001\u884c\u4eba\u641c\u7d22\u7b49\u573a\u666f\u3002 \u5c5e\u6027\u8bf4\u660e \u540d\u79f0 \u8bed\u4e49\u503c \u4e0a\u8eab\u670d\u9970 \u77ed\u8896\u3001\u957f\u8896 \u4e0b\u8eab\u670d\u9970 \u77ed\u88e4/\u88d9\u3001\u957f\u88e4/\u88d9 \u4e0a\u8eab\u670d\u9970\u7eb9\u7406 \u56fe\u6848\u3001\u7eaf\u8272\u3001\u683c\u5b50/\u6761\u7eb9 \u80cc\u5305 \u65e0\u5305\u3001\u6709\u5305 \u662f\u5426\u6234\u773c\u955c \u65e0\u3001\u6709 \u662f\u5426\u6234\u5e3d\u5b50 \u65e0\u3001\u6709 \u4eba\u4f53\u671d\u5411 \u6b63\u9762\u3001\u80cc\u9762\u3001\u5de6\u9762\u3001\u53f3\u9762 \u4e0a\u65b9\u622a\u65ad \u65e0\u3001\u6709 \u4e0b\u65b9\u622a\u65ad \u65e0\u3001\u6709 \u906e\u6321\u60c5\u51b5 \u65e0\u3001\u8f7b\u3001\u91cd \u662f\u5426\u6234\u53e3\u7f69 \u65e0\u3001\u6709 \u6027\u522b \u7537\u3001\u5973 \u5e74\u9f84 \u5e7c\u513f\u3001\u9752\u5c11\u5e74\u3001\u4e2d\u5e74\u3001\u8001\u5e74 \u5438\u70df \u65e0\u3001\u6709 \u7535\u8bdd \u65e0\u3001\u6709 \u62ff\u4e1c\u897f \u65e0\u3001\u6709 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanAttributeRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b HumanAttributeRecognition \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanAttributeRecognition \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanAttributeRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanAttributeRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Human Attribute Recognition"},{"location":"deploy-human-attribute-recognition/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u667a\u6167\u5b89\u9632\u3001\u667a\u6167\u96f6\u552e\u3001\u884c\u4eba\u641c\u7d22\u7b49\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-human-attribute-recognition/#_2","text":"\u540d\u79f0 \u8bed\u4e49\u503c \u4e0a\u8eab\u670d\u9970 \u77ed\u8896\u3001\u957f\u8896 \u4e0b\u8eab\u670d\u9970 \u77ed\u88e4/\u88d9\u3001\u957f\u88e4/\u88d9 \u4e0a\u8eab\u670d\u9970\u7eb9\u7406 \u56fe\u6848\u3001\u7eaf\u8272\u3001\u683c\u5b50/\u6761\u7eb9 \u80cc\u5305 \u65e0\u5305\u3001\u6709\u5305 \u662f\u5426\u6234\u773c\u955c \u65e0\u3001\u6709 \u662f\u5426\u6234\u5e3d\u5b50 \u65e0\u3001\u6709 \u4eba\u4f53\u671d\u5411 \u6b63\u9762\u3001\u80cc\u9762\u3001\u5de6\u9762\u3001\u53f3\u9762 \u4e0a\u65b9\u622a\u65ad \u65e0\u3001\u6709 \u4e0b\u65b9\u622a\u65ad \u65e0\u3001\u6709 \u906e\u6321\u60c5\u51b5 \u65e0\u3001\u8f7b\u3001\u91cd \u662f\u5426\u6234\u53e3\u7f69 \u65e0\u3001\u6709 \u6027\u522b \u7537\u3001\u5973 \u5e74\u9f84 \u5e7c\u513f\u3001\u9752\u5c11\u5e74\u3001\u4e2d\u5e74\u3001\u8001\u5e74 \u5438\u70df \u65e0\u3001\u6709 \u7535\u8bdd \u65e0\u3001\u6709 \u62ff\u4e1c\u897f \u65e0\u3001\u6709","title":"\u5c5e\u6027\u8bf4\u660e"},{"location":"deploy-human-attribute-recognition/#_3","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-human-attribute-recognition/#_4","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-human-attribute-recognition/#_5","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanAttributeRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b HumanAttributeRecognition \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-human-attribute-recognition/#_6","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-human-attribute-recognition/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanAttributeRecognition \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-human-attribute-recognition/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-human-attribute-recognition/#_7","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-human-attribute-recognition/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanAttributeRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-human-attribute-recognition/#_8","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanAttributeRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-human-image-segmentation/","text":"\u57fa\u4e8e AI \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u53ef\u4ee5\u8bc6\u522b\u56fe\u50cf\u4e2d\u7684\u4eba\u4f53\u8f6e\u5ed3\uff0c\u5b9e\u73b0\u9ad8\u7cbe\u5ea6\u5206\u5272\uff0c\u4f7f\u4e4b\u4e0e\u80cc\u666f\u8fdb\u884c\u5206\u79bb\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7167\u7247\u80cc\u666f\u66ff\u6362\u3001\u540e\u671f\u5904\u7406\u3001\u8bc1\u4ef6\u7167\u5236\u4f5c\uff0c\u4eba\u50cf\u62a0\u56fe\u7f8e\u5316\u3001\u80cc\u666f\u865a\u5316\u7b49\u591a\u79cd\u573a\u666f\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 \u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c AI Solution Kit \u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e744\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a Amazon Lambda\u8c03\u7528 Amazon Lambda\u8fd0\u884c Amazon API Gateway\u8c03\u7528 Amazon API Gateway\u6570\u636e\u8f93\u51fa Amazon CloudWatch Logs Amazon Elastic Container Registry\u5b58\u50a8 \u5b81\u590f \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 \u00a51.36 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c4\u79d2 \u00a51815.6 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 \u00a528.94 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b21100KB\u8ba1\u7b97,\u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs \u6bcf\u6b2110KB,\u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry\u5b58\u50a8 0.5GB,\u6bcf\u6708\u6bcfGB\u00a50.69 \u00a50.35 \u5408\u8ba1 \u00a52001.83 \u7f8e\u56fd\u4e1c\u90e8(\u4fc4\u4ea5\u4fc4) \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 $0.20 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c4\u79d2 $266.8 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 $3.5 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b21100KB\u8ba1\u7b97,$0.09/GB $9 Amazon CloudWatch Logs \u6bcf\u6b2110KB,$0.50/GB $5 Amazon Elastic Container Registry\u5b58\u50a8 \u5f85\u5b9aGB,\u6bcf\u6708\u6bcfGB$0.1 $0.05 \u5408\u8ba1 $284.55 \u200b \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b HumanImageSegmentation \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 aikitsInvokeURL \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL \u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u53bb\u9664\u80cc\u666f\u540e\u7684 base64 \u7f16\u7801\u7684 Alpha \u901a\u9053\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/human_image_segmentation\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanImageSegmentation \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"Human Image Segmentation"},{"location":"deploy-human-image-segmentation/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7167\u7247\u80cc\u666f\u66ff\u6362\u3001\u540e\u671f\u5904\u7406\u3001\u8bc1\u4ef6\u7167\u5236\u4f5c\uff0c\u4eba\u50cf\u62a0\u56fe\u7f8e\u5316\u3001\u80cc\u666f\u865a\u5316\u7b49\u591a\u79cd\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-human-image-segmentation/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-human-image-segmentation/#_3","text":"\u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c AI Solution Kit \u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e744\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a Amazon Lambda\u8c03\u7528 Amazon Lambda\u8fd0\u884c Amazon API Gateway\u8c03\u7528 Amazon API Gateway\u6570\u636e\u8f93\u51fa Amazon CloudWatch Logs Amazon Elastic Container Registry\u5b58\u50a8","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-human-image-segmentation/#_4","text":"\u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 \u00a51.36 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c4\u79d2 \u00a51815.6 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 \u00a528.94 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b21100KB\u8ba1\u7b97,\u00a50.933/GB \u00a593.3 Amazon CloudWatch Logs \u6bcf\u6b2110KB,\u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry\u5b58\u50a8 0.5GB,\u6bcf\u6708\u6bcfGB\u00a50.69 \u00a50.35 \u5408\u8ba1 \u00a52001.83","title":"\u5b81\u590f"},{"location":"deploy-human-image-segmentation/#_5","text":"\u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 $0.20 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c4\u79d2 $266.8 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 $3.5 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b21100KB\u8ba1\u7b97,$0.09/GB $9 Amazon CloudWatch Logs \u6bcf\u6b2110KB,$0.50/GB $5 Amazon Elastic Container Registry\u5b58\u50a8 \u5f85\u5b9aGB,\u6bcf\u6708\u6bcfGB$0.1 $0.05 \u5408\u8ba1 $284.55 \u200b","title":"\u7f8e\u56fd\u4e1c\u90e8(\u4fc4\u4ea5\u4fc4)"},{"location":"deploy-human-image-segmentation/#_6","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b HumanImageSegmentation \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-human-image-segmentation/#_7","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-human-image-segmentation/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 aikitsInvokeURL \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL \u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-human-image-segmentation/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u53bb\u9664\u80cc\u666f\u540e\u7684 base64 \u7f16\u7801\u7684 Alpha \u901a\u9053\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" }","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-human-image-segmentation/#_8","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/human_image_segmentation\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-human-image-segmentation/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanImageSegmentation \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-human-image-segmentation/#_9","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-image-similarity/","text":"\u6bd4\u8f83\u4e24\u5e45\u56fe\u7247\u662f\u5426\u76f8\u4f3c\uff0c\u901a\u8fc7\u56fe\u7247\u7279\u5f81\u5411\u91cf\u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb(Euclidean Distance)\uff0c\u5e76\u8f6c\u5316\u4e3a\u7f6e\u4fe1\u5ea6\uff0c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6bd4\u8f83\u4e24\u5f20\u56fe\u7247\u7684\u76f8\u4f3c\u6027\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u5546\u54c1\u8bc6\u522b\uff0c\u7ffb\u62cd\u8bc6\u522b\uff0c\u667a\u80fd\u76f8\u518c\u7b49\u573a\u666f\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u56fe\u50cf\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 Image Similarity \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b Image Similarity \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 Image Similarity \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 Image Similarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 Image Similarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Image Similarity"},{"location":"deploy-image-similarity/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u5546\u54c1\u8bc6\u522b\uff0c\u7ffb\u62cd\u8bc6\u522b\uff0c\u667a\u80fd\u76f8\u518c\u7b49\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-image-similarity/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-image-similarity/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-image-similarity/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u56fe\u50cf\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 Image Similarity \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b Image Similarity \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-image-similarity/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-image-similarity/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 Image Similarity \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-image-similarity/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-image-similarity/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-image-similarity/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 Image Similarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-image-similarity/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 Image Similarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-image-super-resolution/","text":"\u53ef\u5c06\u56fe\u7247\u667a\u80fd\u653e\u59272\u62164\u500d\uff0c\u4ece\u800c\u83b7\u53d6\u6e05\u6670\u5ea6\u66f4\u9ad8\u3001\u7ec6\u8282\u4e30\u5bcc\u7684\u56fe\u50cf\uff0c\u89e3\u51b3\u539f\u59cb\u56fe\u7247\u5206\u8fa8\u7387\u4e0d\u8db3\u7684\u95ee\u9898\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7b49\u591a\u79cd\u573a\u666f\uff0c\u89e3\u51b3\u539f\u59cb\u56fe\u7247\u5206\u8fa8\u7387\u4e0d\u8db3\u7684\u95ee\u9898\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 \u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c AI Solution Kit \u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e745\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a Amazon Lambda\u8c03\u7528 Amazon Lambda\u8fd0\u884c Amazon API Gateway\u8c03\u7528 Amazon API Gateway\u6570\u636e\u8f93\u51fa Amazon CloudWatch Logs Amazon Elastic Container Registry\u5b58\u50a8 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u5165 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u51fa \u7f8e\u56fd\u4e1c\u90e8(\u4fc4\u4ea5\u4fc4) \u5904\u7406\u4e00\u5f20\u56fe\u63091\u79d2\u8ba1\u7b97\uff0cAmazon SageMaker \u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b\u5f00\u542f\u65f6\u4f1a\u4e00\u76f4\u8ba1\u8d39\uff0c\u8fd9\u91cc\u4ec5\u8ba1\u7b97\u5904\u7406\u5b8c1\u767e\u4e07\u56fe\u7247\u9700\u8981\u6d88\u8017\u65f6\u957f\u5bf9\u5e94\u7684\u5b9e\u4f8b\u8d39\u7528 \u200b \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 $0.20 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 $66.7 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 $3.5 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b214MB\u8ba1\u7b97,$0.09/GB $360 Amazon CloudWatch Logs \u6bcf\u6b2110KB,$0.50/GB $0.05 Amazon Elastic Container Registry\u5b58\u50a8 0.5GB,\u6bcf\u6708\u6bcfGB$0.1 $0.05 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b \u9700\u8981\u8fd0\u884c278\u5c0f\u65f6\uff0cml.inf1.xlarge $0.297/\u5c0f\u65f6 $82.57 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u5165 \u4ee5\u6bcf\u6b211MB\u8ba1\u7b97\uff0c$0.016/GB $16 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b214MB\u8ba1\u7b97\uff0c$0.016/GB $64 \u5408\u8ba1 $593.07 \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b ImageSuperResolution \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 20 \u5206\u949f \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71920 * 1080\uff0c\u5728\u5f00\u542f\u4eba\u50cf\u589e\u5f3a\u7684\u60c5\u51b5\u4e0b\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71280 * 720\u3002Lambda \u7248\u672c\u65b9\u6848\u7531\u4e8e\u6027\u80fd\u9650\u5236\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc7400 * 400 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e scale Integer \u5426 \u56fe\u50cf\u653e\u5927\u500d\u6570\uff0c\u652f\u6301\u653e\u5927\u500d\u6570\u4e3a2\u62164\uff0c\u9ed8\u8ba4\u503c\u4e3a2 face Bool \u5426 \u5f53True\u65f6\uff0c\u989d\u5916\u5f00\u542f\u4eba\u8138\u589e\u5f3a\uff0c\u9ed8\u8ba4\u503c\u4e3aFalse\u3002\uff08\u4ec5\u652f\u6301 GPU \u7248\u672c\u90e8\u7f72\u65b9\u5f0f\uff09 \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\", \"scale\" : 2 } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\", \"scale\" : 4 } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u6309\u6bd4\u4f8b\u653e\u5927\u540e base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/image_super_resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"Image Super Resolution"},{"location":"deploy-image-super-resolution/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7b49\u591a\u79cd\u573a\u666f\uff0c\u89e3\u51b3\u539f\u59cb\u56fe\u7247\u5206\u8fa8\u7387\u4e0d\u8db3\u7684\u95ee\u9898\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-image-super-resolution/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-image-super-resolution/#_3","text":"\u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c AI Solution Kit \u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e745\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a Amazon Lambda\u8c03\u7528 Amazon Lambda\u8fd0\u884c Amazon API Gateway\u8c03\u7528 Amazon API Gateway\u6570\u636e\u8f93\u51fa Amazon CloudWatch Logs Amazon Elastic Container Registry\u5b58\u50a8 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u5165 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u51fa","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-image-super-resolution/#_4","text":"\u5904\u7406\u4e00\u5f20\u56fe\u63091\u79d2\u8ba1\u7b97\uff0cAmazon SageMaker \u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b\u5f00\u542f\u65f6\u4f1a\u4e00\u76f4\u8ba1\u8d39\uff0c\u8fd9\u91cc\u4ec5\u8ba1\u7b97\u5904\u7406\u5b8c1\u767e\u4e07\u56fe\u7247\u9700\u8981\u6d88\u8017\u65f6\u957f\u5bf9\u5e94\u7684\u5b9e\u4f8b\u8d39\u7528 \u200b \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda\u8c03\u7528 \u767e\u4e07\u6b21 $0.20 Amazon Lambda\u8fd0\u884c \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 $66.7 Amazon API Gateway\u8c03\u7528 \u767e\u4e07\u6b21 $3.5 Amazon API Gateway\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b214MB\u8ba1\u7b97,$0.09/GB $360 Amazon CloudWatch Logs \u6bcf\u6b2110KB,$0.50/GB $0.05 Amazon Elastic Container Registry\u5b58\u50a8 0.5GB,\u6bcf\u6708\u6bcfGB$0.1 $0.05 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b \u9700\u8981\u8fd0\u884c278\u5c0f\u65f6\uff0cml.inf1.xlarge $0.297/\u5c0f\u65f6 $82.57 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u5165 \u4ee5\u6bcf\u6b211MB\u8ba1\u7b97\uff0c$0.016/GB $16 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u51fa \u4ee5\u6bcf\u6b214MB\u8ba1\u7b97\uff0c$0.016/GB $64 \u5408\u8ba1 $593.07","title":"\u7f8e\u56fd\u4e1c\u90e8(\u4fc4\u4ea5\u4fc4)"},{"location":"deploy-image-super-resolution/#_5","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b ImageSuperResolution \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 20 \u5206\u949f","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-image-super-resolution/#_6","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-image-super-resolution/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-image-super-resolution/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71920 * 1080\uff0c\u5728\u5f00\u542f\u4eba\u50cf\u589e\u5f3a\u7684\u60c5\u51b5\u4e0b\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71280 * 720\u3002Lambda \u7248\u672c\u65b9\u6848\u7531\u4e8e\u6027\u80fd\u9650\u5236\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc7400 * 400 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e scale Integer \u5426 \u56fe\u50cf\u653e\u5927\u500d\u6570\uff0c\u652f\u6301\u653e\u5927\u500d\u6570\u4e3a2\u62164\uff0c\u9ed8\u8ba4\u503c\u4e3a2 face Bool \u5426 \u5f53True\u65f6\uff0c\u989d\u5916\u5f00\u542f\u4eba\u8138\u589e\u5f3a\uff0c\u9ed8\u8ba4\u503c\u4e3aFalse\u3002\uff08\u4ec5\u652f\u6301 GPU \u7248\u672c\u90e8\u7f72\u65b9\u5f0f\uff09 \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://aikits.demo.solutions.aws.a2z.org.cn/img/sr-5.jpg\", \"scale\" : 2 } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\", \"scale\" : 4 } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u6309\u6bd4\u4f8b\u653e\u5927\u540e base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" }","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-image-super-resolution/#_7","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/image_super_resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-image-super-resolution/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-image-super-resolution/#_8","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 15 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-object-recognition/","text":"\u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u901a\u7528\u5bf9\u8c61\u4e3b\u4f53\uff0c\u8fd4\u56de\u8be5\u5bf9\u8c61\u4e3b\u4f53\u7684\u533a\u57df\u4fe1\u606f\u4e0e\u7f6e\u4fe1\u5ea6\u3002\u652f\u6301\u8bc6\u522b60\u7c7b\u7269\u4f53\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8eIPC\u56fe\u50cf\u68c0\u6d4b\u3001\u4ea4\u901a\u3001\u5b89\u9632\u7b49\u884c\u4e1a\u4e2d\u56fe\u50cf\u573a\u666f\u7684\u76ee\u6807\u68c0\u6d4b\u4e0e\u8ddf\u8e2a\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b ObjectRecognition \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/object_recognition\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Object Recognition"},{"location":"deploy-object-recognition/#_1","text":"\u53ef\u5e94\u7528\u4e8eIPC\u56fe\u50cf\u68c0\u6d4b\u3001\u4ea4\u901a\u3001\u5b89\u9632\u7b49\u884c\u4e1a\u4e2d\u56fe\u50cf\u573a\u666f\u7684\u76ee\u6807\u68c0\u6d4b\u4e0e\u8ddf\u8e2a\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-object-recognition/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-object-recognition/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-object-recognition/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b ObjectRecognition \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-object-recognition/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-object-recognition/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-object-recognition/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-object-recognition/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/object_recognition\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-object-recognition/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-object-recognition/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-pornography-detection/","text":"\u81ea\u52a8\u5bf9\u56fe\u7247\u8fdb\u884c\u5ba1\u6838\uff0c\u83b7\u53d6\u591a\u7ef4\u5ea6\u8272\u60c5\u91cf\u5316\u4fe1\u606f\uff0c\u5982\uff1anormal\uff0csexy\uff0cporn\uff0c\u5b9e\u73b0\u7cbe\u51c6\u5feb\u901f\u7684\u8272\u60c5\u503e\u5411\u5224\u65ad\u3002 \u9002\u7528\u573a\u666f \u65b9\u4fbf\u5ba2\u6237\u5bf9\u6d89\u9ec4\u5185\u5bb9\u8fdb\u884c\u5feb\u901f\u5904\u7406\uff0c\u5e2e\u52a9\u5ba2\u6237\u51cf\u5c11\u5ba1\u6838\u4eba\u529b\uff0c\u6709\u6548\u964d\u4f4e\u6d89\u9ec4\u98ce\u9669\uff0c\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 PornographyDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b PornographyDetection \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 PornographyDetection \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e normal Float \u8bc6\u522b\u56fe\u50cf\u7684\u6b63\u5e38\u7ef4\u5ea6\u5360\u6bd4 sexy Float \u8bc6\u522b\u56fe\u50cf\u7684\u6027\u611f\u7ef4\u5ea6\u5360\u6bd4 porn Float \u8bc6\u522b\u56fe\u50cf\u7684\u8272\u60c5\u7ef4\u5ea6\u5360\u6bd4 \u8fd4\u56de\u793a\u4f8b { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/pornography-detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 PornographyDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 PornographyDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"Pornography Detection"},{"location":"deploy-pornography-detection/#_1","text":"\u65b9\u4fbf\u5ba2\u6237\u5bf9\u6d89\u9ec4\u5185\u5bb9\u8fdb\u884c\u5feb\u901f\u5904\u7406\uff0c\u5e2e\u52a9\u5ba2\u6237\u51cf\u5c11\u5ba1\u6838\u4eba\u529b\uff0c\u6709\u6548\u964d\u4f4e\u6d89\u9ec4\u98ce\u9669\uff0c\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-pornography-detection/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-pornography-detection/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-pornography-detection/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 PornographyDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b PornographyDetection \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-pornography-detection/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-pornography-detection/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 PornographyDetection \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-pornography-detection/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e normal Float \u8bc6\u522b\u56fe\u50cf\u7684\u6b63\u5e38\u7ef4\u5ea6\u5360\u6bd4 sexy Float \u8bc6\u522b\u56fe\u50cf\u7684\u6027\u611f\u7ef4\u5ea6\u5360\u6bd4 porn Float \u8bc6\u522b\u56fe\u50cf\u7684\u8272\u60c5\u7ef4\u5ea6\u5360\u6bd4 \u8fd4\u56de\u793a\u4f8b { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 }","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-pornography-detection/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/pornography-detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-pornography-detection/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 PornographyDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-pornography-detection/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 PornographyDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 5 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-text-similarity/","text":"\u6bd4\u8f83\u4e24\u6bb5\u4e0d\u540c\u6587\u672c\u4e4b\u95f4\u76f8\u4f3c\u5ea6\uff0c\u5e76\u8f93\u51fa\u4e00\u4e2a\u4ecb\u4e8e0\u52301\u4e4b\u95f4\u7684\u7f6e\u4fe1\u5ea6\uff0c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6bd4\u8f83\u4e24\u6bb5\u6587\u5b57\u7684\u76f8\u4f3c\u6027\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u641c\u7d22\u5f15\u64ce\u3001\u63a8\u8350\u7cfb\u7edf\u3001\u673a\u5668\u7ffb\u8bd1\u3001\u81ea\u52a8\u5e94\u7b54\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u3001\u62fc\u5199\u7ea0\u9519\u7b49\u573a\u666f\u3002 \u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0 \u6210\u672c\u9884\u4f30 //TODO \u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b TextSimilarity \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO \u5f00\u59cb\u4f7f\u7528 \u8c03\u7528 URL \u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002 REST API\u63a5\u53e3\u53c2\u8003 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"Text Similarity"},{"location":"deploy-text-similarity/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u641c\u7d22\u5f15\u64ce\u3001\u63a8\u8350\u7cfb\u7edf\u3001\u673a\u5668\u7ffb\u8bd1\u3001\u81ea\u52a8\u5e94\u7b54\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u3001\u62fc\u5199\u7ea0\u9519\u7b49\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-text-similarity/#_2","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"deploy-text-similarity/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-text-similarity/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b TextSimilarity \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"deploy-text-similarity/#_5","text":"","title":"\u5f00\u59cb\u4f7f\u7528"},{"location":"deploy-text-similarity/#url","text":"\u60a8\u53ef\u4ee5\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684\u8bb0\u5f55\u7684 URL\u3002","title":"\u8c03\u7528 URL"},{"location":"deploy-text-similarity/#rest-api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" } { \"img\": \"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/\u2026\u2026\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"REST API\u63a5\u53e3\u53c2\u8003"},{"location":"deploy-text-similarity/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': 'https://demo.solutions.aws.a2z.org.cn/image/sample.png' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"https://demo.solutions.aws.a2z.org.cn/image/sample.png\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-text-similarity/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"https://demo.solutions.aws.a2z.org.cn/image/sample.png\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-text-similarity/#_7","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a TODO","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deployment/","text":"This section describes how to deploy the AI Solution Kit solution via Amazon CloudFormation . Detailed deployment and usage instructions for the AI applications included in the solution are described in detail in the corresponding. Before deploying the solution, it is recommended that you review the information in this guide regarding architecture diagrams and regional support, and then follow the instructions below to configure the solution and deploy it to your account. Deployment time Deploying an AI application based on the Amazon Lambda architecture: approximately 10 minutes Deploying an AI application based on the Amazon SageMaker architecture: approximately 20 minutes Note When users activate multiple APIs in Amazon CloudFormation at the same time, the deployment time is the stacked time for each individual API. Deployment Overview Prerequisites (China region) This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests without authentication in the Beijing region, you need to apply and ensure that your Amazon Web Services account has been filed with the Internet Content Provider (ICP) and that port 80 For details, please refer to the ICP filing instructions . 8E.pdf). Deploy the Amazon CloudFormation template Log in to the Amazon Web Services Management Console and select the link to launch the AWS CloudFormation template. Quick Launch Link Description link for Amazon CloudTech China (Beijing) region operated by Halo New Network Deploy AI Solution Kit in Beijing region Amazon Cloud Technologies China (Ningxia) Regional Link operated by West Cloud Data Deploying AI Solution Kit in Ningxia region global-region link Deploy AI Solution Kit in Global region By default, the template will be launched in the default region after you log in to the console. If you need to launch the solution in the specified Amazon Web Service region, select it from the region drop-down list in the console navigation bar. On the Create Stack page, verify that the correct template URL is displayed in the Amazon S3 URL text box, and then select Next . On the Assign Stack Details page, assign a name to your solution stack that is unique within the account and meets the naming requirements. In the Parameters section, there are two sections of parameters, General Configuration and AI Application List , where you can modify the General Configuration and select the AI applications to be deployed as needed, and then select Next . Common Configuration Parameters Parameter Name Default Value Description APIGatewayAuthorization AWS_IAM The authentication method of the API gateway. The default is AWS_IAM , which will automatically use the IAM permission to control access to the API. You can also choose NONE which is the no privilege authentication method (insecure) and the user will need to manually configure the required Resource Access Policy in the API Gateway console after deploying the solution. developerguide/apigateway-control-access-to-api.html). APIGatewayStageName prod The first path field in the API gateway (URI). See also: stageVariable APIExplorer yes Deploys the API Resource Explorer based on Swagger UI to visualize and interact with API resources. It is automatically generated based on the OpenAPI (formerly known as Swagger) specification and makes it easy to view API definitions and tests through visual documentation. For more information, see: API Resource Explorer AI Application List Parameters Parameter ID Default Description GeneralOCR no Deploy General OCR , check 'yes' if you want to deploy, see General OCR GeneralOCRTraditional no Deploy GeneralOCR(Traditional Chinese) , please check 'yes' if you want to deploy, please refer to GeneralOCR(Traditional Chinese) CustomOCR no Deploy Custom Template OCR , please check 'yes' if you want to deploy, please refer to Custom Template OCR CarLicensePlate no Deploy Car License Plate Recognition , please check 'yes' if you want to deploy, please see Car License Plate Recognition PornographyDetection no deploy PornographyDetection , please check 'yes' if you want to deploy, please see Pornography Detection ImageSimilarity no Deploy ImageSimilarity , check 'yes' if you want to deploy, see Image Similarity HumanImageSegmentation no Deploy HumanImageSegmentation , please check 'yes' if you want to deploy, please see the Human Image Segmentation ObjectRecognition no Deploy Object Recognition , please check 'yes' if you want to deploy, please see Object Recognition FaceDetection no Deploy Face Detection , check 'yes' if you want to deploy, see Face Detection FaceComparison no Deploy Face Comparison , please check 'yes' if you want to deploy, see Face Comparison HumanAttributeRecognition no Deploy Human Attribute Recognition , please check 'yes' if you want to deploy, see Human Attribute Recognition ImageSuperResolution no Deploy Image Super Resolution , check 'yes' if you want to deploy, see Image Super Resolution TextSimilarity no Deploy Text Similarity , check 'yes' if you want to deploy, see the Text Similarity On the Configure Stack Options page, select Next . On the Review page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . Select Create Stack to deploy the stack. You can view the status of the stack in the Status column of the AWS CloudFormation console. You can see the status as CREATE_COMPLETE when the creation is complete. Tip After successful deployment, you can open the AI Solution Kit main stack in AWS CloudFormation's console and switch to the Outputs (Outputs) tab to query the Amazon API Gateway-based call URL by the corresponding Parameter ID . Updating the Amazon CloudFormation Stack With Amazon CloudFormation, you can change the properties of existing resources in your stack, and if you need to add or remove deployed AI features, you can do so by updating your stack. In the Amazon CloudFormation console, select the completed AI Solution Kit stack that you created in the Stack list. 2. In the Stack Details pane, select Update. 3. In the Template Parameters section, specify the AI feature or parameter information that needs to be added or removed, and then select Next. 4. On the Configure Stack Options page, select Next . 5. On the Review page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . 6. If you are satisfied with the changes made, select Updata stack.","title":"Automated deployment"},{"location":"deployment/#deployment-overview","text":"Prerequisites (China region) This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests without authentication in the Beijing region, you need to apply and ensure that your Amazon Web Services account has been filed with the Internet Content Provider (ICP) and that port 80 For details, please refer to the ICP filing instructions . 8E.pdf).","title":"Deployment Overview"},{"location":"deployment/#deploy-the-amazon-cloudformation-template","text":"Log in to the Amazon Web Services Management Console and select the link to launch the AWS CloudFormation template. Quick Launch Link Description link for Amazon CloudTech China (Beijing) region operated by Halo New Network Deploy AI Solution Kit in Beijing region Amazon Cloud Technologies China (Ningxia) Regional Link operated by West Cloud Data Deploying AI Solution Kit in Ningxia region global-region link Deploy AI Solution Kit in Global region By default, the template will be launched in the default region after you log in to the console. If you need to launch the solution in the specified Amazon Web Service region, select it from the region drop-down list in the console navigation bar. On the Create Stack page, verify that the correct template URL is displayed in the Amazon S3 URL text box, and then select Next . On the Assign Stack Details page, assign a name to your solution stack that is unique within the account and meets the naming requirements. In the Parameters section, there are two sections of parameters, General Configuration and AI Application List , where you can modify the General Configuration and select the AI applications to be deployed as needed, and then select Next .","title":"Deploy the Amazon CloudFormation template"},{"location":"deployment/#common-configuration-parameters","text":"Parameter Name Default Value Description APIGatewayAuthorization AWS_IAM The authentication method of the API gateway. The default is AWS_IAM , which will automatically use the IAM permission to control access to the API. You can also choose NONE which is the no privilege authentication method (insecure) and the user will need to manually configure the required Resource Access Policy in the API Gateway console after deploying the solution. developerguide/apigateway-control-access-to-api.html). APIGatewayStageName prod The first path field in the API gateway (URI). See also: stageVariable APIExplorer yes Deploys the API Resource Explorer based on Swagger UI to visualize and interact with API resources. It is automatically generated based on the OpenAPI (formerly known as Swagger) specification and makes it easy to view API definitions and tests through visual documentation. For more information, see: API Resource Explorer","title":"Common Configuration Parameters"},{"location":"deployment/#ai-application-list-parameters","text":"Parameter ID Default Description GeneralOCR no Deploy General OCR , check 'yes' if you want to deploy, see General OCR GeneralOCRTraditional no Deploy GeneralOCR(Traditional Chinese) , please check 'yes' if you want to deploy, please refer to GeneralOCR(Traditional Chinese) CustomOCR no Deploy Custom Template OCR , please check 'yes' if you want to deploy, please refer to Custom Template OCR CarLicensePlate no Deploy Car License Plate Recognition , please check 'yes' if you want to deploy, please see Car License Plate Recognition PornographyDetection no deploy PornographyDetection , please check 'yes' if you want to deploy, please see Pornography Detection ImageSimilarity no Deploy ImageSimilarity , check 'yes' if you want to deploy, see Image Similarity HumanImageSegmentation no Deploy HumanImageSegmentation , please check 'yes' if you want to deploy, please see the Human Image Segmentation ObjectRecognition no Deploy Object Recognition , please check 'yes' if you want to deploy, please see Object Recognition FaceDetection no Deploy Face Detection , check 'yes' if you want to deploy, see Face Detection FaceComparison no Deploy Face Comparison , please check 'yes' if you want to deploy, see Face Comparison HumanAttributeRecognition no Deploy Human Attribute Recognition , please check 'yes' if you want to deploy, see Human Attribute Recognition ImageSuperResolution no Deploy Image Super Resolution , check 'yes' if you want to deploy, see Image Super Resolution TextSimilarity no Deploy Text Similarity , check 'yes' if you want to deploy, see the Text Similarity On the Configure Stack Options page, select Next . On the Review page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . Select Create Stack to deploy the stack. You can view the status of the stack in the Status column of the AWS CloudFormation console. You can see the status as CREATE_COMPLETE when the creation is complete. Tip After successful deployment, you can open the AI Solution Kit main stack in AWS CloudFormation's console and switch to the Outputs (Outputs) tab to query the Amazon API Gateway-based call URL by the corresponding Parameter ID .","title":"AI Application List Parameters"},{"location":"deployment/#updating-the-amazon-cloudformation-stack","text":"With Amazon CloudFormation, you can change the properties of existing resources in your stack, and if you need to add or remove deployed AI features, you can do so by updating your stack. In the Amazon CloudFormation console, select the completed AI Solution Kit stack that you created in the Stack list. 2. In the Stack Details pane, select Update. 3. In the Template Parameters section, specify the AI feature or parameter information that needs to be added or removed, and then select Next. 4. On the Configure Stack Options page, select Next . 5. On the Review page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . 6. If you are satisfied with the changes made, select Updata stack.","title":"Updating the Amazon CloudFormation Stack"},{"location":"faq/","text":"Frequently Asked Questions What AWS Identity and Access Management (IAM) permissions are required to deploy the solution? The following permissions are required to deploy the solution and call the API via API Gateway after deployment, with sagemaker: limited to the Image Super Resolution API. Actions apigateway:DELETE apigateway:GET apigateway:PATCH apigateway:POST apigateway:PUT cloudformation:CancelUpdateStack cloudformation:ContinueUpdateRollback cloudformation:CreateChangeSet cloudformation:CreateStack cloudformation:DeleteStack cloudformation:DescribeChangeSet cloudformation:DescribeStackEvents cloudformation:DescribeStackResources cloudformation:DescribeStackStacks cloudformation:GetStackPolicy cloudformation:GetTemplateSummary cloudformation:ListChangeSets cloudformation:ListStackResources cloudformation:ListStacks cloudformation:RollbackStack cloudformation:UpdateStack cloudformation:UpdateStackSet cloudformation:UpdateStackSet ecr:BatchDeleteImage ecr:BatchGetImage ecr:CreateRepository ecr:DeleteRepository ecr:DescribeRepositories ecr:GetDownloadUrlForLayer ecr:GetRepositoryPolicy ecr:InitiateLayerUpload ecr:PutImage ecr:SetRepositoryPolicy iam:AttachRolePolicy iam:CreateRole iam:DeleteRole iam:DeleteRolePolicy iam:DetachRolePolicy iam:GetRole iam:ListRoles iam:PassRole iam:PutRolePolicy lambda:AddPermission lambda:CreateFunction lambda:DeleteFunction lambda:GetFunction lambda:InvokeFunction lambda:RemovePermission lambda:UpdateFunctionConfiguration s3:GetObject sagemaker:CreateEndpoint sagemaker:CreateEndpointConfig sagemaker:CreateModel sagemaker:DeleteEndpoint sagemaker:DeleteEndpointConfig sagemaker:DeleteModel sagemaker:DescribeEndpoint sagemaker:DescribeEndpointConfig sagemaker:DescribeModel sagemaker:InvokeEndpoint sns:ListTopics How to resolve The account-level service limit 'ml.g4dn.xlarge for endpoint usage' is 0 Instances encountered when deploying the solution? visit aws console https://console.aws.amazon.com/ click on support on the top right corner click create a case (orange button) select Service Limit Increase radio button For Limit Type, Search and Select SageMaker Notebook Instances Write a short Use case description For Limit, Select ml.[x]. [x] (in your case, ml.g4dn.xlarge) Deploying solution encountered Resource handler returned message: \"'MemorySize' value failed to satisfy constraint: Member must have value less than or equal to 3008 . How do I resolve this? //TODO How do I consistently switch how APIs are authenticated for access in Amazon API Gateway? With Amazon CloudFormation, you can change the properties of existing resources in your stack, and if you need to add or remove deployed AI features, you can do so by updating your stack. On the Amazon CloudFormation console, select the completed AI Solution Kit stack in the Stack list. 2. In the stack details pane, select Update. 3. In the Template Parameters section, modify the API Gateway Authorization parameter, and select Next. 4. On the Configure Stack Options page, select Next . 5. On the Audit page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . 6. If you are satisfied with the changes you have made, select Updata stack to complete the access rights update. How do I individually switch the access authentication method for APIs in Amazon API Gateway? Open the Services panel in the Amazon Web Service console, find Application Services, and click API Gateway. 2. Select the most recently created AI Solution Kit API in the API list, or sort by 'Created' to make it easier to find, then click the name link to open the API details page Expand the resource tree, find the 'OPTIONS' node under the path of the resource you need to modify the access rights, and click it to display the method execution configuration page. Click the Method Request link under Method Execution Then click the Edit button on the right side of the authorization, expand the drop-down list, select 'Amazon IAM', select it and click the Update button to complete the modification. After updating, the authorization item should be displayed as 'Amazon IAM'. 6. Next, click the POST button under OPTIONS in the resource tree, and modify the method of OPTIONS, change the authorization method to Amazon IAM in the method request, and then click the Update button. Click on the 'Actions' drop-down button on the left side of the method execution, and click on the 'Deploy API' option under API Actions In the Deploy API dialog box, select 'prod' or a custom name for the deployment phase, do not select [New Phase], and then click the Deploy button below to complete the deployment Create and use a usage plan with API key This solution supports API Usage Plans. After deploying the solution and testing the APIs, you can implement API Gateway Usage Plans and offer them as a customer-facing product/service. You can configure usage plans and API keys to allow customers to access selected APIs at agreed request rates and quotas that meet their business needs and budget constraints, and you can set default method level limits for APIs or set limits for individual API methods if desired. The API caller must provide an assigned API key in the x-api-key header of the API request. If you need to configure an API usage plan please refer to: Configure Usage Plan What target identification is currently supported by the Universal Target Detection API? The following is a list of supported entities for target detection. ID accordion airplane alligator apple army_tank awning backpack ball balloon banana barrel baseball baseball_bat baseball_glove basket bathtub bear bed bee beer_bottle bell_pepper belt bench bicycle billboard bird blackboard boat book bookcase boot bottle bowl bowling_ball box bracelet brassiere bread broccoli building bus_(vehicle) butterfly cabinet cake camel camera can candle candy_bar cannon canoe car_(automobile) carrot cart castle cat caterpillar cello cellular_telephone chair chicken_(animal) chopping_board chopstick christmas_tree clock coat cocktail coffee_table coin computer_keyboard computer_monitor cone cookie cow cowboy_hat crab_(animal) crown cucumber cup cupboard curtain deer desk dessert dinosaur dog doll dolphin door doorknob doughnut dragonfly drawer dress drum_(musical_instrument) duck duffel_bag eagle earring egg elephant fan faucet fireplace fireplug fish flag flower_arrangement flowerpot football_helmet fork fountain french_fries frisbee frog fruit fruit_juice frying_pan gazelle giraffe glass_(drink_container) glove goat goggles goose grape guitar gun hamburger hamster handbag handle harbor_seal hat headset helicopter helmet high_heels hog horse house icecream insect jacket jaguar jean jellyfish kitchen_table kite knife ladder lamp lantern laptop_computer lavender lemon lettuce license_plate life_jacket lightbulb lighthouse lily lion lizard maple mask microphone microwave_oven minivan mirror monkey motorcycle mouse_(computer_equipment) muffin mug mushroom musical_instrument napkin necklace necktie nightstand onion orange_(fruit) oven owl paddle painting palm_tree parachute parking_meter parrot pasta pastry pen penguin person piano pillow pizza plastic_bag plate polar_bear pool_table porch poster potted_plant pumpkin rabbit refrigerator remote_control ring roller_skate rose salad sandal_(type_of_shoe) sandwich saucer saxophone scarf scissors sculpture sheep shirt shoe short_pants shrimp sink skateboard ski skirt skullcap snake snowboard soccer_ball sock sofa sofa_bed sparrow speaker_(stero_equipment) spectacles spider spoon sportswear squirrel stool stop_sign stove straw_(for_drinking) strawberry street_sign streetlight suit_(clothing) suitcase sunflower sunglasses sunhat surfboard sushi swimming_pool swimsuit table tablet_computer taxi teddy_bear telephone television_set tennis_ball tennis_racket tent tiger toilet toilet_tissue tomato toothbrush towel tower toy traffic_light train_(railroad_vehicle) trash_can tray tree tripod trousers truck trumpet turtle umbrella vase vegetables violin wall_socket watch water_jug whale wheel wheelchair window wineglass zebra","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#what-aws-identity-and-access-management-iam-permissions-are-required-to-deploy-the-solution","text":"The following permissions are required to deploy the solution and call the API via API Gateway after deployment, with sagemaker: limited to the Image Super Resolution API. Actions apigateway:DELETE apigateway:GET apigateway:PATCH apigateway:POST apigateway:PUT cloudformation:CancelUpdateStack cloudformation:ContinueUpdateRollback cloudformation:CreateChangeSet cloudformation:CreateStack cloudformation:DeleteStack cloudformation:DescribeChangeSet cloudformation:DescribeStackEvents cloudformation:DescribeStackResources cloudformation:DescribeStackStacks cloudformation:GetStackPolicy cloudformation:GetTemplateSummary cloudformation:ListChangeSets cloudformation:ListStackResources cloudformation:ListStacks cloudformation:RollbackStack cloudformation:UpdateStack cloudformation:UpdateStackSet cloudformation:UpdateStackSet ecr:BatchDeleteImage ecr:BatchGetImage ecr:CreateRepository ecr:DeleteRepository ecr:DescribeRepositories ecr:GetDownloadUrlForLayer ecr:GetRepositoryPolicy ecr:InitiateLayerUpload ecr:PutImage ecr:SetRepositoryPolicy iam:AttachRolePolicy iam:CreateRole iam:DeleteRole iam:DeleteRolePolicy iam:DetachRolePolicy iam:GetRole iam:ListRoles iam:PassRole iam:PutRolePolicy lambda:AddPermission lambda:CreateFunction lambda:DeleteFunction lambda:GetFunction lambda:InvokeFunction lambda:RemovePermission lambda:UpdateFunctionConfiguration s3:GetObject sagemaker:CreateEndpoint sagemaker:CreateEndpointConfig sagemaker:CreateModel sagemaker:DeleteEndpoint sagemaker:DeleteEndpointConfig sagemaker:DeleteModel sagemaker:DescribeEndpoint sagemaker:DescribeEndpointConfig sagemaker:DescribeModel sagemaker:InvokeEndpoint sns:ListTopics","title":"What AWS Identity and Access Management (IAM) permissions are required to deploy the solution?"},{"location":"faq/#how-to-resolve-the-account-level-service-limit-mlg4dnxlarge-for-endpoint-usage-is-0-instances-encountered-when-deploying-the-solution","text":"visit aws console https://console.aws.amazon.com/ click on support on the top right corner click create a case (orange button) select Service Limit Increase radio button For Limit Type, Search and Select SageMaker Notebook Instances Write a short Use case description For Limit, Select ml.[x]. [x] (in your case, ml.g4dn.xlarge)","title":"How to resolve The account-level service limit 'ml.g4dn.xlarge for endpoint usage' is 0 Instances encountered when deploying the solution?"},{"location":"faq/#deploying-solution-encountered-resource-handler-returned-message-memorysize-value-failed-to-satisfy-constraint-member-must-have-value-less-than-or-equal-to-3008-how-do-i-resolve-this","text":"//TODO","title":"Deploying solution encountered Resource handler returned message: \"'MemorySize' value failed to satisfy constraint: Member must have value less than or equal to 3008. How do I resolve this?"},{"location":"faq/#how-do-i-consistently-switch-how-apis-are-authenticated-for-access-in-amazon-api-gateway","text":"With Amazon CloudFormation, you can change the properties of existing resources in your stack, and if you need to add or remove deployed AI features, you can do so by updating your stack. On the Amazon CloudFormation console, select the completed AI Solution Kit stack in the Stack list. 2. In the stack details pane, select Update. 3. In the Template Parameters section, modify the API Gateway Authorization parameter, and select Next. 4. On the Configure Stack Options page, select Next . 5. On the Audit page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . 6. If you are satisfied with the changes you have made, select Updata stack to complete the access rights update.","title":"How do I consistently switch how APIs are authenticated for access in Amazon API Gateway?"},{"location":"faq/#how-do-i-individually-switch-the-access-authentication-method-for-apis-in-amazon-api-gateway","text":"Open the Services panel in the Amazon Web Service console, find Application Services, and click API Gateway. 2. Select the most recently created AI Solution Kit API in the API list, or sort by 'Created' to make it easier to find, then click the name link to open the API details page Expand the resource tree, find the 'OPTIONS' node under the path of the resource you need to modify the access rights, and click it to display the method execution configuration page. Click the Method Request link under Method Execution Then click the Edit button on the right side of the authorization, expand the drop-down list, select 'Amazon IAM', select it and click the Update button to complete the modification. After updating, the authorization item should be displayed as 'Amazon IAM'. 6. Next, click the POST button under OPTIONS in the resource tree, and modify the method of OPTIONS, change the authorization method to Amazon IAM in the method request, and then click the Update button. Click on the 'Actions' drop-down button on the left side of the method execution, and click on the 'Deploy API' option under API Actions In the Deploy API dialog box, select 'prod' or a custom name for the deployment phase, do not select [New Phase], and then click the Deploy button below to complete the deployment","title":"How do I individually switch the access authentication method for APIs in Amazon API Gateway?"},{"location":"faq/#create-and-use-a-usage-plan-with-api-key","text":"This solution supports API Usage Plans. After deploying the solution and testing the APIs, you can implement API Gateway Usage Plans and offer them as a customer-facing product/service. You can configure usage plans and API keys to allow customers to access selected APIs at agreed request rates and quotas that meet their business needs and budget constraints, and you can set default method level limits for APIs or set limits for individual API methods if desired. The API caller must provide an assigned API key in the x-api-key header of the API request. If you need to configure an API usage plan please refer to: Configure Usage Plan","title":"Create and use a usage plan with API key"},{"location":"faq/#what-target-identification-is-currently-supported-by-the-universal-target-detection-api","text":"The following is a list of supported entities for target detection. ID accordion airplane alligator apple army_tank awning backpack ball balloon banana barrel baseball baseball_bat baseball_glove basket bathtub bear bed bee beer_bottle bell_pepper belt bench bicycle billboard bird blackboard boat book bookcase boot bottle bowl bowling_ball box bracelet brassiere bread broccoli building bus_(vehicle) butterfly cabinet cake camel camera can candle candy_bar cannon canoe car_(automobile) carrot cart castle cat caterpillar cello cellular_telephone chair chicken_(animal) chopping_board chopstick christmas_tree clock coat cocktail coffee_table coin computer_keyboard computer_monitor cone cookie cow cowboy_hat crab_(animal) crown cucumber cup cupboard curtain deer desk dessert dinosaur dog doll dolphin door doorknob doughnut dragonfly drawer dress drum_(musical_instrument) duck duffel_bag eagle earring egg elephant fan faucet fireplace fireplug fish flag flower_arrangement flowerpot football_helmet fork fountain french_fries frisbee frog fruit fruit_juice frying_pan gazelle giraffe glass_(drink_container) glove goat goggles goose grape guitar gun hamburger hamster handbag handle harbor_seal hat headset helicopter helmet high_heels hog horse house icecream insect jacket jaguar jean jellyfish kitchen_table kite knife ladder lamp lantern laptop_computer lavender lemon lettuce license_plate life_jacket lightbulb lighthouse lily lion lizard maple mask microphone microwave_oven minivan mirror monkey motorcycle mouse_(computer_equipment) muffin mug mushroom musical_instrument napkin necklace necktie nightstand onion orange_(fruit) oven owl paddle painting palm_tree parachute parking_meter parrot pasta pastry pen penguin person piano pillow pizza plastic_bag plate polar_bear pool_table porch poster potted_plant pumpkin rabbit refrigerator remote_control ring roller_skate rose salad sandal_(type_of_shoe) sandwich saucer saxophone scarf scissors sculpture sheep shirt shoe short_pants shrimp sink skateboard ski skirt skullcap snake snowboard soccer_ball sock sofa sofa_bed sparrow speaker_(stero_equipment) spectacles spider spoon sportswear squirrel stool stop_sign stove straw_(for_drinking) strawberry street_sign streetlight suit_(clothing) suitcase sunflower sunglasses sunhat surfboard sushi swimming_pool swimsuit table tablet_computer taxi teddy_bear telephone television_set tennis_ball tennis_racket tent tiger toilet toilet_tissue tomato toothbrush towel tower toy traffic_light train_(railroad_vehicle) trash_can tray tree tripod trousers truck trumpet turtle umbrella vase vegetables violin wall_socket watch water_jug whale wheel wheelchair window wineglass zebra","title":"What target identification is currently supported by the Universal Target Detection API?"},{"location":"include-deploy-code/","text":"\u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"{{ no such element: dict object['sample_image'] }}\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' payload = { 'url': '{{ no such element: dict object['sample_image'] }}' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" payload = json.dumps({ \"url\": \"{{ no such element: dict object['sample_image'] }}\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"{{ no such element: dict object['sample_image'] }}\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 {{ no such element: dict object['feature_id'] }} \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"{{ no such element: dict object['sample_image'] }}\" }","title":"Include deploy code"},{"location":"include-deploy-code/#_1","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"{{ no such element: dict object['sample_image'] }}\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' payload = { 'url': '{{ no such element: dict object['sample_image'] }}' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" payload = json.dumps({ \"url\": \"{{ no such element: dict object['sample_image'] }}\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"{{ no such element: dict object['sample_image'] }}\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"include-deploy-code/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 {{ no such element: dict object['feature_id'] }} \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"{{ no such element: dict object['sample_image'] }}\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"include-deploy-cost/","text":"\u6210\u672c\u9884\u4f30 //TODO","title":"Include deploy cost"},{"location":"include-deploy-cost/#_1","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"include-deploy-description/","text":"{{ no such element: dict object['feature_description'] }} \u9002\u7528\u573a\u666f {{ no such element: dict object['feature_scenario'] }}","title":"Include deploy description"},{"location":"include-deploy-description/#_1","text":"{{ no such element: dict object['feature_scenario'] }}","title":"\u9002\u7528\u573a\u666f"},{"location":"include-deploy-lambda/","text":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784 \u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"Include deploy lambda"},{"location":"include-deploy-lambda/#_1","text":"\u7528\u6237\u57fa\u4e8e Amazon Cloudformartion \u90e8\u7f72\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 HTTP(s) \u6216 API\u63a5\u53e3\u7b49 \u65b9\u5f0f\u4f7f\u7528\u3002\u5176\u4e2d\uff0c\u901a\u8fc7 Amazon API Gateway \u521b\u5efa\u7684 REST API \u63a5\u53e3\u5411\u7528\u6237\u63d0\u4f9b AI \u8c03\u7528\u670d\u52a1\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u8bf7\u6c42\uff08\u56fe\u7247\u6216\u6587\u672c\uff09\u901a\u8fc7 HTTP POST \u65b9\u5f0f\u53d1\u9001\u8bf7\u6c42\u5230 Amazon API Gateway\uff0c\u4e4b\u540e\u7531 Amazon API Gateway \u8c03\u7528 Lambda \u5b8c\u6210 AI \u6587\u5b57\u8bc6\u522b\u8fc7\u7a0b\u5e76\u5c06\u8bc6\u522b\u6587\u5b57\u53ca\u5750\u6807\u7b49\u7ed3\u679c\uff08JSON\u683c\u5f0f\u6570\u636e\uff09\u8fd4\u56de\u7ed9\u8c03\u7528\u7aef\u3002 \u672c\u65b9\u6848\u4f7f\u7528 Lambda \u3001 Amazon API Gateway \u7b49\u65e0\u670d\u52a1\u67b6\u6784\u65b9\u6848\uff0c\u7528\u6237\u65e0\u9700\u62c5\u5fc3\u5728\u4e91\u4e2d\u6216\u672c\u5730\u7ba1\u7406\u548c\u8fd0\u884c\u670d\u52a1\u5668\u6216\u8fd0\u884c\u65f6\u3002\u53ea\u9700\u6309\u5b9e\u9645\u4f7f\u7528\u91cf\u652f\u4ed8\u8d39\u7528\u3002 \u67b6\u6784\u56fe\u8bf7\u53c2\u8003 \u67b6\u6784\u6982\u89c8: \u57fa\u4e8e Lambda \u5b9e\u73b0","title":"\u89e3\u51b3\u65b9\u6848\u67b6\u6784"},{"location":"include-deploy-plan/","text":"\u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7Amazon CloudFormation\u5378\u8f7d\u5bf9\u5e94\u7684\u5806\u6808\uff0c\u6574\u4e2a\u5220\u9664\u8fc7\u7a0b\u5927\u7ea6\u9700\u898110\u5206\u949f\u3002","title":"Include deploy plan"},{"location":"include-deploy-plan/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7Amazon CloudFormation\u5378\u8f7d\u5bf9\u5e94\u7684\u5806\u6808\uff0c\u6574\u4e2a\u5220\u9664\u8fc7\u7a0b\u5927\u7ea6\u9700\u898110\u5206\u949f\u3002","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"include-deploy-uninstall/","text":"\u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['destroy_time'] }}","title":"Include deploy uninstall"},{"location":"include-deploy-uninstall/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['destroy_time'] }}","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"include-deploy/","text":"\u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b {{ no such element: dict object['feature_id'] }} \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['deployment_time'] }}","title":"Include deploy"},{"location":"include-deploy/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b {{ no such element: dict object['feature_id'] }} \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['deployment_time'] }}","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"regions/","text":"Update time: 2022-05-05 This solution v1.2.0 supports deployment in the following Amazon Web Services regions. Supported global regions Region Name Region ID US East (N. Virginia) Region us-east-1 US East (Ohio) Region us-east-2 US West (N. California) Region us-west-1 US West (Oregon) Region us-west-2 Asia Pacific (Mumbai) Region ap-south-1 Asia Pacific (Tokyo) Region ap-northeast-1 Asia Pacific (Seoul) Region ap-northeast-2 Asia Pacific (Singapore) Region ap-southeast-1 Asia Pacific (Sydney) Region ap-southeast-2 Canada (Central) Region ca-central-1 Europe (Ireland) Region eu-west-1 Europe (London) Region eu-west-2 Europe (Paris) Region eu-west-3 Europe (Frankfurt) Region eu-central-1 South America (Sao Paulo) Region sa-east-1 Supported China regions Region Name Region ID Amazon Web Services China (Ningxia) Region operated by NWCD cn-northwest-1 Amazon Web Services China (Beijing) Region operated by Sinnet cn-north-1","title":"Supported regions"},{"location":"regions/#supported-global-regions","text":"Region Name Region ID US East (N. Virginia) Region us-east-1 US East (Ohio) Region us-east-2 US West (N. California) Region us-west-1 US West (Oregon) Region us-west-2 Asia Pacific (Mumbai) Region ap-south-1 Asia Pacific (Tokyo) Region ap-northeast-1 Asia Pacific (Seoul) Region ap-northeast-2 Asia Pacific (Singapore) Region ap-southeast-1 Asia Pacific (Sydney) Region ap-southeast-2 Canada (Central) Region ca-central-1 Europe (Ireland) Region eu-west-1 Europe (London) Region eu-west-2 Europe (Paris) Region eu-west-3 Europe (Frankfurt) Region eu-central-1 South America (Sao Paulo) Region sa-east-1","title":"Supported global regions"},{"location":"regions/#supported-china-regions","text":"Region Name Region ID Amazon Web Services China (Ningxia) Region operated by NWCD cn-northwest-1 Amazon Web Services China (Beijing) Region operated by Sinnet cn-north-1","title":"Supported China regions"},{"location":"revisions/","text":"Updated\uff1a2022-05-05 Date Description 2021-9 Release 1.0.0 AI APIs Gereral OCR Image Super Resolution Pornography Detection Human Image Segmentation 2022-5 Release 1.2.0 AI APIs Optimized General OCR Gernral OCR(Traditional Chinese) Custom OCR Image Similarity General Object Recognition Face Detection Face Similarity Human Attribute Car License Plate Text Similarity Solution Upgrade Support OpenAPI specification and integrate API Explorer AI model containerization CDK upgrade to 2.20.0 Support for CloudFormation Deployment","title":"Release Notes"},{"location":"security/","text":"Security Information When you build solutions on Amazon Web Services, security responsibilities are shared between you and Amazon Cloud. This Shared Responsibility Model reduces your operational burden due to the Amazon Web Services operations, management, and control components, including host operations The physical security of the system, the virtualization layer, and the facility where the service runs. For more information on Amazon Web Services, visit Amazon Web Services Cloud Security . IAM roles Amazon Web Services Identity and Access Management (IAM) roles allow customers to assign fine-grained access policies and permissions to services and users on Amazon Web Services. This solution creates IAM roles that grant access between components of the solution.","title":"Security"},{"location":"security/#security-information","text":"When you build solutions on Amazon Web Services, security responsibilities are shared between you and Amazon Cloud. This Shared Responsibility Model reduces your operational burden due to the Amazon Web Services operations, management, and control components, including host operations The physical security of the system, the virtualization layer, and the facility where the service runs. For more information on Amazon Web Services, visit Amazon Web Services Cloud Security .","title":"Security Information"},{"location":"security/#iam-roles","text":"Amazon Web Services Identity and Access Management (IAM) roles allow customers to assign fine-grained access policies and permissions to services and users on Amazon Web Services. This solution creates IAM roles that grant access between components of the solution.","title":"IAM roles"},{"location":"source/","text":"You can download the source files for this solution by visiting our GitHub repository . The template for the data transfer solution was generated using the Cloud Development Kit (CDK) . For more information about this, see the README.md file.","title":"Source code"},{"location":"template/","text":"Before deploying the solution, you can download the following Amazon Cloud Technologies CloudFormation template used by the solution. AI-Solution-Kit.template : You can use this template to launch the solution and related services. You can also customize the template according to your needs.","title":"CloudFormation template"},{"location":"upgrade/","text":"Updated: 2022-05-05 When you have deployed and are using some of the API features from version 1.0.0, you can continue to use the original APIs that have been deployed inside your AWS account while deploying the features provided in the new APIs available in 1.2.0. If you want to switch the original API call URL to the new version, you can find the call URL from the corresponding AWS CloudFormation stack Outputs tab after the new version is deployed, and replace the original URL with the one from the four APIs included in the current 1.0.0 release (Universal Text Recognition, Image Super Resolution, Intelligent Portrait Segmentation, and Pornography Review). The interface definition parameters of the four APIs (Universal Text Recognition, Image Super Resolution, Smart Portrait Segmentation, Pornography Review) in the 1.0.0 release are identical to the same four functions in the 1.2.0 release, and you only need to replace the original URLs to use them. After the switch is complete, you can completely remove the original stack in the AWS CloudFormation console, which takes about 10 minutes.","title":"How to Upgrade"}]}