{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AI Solution Kit provides solutions of various use cases, allowing you to use out-of-box AI solutions, such as text recognition (OCR) solution, image super resolution solution, pornography detection solution, human segmentation solution. Benefits Best practices for multiple scenarios You can find the code implementation of most common AI use cases. All solutions and applications included are vetted by Amazon Web Services. Out-of-box AI features The solutions automatically create RESTful APIs through Amazon API Gateway. After deploying the solution, you can send HTTP POST requests to use the AI functions. The deployment guides provides all API test methods (e.g. Postman) and offers sample codes. Open Source and Customization All the solutions are open sourced. You can use the solutions and applications for free. If you have different use cases, you can take the source code as reference to make your own implementation. APIs Optical Character Recognition(OCR) APIs API Name Description General OCR (Simplified Chinese) Recognize and extract Simplified Chinese, numbers, alphabetical characters and symbols Get started General OCR (Traditional Chinese) Recognize and extract Traditional Chinese, numbers, alphabetical characters and symbols Get started Custom OCR Recognize and extract estructured text by predefined OCR templates Get started Car License Plate Recognize text on Chinese car license plate Get started Facial & Body APIs API Name Description Face Comparison Compare two faces of same person and return a confidence score of the similarity Get started Face Detection Detect the face in a image and return coordinate information of the face Get started Human Attribute Recognition Recognize the attributes of the human body in the image Get started Human Image Segmentation Segment human bodies from background and return the alpha channel Get started Image Understanding APIs API Name Description Image Similarity Compare two images and return similarity score Get started Object Recognition Segment human bodies from background and return the alpha channel Get started Pornography Detection Detect pornographic image in three dimensions (normal, sexy, porn) and return confidence scores Get started Computer Vision Production APIs API Name Description Image Super Resolution Upscale the resolution and enhance details in the images Get started Natural Language Understanding(NLU) APIs API Name Description Text Similarity Compare two Chinese words or sentences and return similarity score Get started","title":"Welcome"},{"location":"#benefits","text":"Best practices for multiple scenarios You can find the code implementation of most common AI use cases. All solutions and applications included are vetted by Amazon Web Services. Out-of-box AI features The solutions automatically create RESTful APIs through Amazon API Gateway. After deploying the solution, you can send HTTP POST requests to use the AI functions. The deployment guides provides all API test methods (e.g. Postman) and offers sample codes. Open Source and Customization All the solutions are open sourced. You can use the solutions and applications for free. If you have different use cases, you can take the source code as reference to make your own implementation.","title":"Benefits"},{"location":"#apis","text":"","title":"APIs"},{"location":"#optical-character-recognitionocr-apis","text":"API Name Description General OCR (Simplified Chinese) Recognize and extract Simplified Chinese, numbers, alphabetical characters and symbols Get started General OCR (Traditional Chinese) Recognize and extract Traditional Chinese, numbers, alphabetical characters and symbols Get started Custom OCR Recognize and extract estructured text by predefined OCR templates Get started Car License Plate Recognize text on Chinese car license plate Get started","title":"Optical Character Recognition(OCR) APIs"},{"location":"#facial-body-apis","text":"API Name Description Face Comparison Compare two faces of same person and return a confidence score of the similarity Get started Face Detection Detect the face in a image and return coordinate information of the face Get started Human Attribute Recognition Recognize the attributes of the human body in the image Get started Human Image Segmentation Segment human bodies from background and return the alpha channel Get started","title":"Facial &amp; Body APIs"},{"location":"#image-understanding-apis","text":"API Name Description Image Similarity Compare two images and return similarity score Get started Object Recognition Segment human bodies from background and return the alpha channel Get started Pornography Detection Detect pornographic image in three dimensions (normal, sexy, porn) and return confidence scores Get started","title":"Image Understanding APIs"},{"location":"#computer-vision-production-apis","text":"API Name Description Image Super Resolution Upscale the resolution and enhance details in the images Get started","title":"Computer Vision Production APIs"},{"location":"#natural-language-understandingnlu-apis","text":"API Name Description Text Similarity Compare two Chinese words or sentences and return similarity score Get started","title":"Natural Language Understanding(NLU) APIs"},{"location":"additional-resources/","text":"AWS Lambda Amazon SageMaker Amazon API Gateway Amazon ECR Amazon EFS AWS IAM Amazon EC2 AWS CloudFormation Amazon S3","title":"Additional resources"},{"location":"api-explorer/","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528API\u4f7f\u7528\u6240\u9700\u7684AI\u5e94\u7528\u3002 General OCR (Simplified Chinese) General OCR (Traditional Chinese) Custom Template OCR Car License Plate Face Detection Face Comparison Human Attribute Recognition Human Image Segmentation Image Similarity Object Recognition Pornography Detection Image Super Resolution Text Similarity | \u8c03\u7528\u65b9\u5f0f \u8c03\u7528AI\u5e94\u7528\u7684URL\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u5982\u679c\u60a8\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5c06\u53c2\u6570 APIGatewayAuthorization \u8bbe\u7f6e\u4e3a NONE \uff0cAPI\u5c06\u5141\u8bb8\u533f\u540d\u8bbf\u95ee\u3002 \u5982\u679c\u60a8\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5c06\u53c2\u6570 APIGatewayAuthorization \u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u88ab\u8981\u6c42\u4f7f\u7528AWS IAM\u8eab\u4efd\u9a8c\u8bc1\u7684\u8c03\u7528API\u3002\u8be6\u60c5\u53ef\u53c2\u89c1 \u5728Amazon API Gateway\u4e2d\u8c03\u7528REST API \u3002 Tools API Explorer Postman cURL Python Java","title":"Overview"},{"location":"api-explorer/#_1","text":"\u8c03\u7528AI\u5e94\u7528\u7684URL\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u5982\u679c\u60a8\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5c06\u53c2\u6570 APIGatewayAuthorization \u8bbe\u7f6e\u4e3a NONE \uff0cAPI\u5c06\u5141\u8bb8\u533f\u540d\u8bbf\u95ee\u3002 \u5982\u679c\u60a8\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5c06\u53c2\u6570 APIGatewayAuthorization \u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u88ab\u8981\u6c42\u4f7f\u7528AWS IAM\u8eab\u4efd\u9a8c\u8bc1\u7684\u8c03\u7528API\u3002\u8be6\u60c5\u53ef\u53c2\u89c1 \u5728Amazon API Gateway\u4e2d\u8c03\u7528REST API \u3002","title":"\u8c03\u7528\u65b9\u5f0f"},{"location":"api-explorer/#tools","text":"API Explorer Postman cURL Python Java","title":"Tools"},{"location":"architecture/","text":"Two types of AI functionality implementations are included in this solution architecture: AWS Lambda-based architecture and Amazon SageMaker-based architecture. Description The Amazon SageMaker-based architecture is only available in version 1.2.0 for Image Super Resolution Solution . Architecture based on AWS Lambda ! the user or application sends an API request to the Amazon API Gateway. the request payload needs to contain information about the image or text being processed. Amazon API Gateway sends the incoming user request directly to the AWS Lambda function. 3. the AWS Lambda function returns the result to the caller. Architecture based on Amazon SageMaker ! the user or application sends an API request to the Amazon API Gateway. the request payload needs to contain the image or text information to be processed. Amazon API Gateway sends the request to AWS Lambda (invoke endpoint) function. 3. AWS Lambda calls Amazon SageMaker Endpoint, which performs the inference process in Amazon SageMaker and returns the inference result (usually JSON format data).","title":"Architecture overview"},{"location":"architecture/#architecture-based-on-aws-lambda","text":"! the user or application sends an API request to the Amazon API Gateway. the request payload needs to contain information about the image or text being processed. Amazon API Gateway sends the incoming user request directly to the AWS Lambda function. 3. the AWS Lambda function returns the result to the caller.","title":"Architecture based on AWS Lambda"},{"location":"architecture/#architecture-based-on-amazon-sagemaker","text":"! the user or application sends an API request to the Amazon API Gateway. the request payload needs to contain the image or text information to be processed. Amazon API Gateway sends the request to AWS Lambda (invoke endpoint) function. 3. AWS Lambda calls Amazon SageMaker Endpoint, which performs the inference process in Amazon SageMaker and returns the inference result (usually JSON format data).","title":"Architecture based on Amazon SageMaker"},{"location":"cost/","text":"Cost Estimation You will be responsible for the cost of using each of the Amazon Cloud Technologies services when running the solution. As of May 2022, the main cost factors affecting the solution include Number of AWS Lambda calls AWS Lambda runtime Number of Amazon API Gateway calls Amazon API Gateway data output volume Amazon CloudWatch Logs storage volume Amazon Elastic Container Registry Storage Volume Amazon SageMaker Endpoint Node Instance Type Amazon SageMaker Endpoint Node Data Inputs Amazon SageMaker Endpoint Node Data Output Description The costs associated with Amazon SageMaker apply only to image super-resolution scenarios. You can check the Cost Estimates section corresponding to each API to see the deployment and actual usage costs for each API application. Name Cost Estimate General Text Recognition (Simplified Chinese) view General Text Recognition (Traditional Chinese) view Custom Template Text Recognition view Car license plate information recognition view Face Recognition view Face Similarity Comparison view Human Structured Attributes view Intelligent Human Image Segmentation view Image Similarity view Universal Object Recognition view pornography review view image super-resolution view text-similarity view","title":"Cost"},{"location":"cost/#cost-estimation","text":"You will be responsible for the cost of using each of the Amazon Cloud Technologies services when running the solution. As of May 2022, the main cost factors affecting the solution include Number of AWS Lambda calls AWS Lambda runtime Number of Amazon API Gateway calls Amazon API Gateway data output volume Amazon CloudWatch Logs storage volume Amazon Elastic Container Registry Storage Volume Amazon SageMaker Endpoint Node Instance Type Amazon SageMaker Endpoint Node Data Inputs Amazon SageMaker Endpoint Node Data Output Description The costs associated with Amazon SageMaker apply only to image super-resolution scenarios. You can check the Cost Estimates section corresponding to each API to see the deployment and actual usage costs for each API application. Name Cost Estimate General Text Recognition (Simplified Chinese) view General Text Recognition (Traditional Chinese) view Custom Template Text Recognition view Car license plate information recognition view Face Recognition view Face Similarity Comparison view Human Structured Attributes view Intelligent Human Image Segmentation view Image Similarity view Universal Object Recognition view pornography review view image super-resolution view text-similarity view","title":"Cost Estimation"},{"location":"deploy-add-delete-api/","text":"\u6dfb\u52a0\u6216\u5220\u9664AI\u5e94\u7528 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539AWS CloudFormation\u5806\u6808\u4e2d\u73b0\u6709\u8d44\u6e90\u7684\u5c5e\u6027\uff0c\u6dfb\u52a0\u65b0\u7684AI\u529f\u80fd\u6216\u5220\u9664\u5df2\u7ecf\u90e8\u7f72\u7684AI\u529f\u80fd\u3002 \u8bbf\u95ee AWS CloudFormation\u63a7\u5236\u53f0 \u3002 \u4ece\u5806\u6808\u5217\u8868\u4e2d\u9009\u62e9\u90e8\u7f72\u5b8c\u6210\u7684\u89e3\u51b3\u65b9\u6848\u6839\u5806\u6808\u3002 \u5728 \u5806\u6808\u8be6\u7ec6\u4fe1\u606f \u9875\u9762\uff0c\u9009\u62e9 \u66f4\u65b0 \u3002 \u5728 \u6307\u5b9a\u6a21\u677f \u9875\u9762\uff0c\u9009\u62e9 \u4f7f\u7528\u5f53\u524d\u6a21\u677f \uff0c\u7136\u540e\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728\u53c2\u6570\u90e8\u5206\uff0c\u66f4\u6539\u76f8\u5e94\u7684\u53c2\u6570\u4fe1\u606f\uff0c\u7136\u540e\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002\u4f8b\u5982\uff0c\u5982\u679c Custom Template OCR \u539f\u6765\u4e3ano\uff0c\u53ef\u4ee5\u66f4\u6539\u8bbe\u7f6e\u4e3ayes\uff0c\u4ece\u800c\u6dfb\u52a0 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b API\u529f\u80fd\u3002 \u5728 \u914d\u7f6e\u5806\u6808\u9009\u9879 \u9875\u9762\uff0c\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728 \u5ba1\u6838 \u9875\u9762\uff0c\u67e5\u770b\u5e76\u786e\u8ba4\u8bbe\u7f6e\u3002\u786e\u4fdd\u9009\u4e2d\u786e\u8ba4\u6a21\u677f\u5c06\u521b\u5efaAmazon Identity and Access Management\uff08IAM\uff09\u8d44\u6e90\u7684\u590d\u9009\u6846\u3002\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u786e\u8ba4\u66f4\u6539\uff0c\u5e76\u9009\u62e9 \u66f4\u65b0\u5806\u6808 \u3002","title":"\u66f4\u65b0CloudFormation\u5806\u6808"},{"location":"deploy-add-delete-api/#ai","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539AWS CloudFormation\u5806\u6808\u4e2d\u73b0\u6709\u8d44\u6e90\u7684\u5c5e\u6027\uff0c\u6dfb\u52a0\u65b0\u7684AI\u529f\u80fd\u6216\u5220\u9664\u5df2\u7ecf\u90e8\u7f72\u7684AI\u529f\u80fd\u3002 \u8bbf\u95ee AWS CloudFormation\u63a7\u5236\u53f0 \u3002 \u4ece\u5806\u6808\u5217\u8868\u4e2d\u9009\u62e9\u90e8\u7f72\u5b8c\u6210\u7684\u89e3\u51b3\u65b9\u6848\u6839\u5806\u6808\u3002 \u5728 \u5806\u6808\u8be6\u7ec6\u4fe1\u606f \u9875\u9762\uff0c\u9009\u62e9 \u66f4\u65b0 \u3002 \u5728 \u6307\u5b9a\u6a21\u677f \u9875\u9762\uff0c\u9009\u62e9 \u4f7f\u7528\u5f53\u524d\u6a21\u677f \uff0c\u7136\u540e\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728\u53c2\u6570\u90e8\u5206\uff0c\u66f4\u6539\u76f8\u5e94\u7684\u53c2\u6570\u4fe1\u606f\uff0c\u7136\u540e\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002\u4f8b\u5982\uff0c\u5982\u679c Custom Template OCR \u539f\u6765\u4e3ano\uff0c\u53ef\u4ee5\u66f4\u6539\u8bbe\u7f6e\u4e3ayes\uff0c\u4ece\u800c\u6dfb\u52a0 \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b API\u529f\u80fd\u3002 \u5728 \u914d\u7f6e\u5806\u6808\u9009\u9879 \u9875\u9762\uff0c\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u5728 \u5ba1\u6838 \u9875\u9762\uff0c\u67e5\u770b\u5e76\u786e\u8ba4\u8bbe\u7f6e\u3002\u786e\u4fdd\u9009\u4e2d\u786e\u8ba4\u6a21\u677f\u5c06\u521b\u5efaAmazon Identity and Access Management\uff08IAM\uff09\u8d44\u6e90\u7684\u590d\u9009\u6846\u3002\u9009\u62e9 \u4e0b\u4e00\u6b65 \u3002 \u786e\u8ba4\u66f4\u6539\uff0c\u5e76\u9009\u62e9 \u66f4\u65b0\u5806\u6808 \u3002","title":"\u6dfb\u52a0\u6216\u5220\u9664AI\u5e94\u7528"},{"location":"deploy-car-license-plate/","text":"\u8bc6\u522b\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u5883\u5185\u5e38\u89c1\u673a\u52a8\u8f66\u53f7\u724c\uff0c\u63d0\u53d6\u673a\u52a8\u8f66\u53f7\u724c\u4fe1\u606f\u4e2d\u7684\u5730\u533a\u7f16\u53f7\u548c\u8f66\u724c\u53f7\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u505c\u8f66\u573a\u3001\u5c0f\u533a\u81ea\u52a8\u8bc6\u522b\u8f66\u8f86\u53f7\u724c\u4fe1\u606f\uff0c\u6216\u8f66\u8f86\u8fdd\u7ae0\u4fe1\u606f\u68c0\u6d4b\u7b49\u573a\u666f\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u8f66\u724c\u5185\u5bb9 location JSON \u8bc6\u522b\u8f66\u724c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u8f66\u724c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185Float\u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u4eacC45678\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/car_license_plate\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 6 \u5206\u949f","title":"Car License Plate"},{"location":"deploy-car-license-plate/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u505c\u8f66\u573a\u3001\u5c0f\u533a\u81ea\u52a8\u8bc6\u522b\u8f66\u8f86\u53f7\u724c\u4fe1\u606f\uff0c\u6216\u8f66\u8f86\u8fdd\u7ae0\u4fe1\u606f\u68c0\u6d4b\u7b49\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-car-license-plate/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u8f66\u724c\u5185\u5bb9 location JSON \u8bc6\u522b\u8f66\u724c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u8f66\u724c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185Float\u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u4eacC45678\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 } ]","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-car-license-plate/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/car_license_plate\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/car_license_plate\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-car-license-plate/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CarLicensePlate \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-car-license-plate/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-car-license-plate/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8f66\u724c\u4fe1\u606f\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CarLicensePlate \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 6 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-custom-ocr/","text":"\u5ba2\u6237\u53ef\u81ea\u5b9a\u4e49OCR\u6a21\u7248\uff0c\u63d0\u53d6\u5361\u8bc1\u7968\u636e\u4e2d\u7ed3\u6784\u5316\u6587\u5b57\u4fe1\u606f\uff0c\u5e76\u4ee5\u952e\u503c\u5bf9\u5e94\u5173\u7cfb\u7684\u5f62\u5f0f\u5c55\u73b0\u7ed3\u679c\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u5361\u8bc1\u7968\u636e\u7c7b\u56fe\u7247\u7684\u7ed3\u6784\u5316\u8bc6\u522b\u573a\u666f\uff0c\u5982\u7269\u6d41\u5355\u636e\u3001\u53d1\u7968\u3001\u8425\u4e1a\u6267\u7167\u3001\u884c\u7a0b\u5355\u3001\u706b\u8f66\u7968\u7b49\u3002 API\u53c2\u6570\u8bf4\u660e \u589e\u52a0\u6a21\u7248 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e type String \u56fa\u5b9a\u4e3aadd template List \u6bcf\u4e2a\u5143\u7d20\u4e3a\u4e00\u4e2a\u5f85\u63d0\u53d6\u533a\u57df\u5750\u6807\u53ca\u5176\u540d\u79f0 \u8bf7\u6c42 Body \u793a\u4f8b { \"type\": \"add\", \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\", \"template\": [ [ [[421, 465], [909, 471], [911, 503], [419, 495]], \"\u540d\u79f0\" ], [ [[419, 495], [911, 503], [909, 533], [415, 527]], \"\u8bc6\u522b\u53f7\" ], [ [[345, 339], [595, 343], [583, 397], [341, 385]], \"\u53d1\u7968\u53f7\" ] ] } { \"type\": \"add\", \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\", \"template\": [ [ [[421, 465], [909, 471], [911, 503], [419, 495]], \"\u540d\u79f0\" ], [ [[419, 495], [911, 503], [909, 533], [415, 527]], \"\u8bc6\u522b\u53f7\" ], [ [[345, 339], [595, 343], [583, 397], [341, 385]], \"\u53d1\u7968\u53f7\" ] ] } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e template_id String \u6a21\u7248\u7684ID \u8fd4\u56de\u793a\u4f8b { \"template_id\": \"\u6a21\u7248\u7684ID\", } \u5220\u9664\u6a21\u7248 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e template_id List \u5df2\u5b58\u5728\u6a21\u7248\u7684id type String \u56fa\u5b9a\u4e3adel \u8bf7\u6c42 Body \u793a\u4f8b { \"type\": \"del\", \"template_id\": \"\u5df2\u5b58\u5728\u6a21\u7248ID\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e template_id String \u5df2\u5220\u9664\u6a21\u7248\u7684ID \u8fd4\u56de\u793a\u4f8b { \"template_id\": \"\u5df2\u5220\u9664\u6a21\u7248\u7684ID\", } \u5217\u51fa\u6240\u6709\u6a21\u7248 HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e type String \u56fa\u5b9a\u4e3alist \u8bf7\u6c42 Body \u793a\u4f8b { \"type\": \"list\", } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e template_id_list List \u5df2\u5b58\u5728\u6a21\u7248\u7684\u5217\u8868 \u8fd4\u56de\u793a\u4f8b { \"template_id_list\": [\"\u5df2\u5b58\u5728\u6a21\u7248\u7684\u5217\u8868\"], } \u5185\u5bb9\u8bc6\u522b HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e type String \u56fa\u5b9a\u4e3aquery template_id String \u5df2\u5b58\u5728\u7684\u6a21\u7248ID \u8bf7\u6c42 Body \u793a\u4f8b { \"template_id\": \"\u5df2\u5b58\u5728\u7684\u6a21\u7248ID\", \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e key String \u5b57\u6bb5\u540d value String \u63d0\u53d6\u5230\u7684\u503c score Float \u7f6e\u4fe1\u5ea6 \u8fd4\u56de\u793a\u4f8b [ { \"key\": \"\u540d\u79f0\", \"value\": \"\u4e9a\u9a6c\u900a\u901a\u6280\u672f\u670d\u52a1(\u5317\u4eac)\u6709\u9650\u516c\u53f8\", \"score\": 97.98 }, { \"key\": \"\u8bc6\u522b\u53f7\", \"value\": \"91110116592334142D\", \"score\": 99.62 }, { \"key\": \"\u53d1\u7968\u53f7\", \"value\": \"4403212222\", \"score\": 96.58 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 20 \u5206\u949f","title":"Custom Template OCR"},{"location":"deploy-custom-ocr/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u5361\u8bc1\u7968\u636e\u7c7b\u56fe\u7247\u7684\u7ed3\u6784\u5316\u8bc6\u522b\u573a\u666f\uff0c\u5982\u7269\u6d41\u5355\u636e\u3001\u53d1\u7968\u3001\u8425\u4e1a\u6267\u7167\u3001\u884c\u7a0b\u5355\u3001\u706b\u8f66\u7968\u7b49\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-custom-ocr/#api","text":"","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-custom-ocr/#_2","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e type String \u56fa\u5b9a\u4e3aadd template List \u6bcf\u4e2a\u5143\u7d20\u4e3a\u4e00\u4e2a\u5f85\u63d0\u53d6\u533a\u57df\u5750\u6807\u53ca\u5176\u540d\u79f0 \u8bf7\u6c42 Body \u793a\u4f8b { \"type\": \"add\", \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\", \"template\": [ [ [[421, 465], [909, 471], [911, 503], [419, 495]], \"\u540d\u79f0\" ], [ [[419, 495], [911, 503], [909, 533], [415, 527]], \"\u8bc6\u522b\u53f7\" ], [ [[345, 339], [595, 343], [583, 397], [341, 385]], \"\u53d1\u7968\u53f7\" ] ] } { \"type\": \"add\", \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\", \"template\": [ [ [[421, 465], [909, 471], [911, 503], [419, 495]], \"\u540d\u79f0\" ], [ [[419, 495], [911, 503], [909, 533], [415, 527]], \"\u8bc6\u522b\u53f7\" ], [ [[345, 339], [595, 343], [583, 397], [341, 385]], \"\u53d1\u7968\u53f7\" ] ] } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e template_id String \u6a21\u7248\u7684ID \u8fd4\u56de\u793a\u4f8b { \"template_id\": \"\u6a21\u7248\u7684ID\", }","title":"\u589e\u52a0\u6a21\u7248"},{"location":"deploy-custom-ocr/#_3","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e template_id List \u5df2\u5b58\u5728\u6a21\u7248\u7684id type String \u56fa\u5b9a\u4e3adel \u8bf7\u6c42 Body \u793a\u4f8b { \"type\": \"del\", \"template_id\": \"\u5df2\u5b58\u5728\u6a21\u7248ID\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e template_id String \u5df2\u5220\u9664\u6a21\u7248\u7684ID \u8fd4\u56de\u793a\u4f8b { \"template_id\": \"\u5df2\u5220\u9664\u6a21\u7248\u7684ID\", }","title":"\u5220\u9664\u6a21\u7248"},{"location":"deploy-custom-ocr/#_4","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e type String \u56fa\u5b9a\u4e3alist \u8bf7\u6c42 Body \u793a\u4f8b { \"type\": \"list\", } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e template_id_list List \u5df2\u5b58\u5728\u6a21\u7248\u7684\u5217\u8868 \u8fd4\u56de\u793a\u4f8b { \"template_id_list\": [\"\u5df2\u5b58\u5728\u6a21\u7248\u7684\u5217\u8868\"], }","title":"\u5217\u51fa\u6240\u6709\u6a21\u7248"},{"location":"deploy-custom-ocr/#_5","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e type String \u56fa\u5b9a\u4e3aquery template_id String \u5df2\u5b58\u5728\u7684\u6a21\u7248ID \u8bf7\u6c42 Body \u793a\u4f8b { \"template_id\": \"\u5df2\u5b58\u5728\u7684\u6a21\u7248ID\", \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e key String \u5b57\u6bb5\u540d value String \u63d0\u53d6\u5230\u7684\u503c score Float \u7f6e\u4fe1\u5ea6 \u8fd4\u56de\u793a\u4f8b [ { \"key\": \"\u540d\u79f0\", \"value\": \"\u4e9a\u9a6c\u900a\u901a\u6280\u672f\u670d\u52a1(\u5317\u4eac)\u6709\u9650\u516c\u53f8\", \"score\": 97.98 }, { \"key\": \"\u8bc6\u522b\u53f7\", \"value\": \"91110116592334142D\", \"score\": 99.62 }, { \"key\": \"\u53d1\u7968\u53f7\", \"value\": \"4403212222\", \"score\": 96.58 } ]","title":"\u5185\u5bb9\u8bc6\u522b"},{"location":"deploy-custom-ocr/#_6","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-custom-ocr/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 CustomOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-custom-ocr/#_7","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-custom-ocr/#_8","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 CustomOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 20 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-face-comparison/","text":"\u901a\u8fc7\u4e24\u5f20\u4eba\u8138\u56fe\u7247\u4e2d\u7684\u7279\u5f81\u5411\u91cf\u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb(Euclidean Distance)\uff0c\u5e76\u8f6c\u5316\u4e3a\u7f6e\u4fe1\u5ea6\uff0c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6bd4\u8f83\uff0c\u4ece\u800c\u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u4eba\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u5ba2\u6237\u8eab\u4efd\u9a8c\u8bc1\u3001\u7167\u7247\u5206\u7c7b\u7b49\u573a\u666f\uff0c\u4f8b\u5982\uff1a\u81ea\u52a9\u9152\u5e97\u5165\u4f4f\u3001\u4eba\u5458\u62a5\u5230\u3001\u6821\u56ed\u5165\u53e3\u901a\u884c\u3001\u76f8\u518c\u5236\u4f5c\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e Faces List \u56fe\u50cf\u4e2d\u627e\u5230\u7684\u4eba\u8138\u5217\u8868 +face_hash List \u4e00\u4e2a\u5177\u6709768\u4e2a\u5143\u7d20\u7684List\uff0c\u4e3a768\u7ef4\u7684\u4eba\u8138\u5411\u91cf +BoundingBox JSON \u4eba\u8138\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u76f8\u5bf9\u5168\u753b\u9762\u7684\u767e\u5206\u6bd4 +Confidence Float \u8bc6\u522b\u4eba\u8138\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185Float\u578b\u6570\u503c FaceModelVersion String \u5f53\u524d\u6a21\u578b\u7248\u672c\u53f7 \u8fd4\u56de\u793a\u4f8b { \"Faces\": [ { \"BoundingBox\": { \"Width\": 0.057923507690429685, \"Height\": 0.10426715253778117, \"Left\": 0.5258836364746093, \"Top\": 0.40569204600369024 }, \"Confidence\": 0.8736226558685303, \"face_hash\": [64.8125, -86.8125, -9.84375, 12.390625, 161.625, ..., 4.8046875 ] }, { \"BoundingBox\": { \"Width\": 0.04332921028137207, \"Height\": 0.10577215250117152, \"Left\": 0.1566245174407959, \"Top\": 0.6526811308355788 }, \"Confidence\": 0.8055327534675598, \"face_hash\": [61.21875, -33.84375, -36.71875, 70.625, 110.125, ..., -28.421875 ] } ], \"FaceModelVersion\": \"1.2.0\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_comparison\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 6 \u5206\u949f","title":"Face Comparison"},{"location":"deploy-face-comparison/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u5ba2\u6237\u8eab\u4efd\u9a8c\u8bc1\u3001\u7167\u7247\u5206\u7c7b\u7b49\u573a\u666f\uff0c\u4f8b\u5982\uff1a\u81ea\u52a9\u9152\u5e97\u5165\u4f4f\u3001\u4eba\u5458\u62a5\u5230\u3001\u6821\u56ed\u5165\u53e3\u901a\u884c\u3001\u76f8\u518c\u5236\u4f5c\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-face-comparison/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e Faces List \u56fe\u50cf\u4e2d\u627e\u5230\u7684\u4eba\u8138\u5217\u8868 +face_hash List \u4e00\u4e2a\u5177\u6709768\u4e2a\u5143\u7d20\u7684List\uff0c\u4e3a768\u7ef4\u7684\u4eba\u8138\u5411\u91cf +BoundingBox JSON \u4eba\u8138\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u76f8\u5bf9\u5168\u753b\u9762\u7684\u767e\u5206\u6bd4 +Confidence Float \u8bc6\u522b\u4eba\u8138\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185Float\u578b\u6570\u503c FaceModelVersion String \u5f53\u524d\u6a21\u578b\u7248\u672c\u53f7 \u8fd4\u56de\u793a\u4f8b { \"Faces\": [ { \"BoundingBox\": { \"Width\": 0.057923507690429685, \"Height\": 0.10426715253778117, \"Left\": 0.5258836364746093, \"Top\": 0.40569204600369024 }, \"Confidence\": 0.8736226558685303, \"face_hash\": [64.8125, -86.8125, -9.84375, 12.390625, 161.625, ..., 4.8046875 ] }, { \"BoundingBox\": { \"Width\": 0.04332921028137207, \"Height\": 0.10577215250117152, \"Left\": 0.1566245174407959, \"Top\": 0.6526811308355788 }, \"Confidence\": 0.8055327534675598, \"face_hash\": [61.21875, -33.84375, -36.71875, 70.625, 110.125, ..., -28.421875 ] } ], \"FaceModelVersion\": \"1.2.0\" }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-face-comparison/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_comparison\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_comparison\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-face-comparison/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceComparison \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-face-comparison/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-face-comparison/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u76f8\u4f3c\u5ea6\u6bd4\u5bf9 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceComparison \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 6 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-face-detection/","text":"\u8bc6\u522b\u4eba\u8138\u9762\u90e8\u7279\u5f81\uff0c\u5c06\u68c0\u6d4b\u5230\u7684\u4e94\u5b98\u4e0e\u8f6e\u5ed3\u5173\u952e\u70b9\u4fe1\u606f\u6620\u5c04\u523064\u4e2a\u77e2\u91cf\u5750\u6807\u4e0a\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u6444\u50cf\u5934\u76d1\u63a7\u3001\u4eba\u8138\u7279\u5f81\u5206\u6790\u3001\u4e92\u52a8\u8425\u9500\u7b49\u591a\u79cd\u573a\u666f\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e Faces List \u56fe\u50cf\u4e2d\u627e\u5230\u7684\u4eba\u8138\u5217\u8868 +landmark_106 List 106\u4e2a\u5173\u952e\u70b9\u5750\u6807 ++x Int \u5173\u952e\u70b9\u8ddd\u5de6\u8fb9\u7f18\u7684\u50cf\u7d20\u6570 ++y Int \u5173\u952e\u70b9\u8ddd\u4e0a\u8fb9\u7f18\u7684\u50cf\u7d20\u6570 +gender String \u6027\u522b +age String \u5e74\u9f84 +BoundingBox JSON \u4eba\u8138\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u76f8\u5bf9\u5168\u753b\u9762\u7684\u767e\u5206\u6bd4 +Confidence Float \u8bc6\u522b\u4eba\u8138\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185Float\u578b\u6570\u503c FaceModelVersion String \u5f53\u524d\u6a21\u578b\u7248\u672c\u53f7 \u8fd4\u56de\u793a\u4f8b { \"Faces\": [ { \"BoundingBox\": { \"Width\": 0.057923507690429685, \"Height\": 0.10426715253778117, \"Left\": 0.5258836364746093, \"Top\": 0.40569204600369024 }, \"Confidence\": 0.8736226558685303, \"landmark_106\": [ {\"x\": 894, \"y\": 542}, {\"x\": 846, \"y\": 461}, ... ], \"gender\": \"male\", \"age\": 27 }, { \"BoundingBox\": { \"Width\": 0.04332921028137207, \"Height\": 0.10577215250117152, \"Left\": 0.1566245174407959, \"Top\": 0.6526811308355788 }, \"Confidence\": 0.8055327534675598, \"landmark_106\": [ {\"x\": 306, \"y\": 802}, {\"x\": 254, \"y\": 734}, ... ], \"gender\": \"male\", \"age\": 35 } ], \"FaceModelVersion\": \"1.2.0\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 6 \u5206\u949f","title":"Face Detection"},{"location":"deploy-face-detection/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u6444\u50cf\u5934\u76d1\u63a7\u3001\u4eba\u8138\u7279\u5f81\u5206\u6790\u3001\u4e92\u52a8\u8425\u9500\u7b49\u591a\u79cd\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-face-detection/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e Faces List \u56fe\u50cf\u4e2d\u627e\u5230\u7684\u4eba\u8138\u5217\u8868 +landmark_106 List 106\u4e2a\u5173\u952e\u70b9\u5750\u6807 ++x Int \u5173\u952e\u70b9\u8ddd\u5de6\u8fb9\u7f18\u7684\u50cf\u7d20\u6570 ++y Int \u5173\u952e\u70b9\u8ddd\u4e0a\u8fb9\u7f18\u7684\u50cf\u7d20\u6570 +gender String \u6027\u522b +age String \u5e74\u9f84 +BoundingBox JSON \u4eba\u8138\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u76f8\u5bf9\u5168\u753b\u9762\u7684\u767e\u5206\u6bd4 +Confidence Float \u8bc6\u522b\u4eba\u8138\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185Float\u578b\u6570\u503c FaceModelVersion String \u5f53\u524d\u6a21\u578b\u7248\u672c\u53f7 \u8fd4\u56de\u793a\u4f8b { \"Faces\": [ { \"BoundingBox\": { \"Width\": 0.057923507690429685, \"Height\": 0.10426715253778117, \"Left\": 0.5258836364746093, \"Top\": 0.40569204600369024 }, \"Confidence\": 0.8736226558685303, \"landmark_106\": [ {\"x\": 894, \"y\": 542}, {\"x\": 846, \"y\": 461}, ... ], \"gender\": \"male\", \"age\": 27 }, { \"BoundingBox\": { \"Width\": 0.04332921028137207, \"Height\": 0.10577215250117152, \"Left\": 0.1566245174407959, \"Top\": 0.6526811308355788 }, \"Confidence\": 0.8055327534675598, \"landmark_106\": [ {\"x\": 306, \"y\": 802}, {\"x\": 254, \"y\": 734}, ... ], \"gender\": \"male\", \"age\": 35 } ], \"FaceModelVersion\": \"1.2.0\" }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-face-detection/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/face_detection\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/face_detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-face-detection/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 FaceDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-face-detection/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-face-detection/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u4eba\u8138\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 FaceDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 6 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-general-ocr-traditional/","text":"\u901a\u7528\u573a\u666f\u6587\u5b57\u63d0\u53d6\uff0c\u901a\u8fc7\u8fd4\u56de\u56fe\u7247\u4e2d\u6587\u5b57\u5185\u5bb9\u4e0e\u5750\u6807\u4f4d\u7f6e\u7b49\u4fe1\u606f\uff0c\u4fbf\u4e8e\u5ba2\u6237\u8fdb\u884c\u6bd4\u5bf9\u6216\u7ed3\u6784\u5316\u64cd\u4f5c\u3002\u652f\u6301\u8bc6\u522b \u7e41\u4f53\u4e2d\u6587 \u3001\u82f1\u6587\u3001\u6570\u5b57\u548c\u5e38\u7528\u7b26\u53f7\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u9ad8\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr_traditional\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"General OCR (Traditional Chinese)"},{"location":"deploy-general-ocr-traditional/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u9ad8\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-general-ocr-traditional/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185 Float \u578b\u6570\u503c \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-general-ocr-traditional/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr_traditional\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr_traditional\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-general-ocr-traditional/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCRTraditional \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-general-ocr-traditional/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-general-ocr-traditional/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b\uff08\u7e41\u4f53\u4e2d\u6587\uff09 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCRTraditional \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-general-ocr/","text":"\u901a\u7528\u573a\u666f\u6587\u5b57\u63d0\u53d6\uff0c\u901a\u8fc7\u8fd4\u56de\u5728\u56fe\u7247\u4e2d\u6587\u5b57\u5185\u5bb9\u4e0e\u5750\u6807\u4f4d\u7f6e\u7b49\u4fe1\u606f\uff0c\u4fbf\u4e8e\u5ba2\u6237\u8fdb\u884c\u6bd4\u5bf9\u6216\u7ed3\u6784\u5316\u64cd\u4f5c\u3002\u652f\u6301\u8bc6\u522b \u7b80\u4f53\u4e2d\u6587 \u3001\u82f1\u6587\u3001\u6570\u5b57\u548c\u5e38\u7528\u7b26\u53f7\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u9ad8\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u3002 \u56fe\u50cfURL\u5730\u5740\u3002\u652f\u6301HTTP/HTTPS\u548cS3\u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp\uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00\u3002 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\u3002 \u8bf7\u6c42\u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9\u3002 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c\u3002 score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185Float\u578b\u6570\u503c\u3002 \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ] \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30\u793a\u4f8b1 \u4ee5\u7531\u897f\u4e91\u6570\u636e\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5b81\u590f\uff09\u533a\u57df\uff08cn-northwest-1\uff09\u4e3a\u4f8b\uff0c\u5904\u74061MB\u56fe\u50cf\uff0c\u5904\u7406\u65f6\u95f41\u79d2 \u4f7f\u7528\u672c\u65b9\u6848\u5904\u7406\u6b64\u56fe\u50cf\u6240\u9700\u7684\u6210\u672c\u8d39\u7528\u5982\u4e0b\u8868\u6240\u793a\uff1a \u670d\u52a1 \u7528\u91cf \u8d39\u7528 AWS Lambda \u8c03\u7528\u767e\u4e07\u6b21 \u00a51.36 AWS Lambda \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 \u00a5453.9 Amazon API Gateway \u8c03\u7528\u767e\u4e07\u6b21 \u00a528.94 Amazon API Gateway \u6570\u636e\u8f93\u51fa\u4ee5\u6bcf\u6b2110KB\u8ba1\u7b97\uff0c\u00a50.933/GB \u00a59.33 Amazon CloudWatch Logs \u6bcf\u6b2110KB\uff0c\u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c\u6bcf\u6708\u6bcfGB\u00a50.69 \u00a50.35 \u5408\u8ba1 \u00a5556.16 \u6210\u672c\u9884\u4f30\u793a\u4f8b2 \u4ee5\u7f8e\u56fd\u4e1c\u90e8\uff08\u4fc4\u4ea5\u4fc4\u5dde\uff09\u533a\u57df\uff08us-east-2\uff09\u4e3a\u4f8b\uff0c\u5904\u74061MB\u56fe\u50cf\uff0c\u5904\u7406\u65f6\u95f41\u79d2 \u4f7f\u7528\u672c\u65b9\u6848\u5904\u7406\u6b64\u56fe\u50cf\u6240\u9700\u7684\u6210\u672c\u8d39\u7528\u5982\u4e0b\u8868\u6240\u793a\uff1a \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda \u8c03\u7528\u767e\u4e07\u6b21 $0.20 Amazon Lambda \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 $66.7 Amazon API Gateway \u8c03\u7528\u767e\u4e07\u6b21 $3.5 Amazon API Gateway \u6570\u636e\u8f93\u51fa\u4ee5\u6bcf\u6b2110KB\u8ba1\u7b97\uff0c$0.09/GB $0.9 Amazon CloudWatch Logs \u6bcf\u6b2110KB\uff0c$0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c\u6bcf\u6708\u6bcfGB$0.1 $0.05 \u5408\u8ba1 $76.35 \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"General OCR (Simplified Chinese)"},{"location":"deploy-general-ocr/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7eb8\u8d28\u6587\u6863\u7535\u5b50\u5316\uff0c\u8bc1\u4ef6\u8bc6\u522b\uff0c\u5185\u5bb9\u5ba1\u6838\u7b49\u591a\u79cd\u573a\u666f\uff0c\u5927\u5e45\u63d0\u9ad8\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-general-ocr/#api","text":"HTTP \u65b9\u6cd5: POST \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u3002 \u56fe\u50cfURL\u5730\u5740\u3002\u652f\u6301HTTP/HTTPS\u548cS3\u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp\uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00\u3002 \u8fdb\u884cBase64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\u3002 \u8bf7\u6c42\u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e words String \u8bc6\u522b\u6587\u672c\u5b57\u7b26\u4e32\u5185\u5bb9\u3002 location JSON \u8bc6\u522b\u6587\u672c\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542b top\uff0cleft\uff0cwidth\uff0cheight\u7684\u6574\u6570\u503c\u3002 score Float \u8bc6\u522b\u6587\u672c\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u4e3a0\u52301\u533a\u95f4\u5185Float\u578b\u6570\u503c\u3002 \u8fd4\u56de\u793a\u4f8b [ { \"words\": \"\u9999\u6e2f\u6c38\u4e45\u6027\u5c45\u6c11\u8eab\u4efd\u8b49\", \"location\": { \"top\": 18, \"left\": 148, \"width\": 169, \"height\": 17 }, \"score\": 0.9923796653747559 }, { \"words\": \"HONG KONG PERMANENTIDENTITYCARD\", \"location\": { \"top\": 36, \"left\": 71, \"width\": 321, \"height\": 17 }, \"score\": 0.9825196266174316 } ]","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-general-ocr/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/general_ocr\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/general_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-general-ocr/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 GeneralOCR \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-general-ocr/#1","text":"\u4ee5\u7531\u897f\u4e91\u6570\u636e\u8fd0\u8425\u7684\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u4e2d\u56fd\uff08\u5b81\u590f\uff09\u533a\u57df\uff08cn-northwest-1\uff09\u4e3a\u4f8b\uff0c\u5904\u74061MB\u56fe\u50cf\uff0c\u5904\u7406\u65f6\u95f41\u79d2 \u4f7f\u7528\u672c\u65b9\u6848\u5904\u7406\u6b64\u56fe\u50cf\u6240\u9700\u7684\u6210\u672c\u8d39\u7528\u5982\u4e0b\u8868\u6240\u793a\uff1a \u670d\u52a1 \u7528\u91cf \u8d39\u7528 AWS Lambda \u8c03\u7528\u767e\u4e07\u6b21 \u00a51.36 AWS Lambda \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 \u00a5453.9 Amazon API Gateway \u8c03\u7528\u767e\u4e07\u6b21 \u00a528.94 Amazon API Gateway \u6570\u636e\u8f93\u51fa\u4ee5\u6bcf\u6b2110KB\u8ba1\u7b97\uff0c\u00a50.933/GB \u00a59.33 Amazon CloudWatch Logs \u6bcf\u6b2110KB\uff0c\u00a56.228/GB \u00a562.28 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c\u6bcf\u6708\u6bcfGB\u00a50.69 \u00a50.35 \u5408\u8ba1 \u00a5556.16","title":"\u6210\u672c\u9884\u4f30\u793a\u4f8b1"},{"location":"deploy-general-ocr/#2","text":"\u4ee5\u7f8e\u56fd\u4e1c\u90e8\uff08\u4fc4\u4ea5\u4fc4\u5dde\uff09\u533a\u57df\uff08us-east-2\uff09\u4e3a\u4f8b\uff0c\u5904\u74061MB\u56fe\u50cf\uff0c\u5904\u7406\u65f6\u95f41\u79d2 \u4f7f\u7528\u672c\u65b9\u6848\u5904\u7406\u6b64\u56fe\u50cf\u6240\u9700\u7684\u6210\u672c\u8d39\u7528\u5982\u4e0b\u8868\u6240\u793a\uff1a \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda \u8c03\u7528\u767e\u4e07\u6b21 $0.20 Amazon Lambda \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 $66.7 Amazon API Gateway \u8c03\u7528\u767e\u4e07\u6b21 $3.5 Amazon API Gateway \u6570\u636e\u8f93\u51fa\u4ee5\u6bcf\u6b2110KB\u8ba1\u7b97\uff0c$0.09/GB $0.9 Amazon CloudWatch Logs \u6bcf\u6b2110KB\uff0c$0.50/GB $5 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c\u6bcf\u6708\u6bcfGB$0.1 $0.05 \u5408\u8ba1 $76.35","title":"\u6210\u672c\u9884\u4f30\u793a\u4f8b2"},{"location":"deploy-general-ocr/#_3","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 GeneralOCR \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-human-attribute-recognition/","text":"\u8bc6\u522b\u8f93\u5165\u56fe\u7247\u4e2d\u7684\u4eba\u4f53\u533a\u57df\uff0c\u5e76\u8fd4\u56de\u6bcf\u4e2a\u533a\u57df\u4eba\u4f53\u4f4d\u7f6e\u5750\u6807\u53ca\u5c5e\u6027\u5206\u6790\uff0c\u5982\u6027\u522b\u3001\u5e74\u9f84\u3001\u670d\u9970\u7b4916\u79cd\u5c5e\u6027\u7684\u8bed\u4e49\u4fe1\u606f\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u667a\u6167\u5b89\u9632\u3001\u667a\u6167\u96f6\u552e\u3001\u884c\u4eba\u641c\u7d22\u7b49\u573a\u666f\u3002 \u5c5e\u6027\u8bf4\u660e \u540d\u79f0 \u8bed\u4e49\u503c \u4e0a\u8eab\u670d\u9970 \u77ed\u8896\u3001\u957f\u8896 \u4e0b\u8eab\u670d\u9970 \u77ed\u88e4/\u88d9\u3001\u957f\u88e4/\u88d9 \u4e0a\u8eab\u670d\u9970\u7eb9\u7406 \u56fe\u6848\u3001\u7eaf\u8272\u3001\u683c\u5b50/\u6761\u7eb9 \u80cc\u5305 \u65e0\u5305\u3001\u6709\u5305 \u662f\u5426\u6234\u773c\u955c \u65e0\u3001\u6709 \u662f\u5426\u6234\u5e3d\u5b50 \u65e0\u3001\u6709 \u4eba\u4f53\u671d\u5411 \u6b63\u9762\u3001\u80cc\u9762\u3001\u5de6\u9762\u3001\u53f3\u9762 \u4e0a\u65b9\u622a\u65ad \u65e0\u3001\u6709 \u4e0b\u65b9\u622a\u65ad \u65e0\u3001\u6709 \u906e\u6321\u60c5\u51b5 \u65e0\u3001\u8f7b\u3001\u91cd \u662f\u5426\u6234\u53e3\u7f69 \u65e0\u3001\u6709 \u6027\u522b \u7537\u3001\u5973 \u5e74\u9f84 \u5e7c\u513f\u3001\u9752\u5c11\u5e74\u3001\u4e2d\u5e74\u3001\u8001\u5e74 \u5438\u70df \u65e0\u3001\u6709 \u7535\u8bdd \u65e0\u3001\u6709 \u62ff\u4e1c\u897f \u65e0\u3001\u6709 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e Labels List \u56fe\u50cf\u4e2d\u627e\u5230\u7684\u4eba\u4f53\u5217\u8868 +upper_wear Dict \u77ed\u8896\u3001\u957f\u8896 +upper_wear_texture Dict \u56fe\u6848\u3001\u7eaf\u8272\u3001\u6761\u7eb9/\u683c\u5b50 +lower_wear Dict \u77ed\u88e4/\u88d9\u3001\u957f\u88e4/\u88d9 +glasses Dict \u6709\u773c\u955c\u3001\u65e0\u773c\u955c +bag Dict \u6709\u80cc\u5305\u3001\u65e0\u80cc\u5305 +headwear Dict \u6709\u5e3d\u3001\u65e0\u5e3d +orientation Dict \u5de6\u4fa7\u9762\u3001\u80cc\u9762\u3001\u6b63\u9762\u3001\u53f3\u4fa7\u9762 +upper_cut Dict \u6709\u622a\u65ad\u3001\u65e0\u622a\u65ad +lower_cut Dict \u6709\u622a\u65ad\u3001\u65e0\u622a\u65ad +occlusion Dict \u65e0\u906e\u6321\u3001\u8f7b\u5ea6\u906e\u6321\u3001\u91cd\u5ea6\u906e\u6321 +face_mask Dict \u6234\u53e3\u7f69\u3001\u65e0\u53e3\u7f69 +gender Dict \u7537\u6027\u3001\u5973\u6027 +age Dict \u5e7c\u513f\u3001\u9752\u5c11\u5e74\u3001\u4e2d\u5e74\u3001\u8001\u5e74 +smoke Dict \u5438\u70df\u3001\u672a\u5438\u70df +cellphone Dict \u4f7f\u7528\u624b\u673a\u3001\u672a\u4f7f\u7528\u624b\u673a +carrying_item Dict \u6709\u624b\u63d0\u7269\u3001\u65e0\u624b\u63d0\u7269 +BoundingBox Dict \u4eba\u4f53\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u76f8\u5bf9\u5168\u753b\u9762\u7684\u767e\u5206\u6bd4 LabelModelVersion String \u5f53\u524d\u6a21\u578b\u7248\u672c\u53f7 \u8fd4\u56de\u793a\u4f8b { \"Labels\": [ { \"upper_wear\": { \"\u77ed\u8896\": 0.01, \"\u957f\u8896\": 99.99 }, \"upper_wear_texture\": { \"\u56fe\u6848\": 0, \"\u7eaf\u8272\": 99.55, \"\u6761\u7eb9/\u683c\u5b50\": 0.45 }, \"lower_wear\": { \"\u77ed\u88e4/\u88d9\": 0.15, \"\u957f\u88e4/\u88d9\": 99.85 }, \"glasses\": { \"\u6709\u773c\u955c\": 57.74, \"\u65e0\u773c\u955c\": 42.26 }, \"bag\": { \"\u6709\u80cc\u5305\": 0.69, \"\u65e0\u80cc\u5305\": 99.31 }, \"headwear\": { \"\u6709\u5e3d\": 97.02, \"\u65e0\u5e3d\": 2.98 }, \"orientation\": { \"\u5de6\u4fa7\u9762\": 99.99, \"\u80cc\u9762\": 0, \"\u6b63\u9762\": 0, \"\u53f3\u4fa7\u9762\": 0.01 }, \"upper_cut\": { \"\u6709\u622a\u65ad\": 0, \"\u65e0\u622a\u65ad\": 100 }, \"lower_cut\": { \"\u65e0\u622a\u65ad\": 0.18, \"\u6709\u622a\u65ad\": 99.82 }, \"occlusion\": { \"\u65e0\u906e\u6321\": 100, \"\u91cd\u5ea6\u906e\u6321\": 0, \"\u8f7b\u5ea6\u906e\u6321\": 0 }, \"face_mask\": { \"\u65e0\u53e3\u7f69\": 100, \"\u6234\u53e3\u7f69\": 0 }, \"gender\": { \"\u7537\u6027\": 100, \"\u5973\u6027\": 0 }, \"age\": { \"\u5e7c\u513f\": 0, \"\u9752\u5c11\u5e74\": 100, \"\u4e2d\u5e74\": 0, \"\u8001\u5e74\": 0 }, \"smoke\": { \"\u5438\u70df\": 0, \"\u672a\u5438\u70df\": 100 }, \"cellphone\": { \"\u4f7f\u7528\u624b\u673a\": 0, \"\u672a\u4f7f\u7528\u624b\u673a\": 100 }, \"carrying_item\": { \"\u6709\u624b\u63d0\u7269\": 0.03, \"\u65e0\u624b\u63d0\u7269\": 99.97 }, \"BoundingBox\": { \"Width\": 0.11781848725818456, \"Height\": 0.43450208474661556, \"Left\": 0.5310931977771577, \"Top\": 0.45263674786982644 } }, ... ], \"LabelModelVersion\": \"1.2.0\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanAttributeRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanAttributeRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"Human Attribute Recognition"},{"location":"deploy-human-attribute-recognition/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u667a\u6167\u5b89\u9632\u3001\u667a\u6167\u96f6\u552e\u3001\u884c\u4eba\u641c\u7d22\u7b49\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-human-attribute-recognition/#_2","text":"\u540d\u79f0 \u8bed\u4e49\u503c \u4e0a\u8eab\u670d\u9970 \u77ed\u8896\u3001\u957f\u8896 \u4e0b\u8eab\u670d\u9970 \u77ed\u88e4/\u88d9\u3001\u957f\u88e4/\u88d9 \u4e0a\u8eab\u670d\u9970\u7eb9\u7406 \u56fe\u6848\u3001\u7eaf\u8272\u3001\u683c\u5b50/\u6761\u7eb9 \u80cc\u5305 \u65e0\u5305\u3001\u6709\u5305 \u662f\u5426\u6234\u773c\u955c \u65e0\u3001\u6709 \u662f\u5426\u6234\u5e3d\u5b50 \u65e0\u3001\u6709 \u4eba\u4f53\u671d\u5411 \u6b63\u9762\u3001\u80cc\u9762\u3001\u5de6\u9762\u3001\u53f3\u9762 \u4e0a\u65b9\u622a\u65ad \u65e0\u3001\u6709 \u4e0b\u65b9\u622a\u65ad \u65e0\u3001\u6709 \u906e\u6321\u60c5\u51b5 \u65e0\u3001\u8f7b\u3001\u91cd \u662f\u5426\u6234\u53e3\u7f69 \u65e0\u3001\u6709 \u6027\u522b \u7537\u3001\u5973 \u5e74\u9f84 \u5e7c\u513f\u3001\u9752\u5c11\u5e74\u3001\u4e2d\u5e74\u3001\u8001\u5e74 \u5438\u70df \u65e0\u3001\u6709 \u7535\u8bdd \u65e0\u3001\u6709 \u62ff\u4e1c\u897f \u65e0\u3001\u6709","title":"\u5c5e\u6027\u8bf4\u660e"},{"location":"deploy-human-attribute-recognition/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e Labels List \u56fe\u50cf\u4e2d\u627e\u5230\u7684\u4eba\u4f53\u5217\u8868 +upper_wear Dict \u77ed\u8896\u3001\u957f\u8896 +upper_wear_texture Dict \u56fe\u6848\u3001\u7eaf\u8272\u3001\u6761\u7eb9/\u683c\u5b50 +lower_wear Dict \u77ed\u88e4/\u88d9\u3001\u957f\u88e4/\u88d9 +glasses Dict \u6709\u773c\u955c\u3001\u65e0\u773c\u955c +bag Dict \u6709\u80cc\u5305\u3001\u65e0\u80cc\u5305 +headwear Dict \u6709\u5e3d\u3001\u65e0\u5e3d +orientation Dict \u5de6\u4fa7\u9762\u3001\u80cc\u9762\u3001\u6b63\u9762\u3001\u53f3\u4fa7\u9762 +upper_cut Dict \u6709\u622a\u65ad\u3001\u65e0\u622a\u65ad +lower_cut Dict \u6709\u622a\u65ad\u3001\u65e0\u622a\u65ad +occlusion Dict \u65e0\u906e\u6321\u3001\u8f7b\u5ea6\u906e\u6321\u3001\u91cd\u5ea6\u906e\u6321 +face_mask Dict \u6234\u53e3\u7f69\u3001\u65e0\u53e3\u7f69 +gender Dict \u7537\u6027\u3001\u5973\u6027 +age Dict \u5e7c\u513f\u3001\u9752\u5c11\u5e74\u3001\u4e2d\u5e74\u3001\u8001\u5e74 +smoke Dict \u5438\u70df\u3001\u672a\u5438\u70df +cellphone Dict \u4f7f\u7528\u624b\u673a\u3001\u672a\u4f7f\u7528\u624b\u673a +carrying_item Dict \u6709\u624b\u63d0\u7269\u3001\u65e0\u624b\u63d0\u7269 +BoundingBox Dict \u4eba\u4f53\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u76f8\u5bf9\u5168\u753b\u9762\u7684\u767e\u5206\u6bd4 LabelModelVersion String \u5f53\u524d\u6a21\u578b\u7248\u672c\u53f7 \u8fd4\u56de\u793a\u4f8b { \"Labels\": [ { \"upper_wear\": { \"\u77ed\u8896\": 0.01, \"\u957f\u8896\": 99.99 }, \"upper_wear_texture\": { \"\u56fe\u6848\": 0, \"\u7eaf\u8272\": 99.55, \"\u6761\u7eb9/\u683c\u5b50\": 0.45 }, \"lower_wear\": { \"\u77ed\u88e4/\u88d9\": 0.15, \"\u957f\u88e4/\u88d9\": 99.85 }, \"glasses\": { \"\u6709\u773c\u955c\": 57.74, \"\u65e0\u773c\u955c\": 42.26 }, \"bag\": { \"\u6709\u80cc\u5305\": 0.69, \"\u65e0\u80cc\u5305\": 99.31 }, \"headwear\": { \"\u6709\u5e3d\": 97.02, \"\u65e0\u5e3d\": 2.98 }, \"orientation\": { \"\u5de6\u4fa7\u9762\": 99.99, \"\u80cc\u9762\": 0, \"\u6b63\u9762\": 0, \"\u53f3\u4fa7\u9762\": 0.01 }, \"upper_cut\": { \"\u6709\u622a\u65ad\": 0, \"\u65e0\u622a\u65ad\": 100 }, \"lower_cut\": { \"\u65e0\u622a\u65ad\": 0.18, \"\u6709\u622a\u65ad\": 99.82 }, \"occlusion\": { \"\u65e0\u906e\u6321\": 100, \"\u91cd\u5ea6\u906e\u6321\": 0, \"\u8f7b\u5ea6\u906e\u6321\": 0 }, \"face_mask\": { \"\u65e0\u53e3\u7f69\": 100, \"\u6234\u53e3\u7f69\": 0 }, \"gender\": { \"\u7537\u6027\": 100, \"\u5973\u6027\": 0 }, \"age\": { \"\u5e7c\u513f\": 0, \"\u9752\u5c11\u5e74\": 100, \"\u4e2d\u5e74\": 0, \"\u8001\u5e74\": 0 }, \"smoke\": { \"\u5438\u70df\": 0, \"\u672a\u5438\u70df\": 100 }, \"cellphone\": { \"\u4f7f\u7528\u624b\u673a\": 0, \"\u672a\u4f7f\u7528\u624b\u673a\": 100 }, \"carrying_item\": { \"\u6709\u624b\u63d0\u7269\": 0.03, \"\u65e0\u624b\u63d0\u7269\": 99.97 }, \"BoundingBox\": { \"Width\": 0.11781848725818456, \"Height\": 0.43450208474661556, \"Left\": 0.5310931977771577, \"Top\": 0.45263674786982644 } }, ... ], \"LabelModelVersion\": \"1.2.0\" }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-human-attribute-recognition/#_3","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/custom_ocr\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/custom_ocr\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-human-attribute-recognition/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanAttributeRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-human-attribute-recognition/#_4","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-human-attribute-recognition/#_5","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u81ea\u5b9a\u4e49\u6a21\u677f\u6587\u5b57\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanAttributeRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-human-image-segmentation/","text":"\u57fa\u4e8eAI\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8bc6\u522b\u56fe\u50cf\u4e2d\u7684\u4eba\u4f53\u8f6e\u5ed3\uff0c\u5b9e\u73b0\u9ad8\u7cbe\u5ea6\u5206\u5272\uff0c\u4f7f\u4e4b\u4e0e\u80cc\u666f\u8fdb\u884c\u5206\u79bb\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7167\u7247\u80cc\u666f\u66ff\u6362\u3001\u540e\u671f\u5904\u7406\u3001\u8bc1\u4ef6\u7167\u5236\u4f5c\uff0c\u4eba\u50cf\u62a0\u56fe\u7f8e\u5316\u3001\u80cc\u666f\u865a\u5316\u7b49\u591a\u79cd\u573a\u666f\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u53bb\u9664\u80cc\u666f\u540e\u7684 Base64 \u7f16\u7801\u7684 Alpha \u901a\u9053\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"\u53bb\u9664\u80cc\u666f\u540e\u7684Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/human_image_segmentation\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanImageSegmentation \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 9 \u5206\u949f","title":"Human Image Segmentation"},{"location":"deploy-human-image-segmentation/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7167\u7247\u80cc\u666f\u66ff\u6362\u3001\u540e\u671f\u5904\u7406\u3001\u8bc1\u4ef6\u7167\u5236\u4f5c\uff0c\u4eba\u50cf\u62a0\u56fe\u7f8e\u5316\u3001\u80cc\u666f\u865a\u5316\u7b49\u591a\u79cd\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-human-image-segmentation/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u53bb\u9664\u80cc\u666f\u540e\u7684 Base64 \u7f16\u7801\u7684 Alpha \u901a\u9053\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"\u53bb\u9664\u80cc\u666f\u540e\u7684Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-human-image-segmentation/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/human_image_segmentation\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/human_image_segmentation\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-human-image-segmentation/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 HumanImageSegmentation \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-human-image-segmentation/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-human-image-segmentation/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u667a\u80fd\u4eba\u50cf\u5206\u5272 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 HumanImageSegmentation \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 9 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-image-similarity/","text":"\u6bd4\u8f83\u4e24\u5e45\u56fe\u7247\u662f\u5426\u76f8\u4f3c\uff0c\u901a\u8fc7\u56fe\u7247\u7279\u5f81\u5411\u91cf\u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb(Euclidean Distance)\uff0c\u5e76\u8f6c\u5316\u4e3a\u7f6e\u4fe1\u5ea6\uff0c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6bd4\u8f83\u4e24\u5f20\u56fe\u7247\u7684\u76f8\u4f3c\u6027\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u5546\u54c1\u8bc6\u522b\uff0c\u7ffb\u62cd\u8bc6\u522b\uff0c\u667a\u80fd\u76f8\u518c\u7b49\u573a\u666f\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result List \u4e00\u4e2a\u5177\u6709512\u4e2a\u5143\u7d20\u7684List\uff0c\u4e3a512\u7ef4\u7684\u56fe\u50cf\u5411\u91cf \u8fd4\u56de\u793a\u4f8b { \"result\": [ -0.02555299922823906, 0.012955999933183193, -0.10079500079154968, ... ] } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 Image Similarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 Image Similarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"Image Similarity"},{"location":"deploy-image-similarity/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u5546\u54c1\u8bc6\u522b\uff0c\u7ffb\u62cd\u8bc6\u522b\uff0c\u667a\u80fd\u76f8\u518c\u7b49\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-image-similarity/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result List \u4e00\u4e2a\u5177\u6709512\u4e2a\u5143\u7d20\u7684List\uff0c\u4e3a512\u7ef4\u7684\u56fe\u50cf\u5411\u91cf \u8fd4\u56de\u793a\u4f8b { \"result\": [ -0.02555299922823906, 0.012955999933183193, -0.10079500079154968, ... ] }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-image-similarity/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-image-similarity/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 Image Similarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-image-similarity/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-image-similarity/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 Image Similarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-image-super-resolution/","text":"\u53ef\u5c06\u56fe\u7247\u667a\u80fd\u653e\u59272\u62164\u500d\uff0c\u4ece\u800c\u83b7\u53d6\u6e05\u6670\u5ea6\u66f4\u9ad8\u3001\u7ec6\u8282\u4e30\u5bcc\u7684\u56fe\u50cf\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u7b49\u591a\u79cd\u573a\u666f\uff0c\u89e3\u51b3\u539f\u59cb\u56fe\u7247\u5206\u8fa8\u7387\u4e0d\u8db3\u7684\u95ee\u9898\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71920 * 1080\uff0c\u5728\u5f00\u542f\u4eba\u50cf\u589e\u5f3a\u7684\u60c5\u51b5\u4e0b\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71280 * 720\u3002AWS Lambda\u7248\u672c\u65b9\u6848\u7531\u4e8e\u6027\u80fd\u9650\u5236\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc7400 * 400 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e scale Integer \u5426 \u56fe\u50cf\u653e\u5927\u500d\u6570\uff0c\u652f\u6301\u653e\u5927\u500d\u6570\u4e3a2\u62164\uff0c\u9ed8\u8ba4\u503c\u4e3a2 face Bool \u5426 \u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u989d\u5916\u5f00\u542f\u4eba\u8138\u589e\u5f3a\uff0c\u9ed8\u8ba4\u503c\u4e3aFalse\u3002\uff08\u4ec5\u652f\u6301 GPU \u7248\u672c\u90e8\u7f72\u65b9\u5f0f\uff09 \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\", \"scale\" : 2 } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\", \"scale\" : 4 } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u6309\u6bd4\u4f8b\u653e\u5927\u540e Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"\u6309\u6bd4\u4f8b\u653e\u5927\u540e\u7684Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/image_super_resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 \u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c\u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e745\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a AWS Lambda\u8c03\u7528\u6b21\u6570 AWS Lambda\u8fd0\u884c\u65f6\u95f4 Amazon API Gateway\u8c03\u7528\u6b21\u6570 Amazon API Gateway\u6570\u636e\u8f93\u51fa\u91cf Amazon CloudWatch Logs\u5b58\u50a8\u91cf Amazon Elastic Container Registry\u5b58\u50a8\u91cf Amazon SageMaker\u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b\u7c7b\u578b Amazon SageMaker\u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u5165\u91cf Amazon SageMaker\u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u51fa\u91cf \u793a\u4f8b \u4ee5\u7f8e\u56fd\u4e1c\u90e8\uff08\u4fc4\u4ea5\u4fc4\u5dde\uff09\u533a\u57df\uff08us-east-2\uff09\u4e3a\u4f8b\uff0c\u5904\u7406\u4e00\u5f20\u56fe\u63091\u79d2\u8ba1\u7b97\uff0c\u5904\u74061\u767e\u4e07\u56fe\u7247\u3002\u5176\u4e2dAmazon SageMaker\u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b\u5f00\u542f\u65f6\u4f1a\u4e00\u76f4\u8ba1\u8d39\u3002 \u4f7f\u7528\u672c\u65b9\u6848\u7684\u6210\u672c\u8d39\u7528\u5982\u4e0b\u8868\u6240\u793a\uff1a \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda \u8c03\u7528\u767e\u4e07\u6b21 $0.20 Amazon Lambda \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 $66.7 Amazon API Gateway \u8c03\u7528\u767e\u4e07\u6b21 $3.5 Amazon API Gateway \u6570\u636e\u8f93\u51fa\u4ee5\u6bcf\u6b214MB\u8ba1\u7b97\uff0c$0.09/GB $360 Amazon CloudWatch Logs \u6bcf\u6b2110KB\uff0c$0.50/GB $0.05 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c\u6bcf\u6708\u6bcfGB$0.1 $0.05 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b\u9700\u8981\u8fd0\u884c278\u5c0f\u65f6\uff0cml.inf1.xlarge $0.297/\u5c0f\u65f6 $82.57 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u5165\u4ee5\u6bcf\u6b211MB\u8ba1\u7b97\uff0c$0.016/GB $16 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u51fa\u4ee5\u6bcf\u6b214MB\u8ba1\u7b97\uff0c$0.016/GB $64 \u5408\u8ba1 $593.07 \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 20 \u5206\u949f","title":"Image Super Resolution"},{"location":"deploy-image-super-resolution/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u7b49\u591a\u79cd\u573a\u666f\uff0c\u89e3\u51b3\u539f\u59cb\u56fe\u7247\u5206\u8fa8\u7387\u4e0d\u8db3\u7684\u95ee\u9898\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-image-super-resolution/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71920 * 1080\uff0c\u5728\u5f00\u542f\u4eba\u50cf\u589e\u5f3a\u7684\u60c5\u51b5\u4e0b\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc71280 * 720\u3002AWS Lambda\u7248\u672c\u65b9\u6848\u7531\u4e8e\u6027\u80fd\u9650\u5236\uff0c\u56fe\u50cf\u5927\u5c0f\u5efa\u8bae\u4e0d\u8d85\u8fc7400 * 400 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e scale Integer \u5426 \u56fe\u50cf\u653e\u5927\u500d\u6570\uff0c\u652f\u6301\u653e\u5927\u500d\u6570\u4e3a2\u62164\uff0c\u9ed8\u8ba4\u503c\u4e3a2 face Bool \u5426 \u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u989d\u5916\u5f00\u542f\u4eba\u8138\u589e\u5f3a\uff0c\u9ed8\u8ba4\u503c\u4e3aFalse\u3002\uff08\u4ec5\u652f\u6301 GPU \u7248\u672c\u90e8\u7f72\u65b9\u5f0f\uff09 \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\", \"scale\" : 2 } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\", \"scale\" : 4 } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result String \u6309\u6bd4\u4f8b\u653e\u5927\u540e Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8fd4\u56de\u793a\u4f8b { \"result\": \"\u6309\u6bd4\u4f8b\u653e\u5927\u540e\u7684Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-image-super-resolution/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/image_super_resolution\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/image_super_resolution\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-image-super-resolution/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ImageSuperResolution \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-image-super-resolution/#_3","text":"\u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c\u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u622a\u81f32022\u5e745\u6708\uff0c\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u7684\u6210\u672c\u56e0\u7d20\u4e3b\u8981\u5305\u62ec\uff1a AWS Lambda\u8c03\u7528\u6b21\u6570 AWS Lambda\u8fd0\u884c\u65f6\u95f4 Amazon API Gateway\u8c03\u7528\u6b21\u6570 Amazon API Gateway\u6570\u636e\u8f93\u51fa\u91cf Amazon CloudWatch Logs\u5b58\u50a8\u91cf Amazon Elastic Container Registry\u5b58\u50a8\u91cf Amazon SageMaker\u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b\u7c7b\u578b Amazon SageMaker\u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u5165\u91cf Amazon SageMaker\u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u51fa\u91cf","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-image-super-resolution/#_4","text":"\u4ee5\u7f8e\u56fd\u4e1c\u90e8\uff08\u4fc4\u4ea5\u4fc4\u5dde\uff09\u533a\u57df\uff08us-east-2\uff09\u4e3a\u4f8b\uff0c\u5904\u7406\u4e00\u5f20\u56fe\u63091\u79d2\u8ba1\u7b97\uff0c\u5904\u74061\u767e\u4e07\u56fe\u7247\u3002\u5176\u4e2dAmazon SageMaker\u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b\u5f00\u542f\u65f6\u4f1a\u4e00\u76f4\u8ba1\u8d39\u3002 \u4f7f\u7528\u672c\u65b9\u6848\u7684\u6210\u672c\u8d39\u7528\u5982\u4e0b\u8868\u6240\u793a\uff1a \u670d\u52a1 \u7528\u91cf \u8d39\u7528 Amazon Lambda \u8c03\u7528\u767e\u4e07\u6b21 $0.20 Amazon Lambda \u5185\u5b584096MB\uff0c\u6bcf\u6b21\u8fd0\u884c1\u79d2 $66.7 Amazon API Gateway \u8c03\u7528\u767e\u4e07\u6b21 $3.5 Amazon API Gateway \u6570\u636e\u8f93\u51fa\u4ee5\u6bcf\u6b214MB\u8ba1\u7b97\uff0c$0.09/GB $360 Amazon CloudWatch Logs \u6bcf\u6b2110KB\uff0c$0.50/GB $0.05 Amazon Elastic Container Registry 0.5GB\u5b58\u50a8\uff0c\u6bcf\u6708\u6bcfGB$0.1 $0.05 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u5b9e\u4f8b\u9700\u8981\u8fd0\u884c278\u5c0f\u65f6\uff0cml.inf1.xlarge $0.297/\u5c0f\u65f6 $82.57 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u5165\u4ee5\u6bcf\u6b211MB\u8ba1\u7b97\uff0c$0.016/GB $16 Amazon SageMaker \u7ec8\u7aef\u8282\u70b9\u6570\u636e\u8f93\u51fa\u4ee5\u6bcf\u6b214MB\u8ba1\u7b97\uff0c$0.016/GB $64 \u5408\u8ba1 $593.07","title":"\u793a\u4f8b"},{"location":"deploy-image-super-resolution/#_5","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u56fe\u50cf\u8d85\u5206\u8fa8\u7387 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ImageSuperResolution \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 20 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-object-recognition/","text":"\u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u901a\u7528\u5bf9\u8c61\u4e3b\u4f53\uff0c\u8fd4\u56de\u8be5\u5bf9\u8c61\u4e3b\u4f53\u7684\u533a\u57df\u4fe1\u606f\u4e0e\u7f6e\u4fe1\u5ea6\u3002\u652f\u6301\u8bc6\u522b60\u7c7b\u7269\u4f53\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8eIPC\u56fe\u50cf\u68c0\u6d4b\u3001\u4ea4\u901a\u3001\u5b89\u9632\u7b49\u884c\u4e1a\u4e2d\u56fe\u50cf\u573a\u666f\u7684\u76ee\u6807\u68c0\u6d4b\u4e0e\u8ddf\u8e2a\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e Labels List \u56fe\u50cf\u4e2d\u627e\u5230\u7684\u76ee\u6807\u5217\u8868 +Name String \u76ee\u6807\u7c7b\u522b\u540d +Instances List \u7c7b\u522b\u5b9e\u4f8b\u5217\u8868 ++BoundingBox JSON \u5b9e\u4f8b\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u76f8\u5bf9\u5168\u753b\u9762\u7684\u767e\u5206\u6bd4 ++Confidence Float \u5b9e\u4f8b\u7684\u7f6e\u4fe1\u5ea6\uff0c0-100 +Confidence Int \u5f53\u524d\u7c7b\u522b\u5b9e\u4f8b\u7f6e\u4fe1\u5ea6\u7684\u6700\u5927\u503c LabelModelVersion String \u5f53\u524d\u6a21\u578b\u7248\u672c\u53f7 \u8fd4\u56de\u793a\u4f8b { \"Labels\": [ { \"Name\": \"car_(automobile)\", \"Confidence\": 67.87780523300171, \"Instances\": [ { \"BoundingBox\": { \"Width\": 1.0013043403596384, \"Height\": 0.9958885181613408, \"Left\": -0.00021715163893532008, \"Top\": 0.00033918747441136817 }, \"Confidence\": 67.87780523300171 } ] }, { \"Name\": \"mirror\", \"Confidence\": 59.2678964138031, \"Instances\": [ { \"BoundingBox\": { \"Width\": 0.14041614532470703, \"Height\": 0.29166373257057565, \"Left\": 0.2743588984012604, \"Top\": 0.2794425819140053 }, \"Confidence\": 59.2678964138031 } ] }, { \"Name\": \"window\", \"Confidence\": 16.396354138851166, \"Instances\": [ { \"BoundingBox\": { \"Width\": 0.44319993257522583, \"Height\": 0.6673663154702585, \"Left\": 0.5509995222091675, \"Top\": 0.015529238811174562 }, \"Confidence\": 16.396354138851166 } ] } ], \"LabelModelVersion\": \"1.2.0\" } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/object_recognition\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u652f\u6301\u7684\u76ee\u6807\u8bc6\u522b\u5b9e\u4f53\u5217\u8868 ID \u540d\u79f0 accordion \u624b\u98ce\u7434 airplane \u98de\u673a alligator \u9cc4\u9c7c apple \u82f9\u679c army_tank \u519b\u961f\u5766\u514b awning \u68da backpack \u80cc\u5305 ball \u7403 balloon \u6c14\u7403 banana \u9999\u8549 barrel \u6876 baseball \u68d2\u7403 baseball_bat \u68d2\u7403\u68d2 baseball_glove \u68d2\u7403\u624b\u5957 basket \u7bee\u5b50 bathtub \u6d74\u7f38 bear \u718a bed \u5e8a bee \u871c\u8702 beer_bottle \u5564\u9152\u74f6 bell_pepper \u706f\u7b3c\u6912 belt \u8170\u5e26 bench \u957f\u6905 bicycle \u81ea\u884c\u8f66 billboard \u5e7f\u544a\u724c bird \u9e1f blackboard \u9ed1\u677f boat \u8239 book \u4e66 bookcase \u4e66\u67dc boot \u5f00\u673a bottle \u74f6\u5b50 bowl \u7897 bowling_ball \u4fdd\u9f84\u7403 box \u76d2\u5b50 bracelet \u624b\u956f brassiere \u4e73\u7f69 bread \u9762\u5305 broccoli \u897f\u5170\u82b1 building \u5efa\u9020 bus_(vehicle) \u516c\u5171\u6c7d\u8f66_\uff08\u8f66\u8f86\uff09 butterfly \u8774\u8776 cabinet \u5185\u9601 cake \u86cb\u7cd5 camel \u9a86\u9a7c camera \u76f8\u673a can \u80fd\u591f candle \u8721\u70db candy_bar \u7cd6\u679c\u6761 cannon \u5927\u70ae canoe \u72ec\u6728\u821f car_(automobile) car_(\u6c7d\u8f66) carrot \u80e1\u841d\u535c cart \u5927\u8f66 castle \u57ce\u5821 cat \u732b caterpillar \u6bdb\u866b cello \u5927\u63d0\u7434 cellular_telephone \u8702\u7a9d\u7535\u8bdd chair \u6905\u5b50 chicken_(animal) \u9e21_\uff08\u52a8\u7269\uff09 chopping_board \u5207\u83dc\u677f chopstick \u7b77\u5b50 christmas_tree \u5723\u8bde\u6811 clock \u949f coat \u5916\u5957 cocktail \u9e21\u5c3e\u9152 coffee_table \u5496\u5561\u684c coin \u786c\u5e01 computer_keyboard \u8ba1\u7b97\u673a\u952e\u76d8 computer_monitor \u7535\u8111\u663e\u793a\u5668 cone \u9525\u4f53 cookie \u66f2\u5947\u997c cow \u725b cowboy_hat \u725b\u4ed4\u5e3d crab_(animal) \u8783\u87f9_\uff08\u52a8\u7269\uff09 crown \u738b\u51a0 cucumber \u9ec4\u74dc cup \u676f\u5b50 cupboard \u6a71\u67dc curtain \u7a97\u5e18 deer \u9e7f desk \u684c\u5b50 dessert \u751c\u70b9 dinosaur \u6050\u9f99 dog \u72d7 doll \u73a9\u5177\u5a03\u5a03 dolphin \u6d77\u8c5a door \u95e8 doorknob \u95e8\u628a\u624b doughnut \u751c\u751c\u5708 dragonfly \u873b\u8713 drawer \u62bd\u5c49 dress \u88d9\u5b50 drum_(musical_instrument) \u9f13_\uff08\u97f3\u4e50\u4e50\u5668\uff09 duck \u9e2d duffel_bag \u884c\u674e\u888b eagle \u9e70 earring \u8033\u73af egg \u86cb elephant \u5927\u8c61 fan \u6247\u5b50 faucet \u9f99\u5934 fireplace \u58c1\u7089 fireplug \u706b\u585e fish \u9c7c flag \u65d7\u5e1c flower_arrangement \u63d2\u82b1 flowerpot \u82b1\u76c6 football_helmet \u8db3\u7403\u5934\u76d4 fork \u53c9 fountain \u55b7\u6cc9 french_fries \u70b8\u85af\u6761 frisbee \u98de\u76d8 frog \u9752\u86d9 fruit \u6c34\u679c fruit_juice \u679c\u6c41 frying_pan \u5e73\u5e95\u9505 gazelle \u7f9a\u7f8a giraffe \u957f\u9888\u9e7f glass_(drink_container) \u73bb\u7483_\uff08\u996e\u6599\u5bb9\u5668\uff09 glove \u624b\u5957 goat \u5c71\u7f8a goggles \u98ce\u955c goose \u9e45 grape \u8461\u8404 guitar \u5409\u4ed6 gun \u67aa hamburger \u6c49\u5821\u5305 hamster \u4ed3\u9f20 handbag \u624b\u63d0\u5305 handle \u5904\u7406 harbor_seal \u6e2f\u53e3\u5bc6\u5c01 hat \u5e3d\u5b50 headset \u8033\u673a helicopter \u76f4\u5347\u673a helmet \u5934\u76d4 high_heels \u9ad8\u8ddf\u978b hog \u732a horse \u9a6c house \u5c4b icecream \u51b0\u6dc7\u6dcb insect \u6606\u866b jacket \u5939\u514b jaguar \u6377\u8c79 jean \u725b\u4ed4\u5e03 jellyfish \u6d77\u8707 kitchen_table \u53a8\u623f\u7684\u684c\u5b50 kite \u98ce\u7b5d knife \u5200 ladder \u68af\u5b50 lamp \u706f lantern \u706f\u7b3c laptop_computer \u7b14\u8bb0\u672c\u7535\u8111 lavender \u85b0\u8863\u8349 lemon \u67e0\u6aac lettuce \u83b4\u82e3 license_plate \u8f66\u724c life_jacket \u6551\u751f\u8863 lightbulb \u706f\u6ce1 lighthouse \u706f\u5854 lily \u767e\u5408 lion \u72ee\u5b50 lizard \u8725\u8734 maple \u67ab mask \u9762\u5177 microphone \u9ea6\u514b\u98ce microwave_oven \u5fae\u6ce2\u7089 minivan \u5c0f\u578b\u8d27\u8f66 mirror \u955c\u5b50 monkey \u7334 motorcycle \u6469\u6258\u8f66 mouse_(computer_equipment) \u9f20\u6807_\uff08\u8ba1\u7b97\u673a_\u8bbe\u5907\uff09 muffin \u677e\u997c mug \u9a6c\u514b\u676f mushroom \u8611\u83c7 musical_instrument \u4e50\u5668 napkin \u9910\u5dfe necklace \u9879\u94fe necktie \u9886\u5e26 nightstand \u5e8a\u5934\u67dc onion \u6d0b\u8471 orange_(fruit) \u6a59\u5b50_\uff08\u6c34\u679c\uff09 oven \u70e4\u7bb1 owl \u732b\u5934\u9e70 paddle \u6868 painting \u7ed8\u753b palm_tree \u68d5\u6988\u6811 parachute \u964d\u843d\u4f1e parking_meter \u505c\u8f66\u6536\u8d39\u8868 parrot \u9e66\u9e49 pasta \u610f\u5927\u5229\u9762 pastry \u7cd5\u70b9 pen \u7b14 penguin \u4f01\u9e45 person \u4eba piano \u94a2\u7434 pillow \u6795\u5934 pizza \u6bd4\u8428 plastic_bag \u5851\u6599\u888b plate \u76d8\u5b50 polar_bear \u5317\u6781\u718a pool_table \u6c60\u8868 porch \u95e8\u5eca poster \u6d77\u62a5 potted_plant \u76c6\u683d\u690d\u7269 pumpkin \u5357\u74dc rabbit \u5154\u5b50 refrigerator \u51b0\u7bb1 remote_control \u9065\u63a7 ring \u6212\u6307 roller_skate \u6e9c\u51b0\u978b rose \u73ab\u7470 salad \u6c99\u62c9 sandal_(type_of_shoe) \u51c9\u978b_\uff08\u7c7b\u578b_of_shoe\uff09 sandwich \u4e09\u660e\u6cbb saucer \u789f\u5b50 saxophone \u8428\u514b\u65af\u7ba1 scarf \u56f4\u5dfe scissors \u526a\u5200 sculpture \u96d5\u5851 sheep \u7f8a shirt \u886c\u886b shoe \u978b short_pants \u77ed\u88e4 shrimp \u867e sink \u4e0b\u6c89 skateboard \u6ed1\u677f ski \u6ed1\u96ea skirt \u77ed\u88d9 skullcap \u9ec4\u82a9 snake \u86c7 snowboard \u6ed1\u96ea\u677f soccer_ball \u8db3\u7403 sock \u77ed\u889c sofa \u6c99\u53d1 sofa_bed \u6c99\u53d1\u5e8a sparrow \u9ebb\u96c0 speaker_(stero_equipment) \u626c\u58f0\u5668_\uff08\u7acb\u4f53\u58f0\u8bbe\u5907\uff09 spectacles \u773c\u955c spider \u8718\u86db spoon \u52fa\u5b50 sportswear \u8fd0\u52a8\u670d squirrel \u677e\u9f20 stool \u51f3\u5b50 stop_sign \u505c\u6b62\u6807\u5fd7 stove \u706b\u7089 straw_(for_drinking) \u7a3b\u8349_\uff08\u559d\uff09 strawberry \u8349\u8393 street_sign \u8857\u9053\u8def\u6807 streetlight \u8def\u706f suit_(clothing) \u5957\u88c5_\uff08\u670d\u88c5\uff09 suitcase \u624b\u63d0\u7bb1 sunflower \u5411\u65e5\u8475 sunglasses \u592a\u9633\u955c sunhat \u592a\u9633\u5e3d surfboard \u51b2\u6d6a\u677f sushi \u5bff\u53f8 swimming_pool \u6e38\u6cf3\u6c60 swimsuit \u6cf3\u88c5 table \u684c\u5b50 tablet_computer \u5e73\u677f\u7535\u8111 taxi \u51fa\u79df\u8f66 teddy_bear \u73a9\u5177\u718a telephone \u7535\u8bdd television_set \u7535\u89c6\u673a tennis_ball \u7f51\u7403 tennis_racket \u7f51\u7403\u62cd tent \u5e10\u7bf7 tiger \u8001\u864e toilet \u6d17\u624b\u95f4 toilet_tissue \u536b\u751f\u7eb8 tomato \u756a\u8304 toothbrush \u7259\u5237 towel \u6bdb\u5dfe tower \u5854 toy \u73a9\u5177 traffic_light \u7ea2\u7eff\u706f train_(railroad_vehicle) \u706b\u8f66_\uff08\u94c1\u8def_\u8f66\u8f86\uff09 trash_can \u5783\u573e\u7bb1 tray \u6258\u76d8 tree \u6811 tripod \u4e09\u811a\u67b6 trousers \u88e4\u5b50 truck \u5361\u8f66 trumpet \u5587\u53ed turtle \u9f9f umbrella \u4f1e vase \u82b1\u74f6 vegetables \u852c\u83dc violin \u5c0f\u63d0\u7434 wall_socket \u5899\u4e0a\u7684\u63d2\u5ea7 watch \u624b\u8868 water_jug \u6c34\u58f6 whale \u9cb8 wheel \u8f66\u8f6e wheelchair \u8f6e\u6905 window \u7a97\u6237 wineglass \u7ea2\u9152\u676f zebra \u6591\u9a6c \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"Object Recognition"},{"location":"deploy-object-recognition/#_1","text":"\u53ef\u5e94\u7528\u4e8eIPC\u56fe\u50cf\u68c0\u6d4b\u3001\u4ea4\u901a\u3001\u5b89\u9632\u7b49\u884c\u4e1a\u4e2d\u56fe\u50cf\u573a\u666f\u7684\u76ee\u6807\u68c0\u6d4b\u4e0e\u8ddf\u8e2a\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-object-recognition/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e Labels List \u56fe\u50cf\u4e2d\u627e\u5230\u7684\u76ee\u6807\u5217\u8868 +Name String \u76ee\u6807\u7c7b\u522b\u540d +Instances List \u7c7b\u522b\u5b9e\u4f8b\u5217\u8868 ++BoundingBox JSON \u5b9e\u4f8b\u5728\u56fe\u50cf\u4e2d\u7684\u7684\u5750\u6807\u503c\uff0c\u5305\u542btop\uff0cleft\uff0cwidth\uff0cheight\u76f8\u5bf9\u5168\u753b\u9762\u7684\u767e\u5206\u6bd4 ++Confidence Float \u5b9e\u4f8b\u7684\u7f6e\u4fe1\u5ea6\uff0c0-100 +Confidence Int \u5f53\u524d\u7c7b\u522b\u5b9e\u4f8b\u7f6e\u4fe1\u5ea6\u7684\u6700\u5927\u503c LabelModelVersion String \u5f53\u524d\u6a21\u578b\u7248\u672c\u53f7 \u8fd4\u56de\u793a\u4f8b { \"Labels\": [ { \"Name\": \"car_(automobile)\", \"Confidence\": 67.87780523300171, \"Instances\": [ { \"BoundingBox\": { \"Width\": 1.0013043403596384, \"Height\": 0.9958885181613408, \"Left\": -0.00021715163893532008, \"Top\": 0.00033918747441136817 }, \"Confidence\": 67.87780523300171 } ] }, { \"Name\": \"mirror\", \"Confidence\": 59.2678964138031, \"Instances\": [ { \"BoundingBox\": { \"Width\": 0.14041614532470703, \"Height\": 0.29166373257057565, \"Left\": 0.2743588984012604, \"Top\": 0.2794425819140053 }, \"Confidence\": 59.2678964138031 } ] }, { \"Name\": \"window\", \"Confidence\": 16.396354138851166, \"Instances\": [ { \"BoundingBox\": { \"Width\": 0.44319993257522583, \"Height\": 0.6673663154702585, \"Left\": 0.5509995222091675, \"Top\": 0.015529238811174562 }, \"Confidence\": 16.396354138851166 } ] } ], \"LabelModelVersion\": \"1.2.0\" }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-object-recognition/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/object_recognition\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/object_recognition\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-object-recognition/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 ObjectRecognition \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-object-recognition/#_3","text":"ID \u540d\u79f0 accordion \u624b\u98ce\u7434 airplane \u98de\u673a alligator \u9cc4\u9c7c apple \u82f9\u679c army_tank \u519b\u961f\u5766\u514b awning \u68da backpack \u80cc\u5305 ball \u7403 balloon \u6c14\u7403 banana \u9999\u8549 barrel \u6876 baseball \u68d2\u7403 baseball_bat \u68d2\u7403\u68d2 baseball_glove \u68d2\u7403\u624b\u5957 basket \u7bee\u5b50 bathtub \u6d74\u7f38 bear \u718a bed \u5e8a bee \u871c\u8702 beer_bottle \u5564\u9152\u74f6 bell_pepper \u706f\u7b3c\u6912 belt \u8170\u5e26 bench \u957f\u6905 bicycle \u81ea\u884c\u8f66 billboard \u5e7f\u544a\u724c bird \u9e1f blackboard \u9ed1\u677f boat \u8239 book \u4e66 bookcase \u4e66\u67dc boot \u5f00\u673a bottle \u74f6\u5b50 bowl \u7897 bowling_ball \u4fdd\u9f84\u7403 box \u76d2\u5b50 bracelet \u624b\u956f brassiere \u4e73\u7f69 bread \u9762\u5305 broccoli \u897f\u5170\u82b1 building \u5efa\u9020 bus_(vehicle) \u516c\u5171\u6c7d\u8f66_\uff08\u8f66\u8f86\uff09 butterfly \u8774\u8776 cabinet \u5185\u9601 cake \u86cb\u7cd5 camel \u9a86\u9a7c camera \u76f8\u673a can \u80fd\u591f candle \u8721\u70db candy_bar \u7cd6\u679c\u6761 cannon \u5927\u70ae canoe \u72ec\u6728\u821f car_(automobile) car_(\u6c7d\u8f66) carrot \u80e1\u841d\u535c cart \u5927\u8f66 castle \u57ce\u5821 cat \u732b caterpillar \u6bdb\u866b cello \u5927\u63d0\u7434 cellular_telephone \u8702\u7a9d\u7535\u8bdd chair \u6905\u5b50 chicken_(animal) \u9e21_\uff08\u52a8\u7269\uff09 chopping_board \u5207\u83dc\u677f chopstick \u7b77\u5b50 christmas_tree \u5723\u8bde\u6811 clock \u949f coat \u5916\u5957 cocktail \u9e21\u5c3e\u9152 coffee_table \u5496\u5561\u684c coin \u786c\u5e01 computer_keyboard \u8ba1\u7b97\u673a\u952e\u76d8 computer_monitor \u7535\u8111\u663e\u793a\u5668 cone \u9525\u4f53 cookie \u66f2\u5947\u997c cow \u725b cowboy_hat \u725b\u4ed4\u5e3d crab_(animal) \u8783\u87f9_\uff08\u52a8\u7269\uff09 crown \u738b\u51a0 cucumber \u9ec4\u74dc cup \u676f\u5b50 cupboard \u6a71\u67dc curtain \u7a97\u5e18 deer \u9e7f desk \u684c\u5b50 dessert \u751c\u70b9 dinosaur \u6050\u9f99 dog \u72d7 doll \u73a9\u5177\u5a03\u5a03 dolphin \u6d77\u8c5a door \u95e8 doorknob \u95e8\u628a\u624b doughnut \u751c\u751c\u5708 dragonfly \u873b\u8713 drawer \u62bd\u5c49 dress \u88d9\u5b50 drum_(musical_instrument) \u9f13_\uff08\u97f3\u4e50\u4e50\u5668\uff09 duck \u9e2d duffel_bag \u884c\u674e\u888b eagle \u9e70 earring \u8033\u73af egg \u86cb elephant \u5927\u8c61 fan \u6247\u5b50 faucet \u9f99\u5934 fireplace \u58c1\u7089 fireplug \u706b\u585e fish \u9c7c flag \u65d7\u5e1c flower_arrangement \u63d2\u82b1 flowerpot \u82b1\u76c6 football_helmet \u8db3\u7403\u5934\u76d4 fork \u53c9 fountain \u55b7\u6cc9 french_fries \u70b8\u85af\u6761 frisbee \u98de\u76d8 frog \u9752\u86d9 fruit \u6c34\u679c fruit_juice \u679c\u6c41 frying_pan \u5e73\u5e95\u9505 gazelle \u7f9a\u7f8a giraffe \u957f\u9888\u9e7f glass_(drink_container) \u73bb\u7483_\uff08\u996e\u6599\u5bb9\u5668\uff09 glove \u624b\u5957 goat \u5c71\u7f8a goggles \u98ce\u955c goose \u9e45 grape \u8461\u8404 guitar \u5409\u4ed6 gun \u67aa hamburger \u6c49\u5821\u5305 hamster \u4ed3\u9f20 handbag \u624b\u63d0\u5305 handle \u5904\u7406 harbor_seal \u6e2f\u53e3\u5bc6\u5c01 hat \u5e3d\u5b50 headset \u8033\u673a helicopter \u76f4\u5347\u673a helmet \u5934\u76d4 high_heels \u9ad8\u8ddf\u978b hog \u732a horse \u9a6c house \u5c4b icecream \u51b0\u6dc7\u6dcb insect \u6606\u866b jacket \u5939\u514b jaguar \u6377\u8c79 jean \u725b\u4ed4\u5e03 jellyfish \u6d77\u8707 kitchen_table \u53a8\u623f\u7684\u684c\u5b50 kite \u98ce\u7b5d knife \u5200 ladder \u68af\u5b50 lamp \u706f lantern \u706f\u7b3c laptop_computer \u7b14\u8bb0\u672c\u7535\u8111 lavender \u85b0\u8863\u8349 lemon \u67e0\u6aac lettuce \u83b4\u82e3 license_plate \u8f66\u724c life_jacket \u6551\u751f\u8863 lightbulb \u706f\u6ce1 lighthouse \u706f\u5854 lily \u767e\u5408 lion \u72ee\u5b50 lizard \u8725\u8734 maple \u67ab mask \u9762\u5177 microphone \u9ea6\u514b\u98ce microwave_oven \u5fae\u6ce2\u7089 minivan \u5c0f\u578b\u8d27\u8f66 mirror \u955c\u5b50 monkey \u7334 motorcycle \u6469\u6258\u8f66 mouse_(computer_equipment) \u9f20\u6807_\uff08\u8ba1\u7b97\u673a_\u8bbe\u5907\uff09 muffin \u677e\u997c mug \u9a6c\u514b\u676f mushroom \u8611\u83c7 musical_instrument \u4e50\u5668 napkin \u9910\u5dfe necklace \u9879\u94fe necktie \u9886\u5e26 nightstand \u5e8a\u5934\u67dc onion \u6d0b\u8471 orange_(fruit) \u6a59\u5b50_\uff08\u6c34\u679c\uff09 oven \u70e4\u7bb1 owl \u732b\u5934\u9e70 paddle \u6868 painting \u7ed8\u753b palm_tree \u68d5\u6988\u6811 parachute \u964d\u843d\u4f1e parking_meter \u505c\u8f66\u6536\u8d39\u8868 parrot \u9e66\u9e49 pasta \u610f\u5927\u5229\u9762 pastry \u7cd5\u70b9 pen \u7b14 penguin \u4f01\u9e45 person \u4eba piano \u94a2\u7434 pillow \u6795\u5934 pizza \u6bd4\u8428 plastic_bag \u5851\u6599\u888b plate \u76d8\u5b50 polar_bear \u5317\u6781\u718a pool_table \u6c60\u8868 porch \u95e8\u5eca poster \u6d77\u62a5 potted_plant \u76c6\u683d\u690d\u7269 pumpkin \u5357\u74dc rabbit \u5154\u5b50 refrigerator \u51b0\u7bb1 remote_control \u9065\u63a7 ring \u6212\u6307 roller_skate \u6e9c\u51b0\u978b rose \u73ab\u7470 salad \u6c99\u62c9 sandal_(type_of_shoe) \u51c9\u978b_\uff08\u7c7b\u578b_of_shoe\uff09 sandwich \u4e09\u660e\u6cbb saucer \u789f\u5b50 saxophone \u8428\u514b\u65af\u7ba1 scarf \u56f4\u5dfe scissors \u526a\u5200 sculpture \u96d5\u5851 sheep \u7f8a shirt \u886c\u886b shoe \u978b short_pants \u77ed\u88e4 shrimp \u867e sink \u4e0b\u6c89 skateboard \u6ed1\u677f ski \u6ed1\u96ea skirt \u77ed\u88d9 skullcap \u9ec4\u82a9 snake \u86c7 snowboard \u6ed1\u96ea\u677f soccer_ball \u8db3\u7403 sock \u77ed\u889c sofa \u6c99\u53d1 sofa_bed \u6c99\u53d1\u5e8a sparrow \u9ebb\u96c0 speaker_(stero_equipment) \u626c\u58f0\u5668_\uff08\u7acb\u4f53\u58f0\u8bbe\u5907\uff09 spectacles \u773c\u955c spider \u8718\u86db spoon \u52fa\u5b50 sportswear \u8fd0\u52a8\u670d squirrel \u677e\u9f20 stool \u51f3\u5b50 stop_sign \u505c\u6b62\u6807\u5fd7 stove \u706b\u7089 straw_(for_drinking) \u7a3b\u8349_\uff08\u559d\uff09 strawberry \u8349\u8393 street_sign \u8857\u9053\u8def\u6807 streetlight \u8def\u706f suit_(clothing) \u5957\u88c5_\uff08\u670d\u88c5\uff09 suitcase \u624b\u63d0\u7bb1 sunflower \u5411\u65e5\u8475 sunglasses \u592a\u9633\u955c sunhat \u592a\u9633\u5e3d surfboard \u51b2\u6d6a\u677f sushi \u5bff\u53f8 swimming_pool \u6e38\u6cf3\u6c60 swimsuit \u6cf3\u88c5 table \u684c\u5b50 tablet_computer \u5e73\u677f\u7535\u8111 taxi \u51fa\u79df\u8f66 teddy_bear \u73a9\u5177\u718a telephone \u7535\u8bdd television_set \u7535\u89c6\u673a tennis_ball \u7f51\u7403 tennis_racket \u7f51\u7403\u62cd tent \u5e10\u7bf7 tiger \u8001\u864e toilet \u6d17\u624b\u95f4 toilet_tissue \u536b\u751f\u7eb8 tomato \u756a\u8304 toothbrush \u7259\u5237 towel \u6bdb\u5dfe tower \u5854 toy \u73a9\u5177 traffic_light \u7ea2\u7eff\u706f train_(railroad_vehicle) \u706b\u8f66_\uff08\u94c1\u8def_\u8f66\u8f86\uff09 trash_can \u5783\u573e\u7bb1 tray \u6258\u76d8 tree \u6811 tripod \u4e09\u811a\u67b6 trousers \u88e4\u5b50 truck \u5361\u8f66 trumpet \u5587\u53ed turtle \u9f9f umbrella \u4f1e vase \u82b1\u74f6 vegetables \u852c\u83dc violin \u5c0f\u63d0\u7434 wall_socket \u5899\u4e0a\u7684\u63d2\u5ea7 watch \u624b\u8868 water_jug \u6c34\u58f6 whale \u9cb8 wheel \u8f66\u8f6e wheelchair \u8f6e\u6905 window \u7a97\u6237 wineglass \u7ea2\u9152\u676f zebra \u6591\u9a6c","title":"\u652f\u6301\u7684\u76ee\u6807\u8bc6\u522b\u5b9e\u4f53\u5217\u8868"},{"location":"deploy-object-recognition/#_4","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-object-recognition/#_5","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u901a\u7528\u7269\u4f53\u8bc6\u522b \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 ObjectRecognition \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-pornography-detection/","text":"\u81ea\u52a8\u5bf9\u56fe\u7247\u8fdb\u884c\u5ba1\u6838\uff0c\u83b7\u53d6\u591a\u7ef4\u5ea6\u8272\u60c5\u91cf\u5316\u4fe1\u606f\uff0c\u5982\uff1anormal\uff0csexy\uff0cporn\uff0c\u5b9e\u73b0\u7cbe\u51c6\u5feb\u901f\u7684\u8272\u60c5\u503e\u5411\u5224\u65ad\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u5bf9\u6d89\u9ec4\u5185\u5bb9\u8fdb\u884c\u5feb\u901f\u5904\u7406\u7684\u573a\u666f\u3002\u5e2e\u52a9\u5ba2\u6237\u51cf\u5c11\u5ba1\u6838\u4eba\u529b\uff0c\u6709\u6548\u964d\u4f4e\u6d89\u9ec4\u98ce\u9669\uff0c\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e normal Float \u8bc6\u522b\u56fe\u50cf\u7684\u6b63\u5e38\u7ef4\u5ea6\u5360\u6bd4 sexy Float \u8bc6\u522b\u56fe\u50cf\u7684\u6027\u611f\u7ef4\u5ea6\u5360\u6bd4 porn Float \u8bc6\u522b\u56fe\u50cf\u7684\u8272\u60c5\u7ef4\u5ea6\u5360\u6bd4 \u8fd4\u56de\u793a\u4f8b { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/pornography-detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 PornographyDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 PornographyDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"Pornography Detection"},{"location":"deploy-pornography-detection/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u5bf9\u6d89\u9ec4\u5185\u5bb9\u8fdb\u884c\u5feb\u901f\u5904\u7406\u7684\u573a\u666f\u3002\u5e2e\u52a9\u5ba2\u6237\u51cf\u5c11\u5ba1\u6838\u4eba\u529b\uff0c\u6709\u6548\u964d\u4f4e\u6d89\u9ec4\u98ce\u9669\uff0c\u63d0\u5347\u4fe1\u606f\u5904\u7406\u6548\u7387\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-pornography-detection/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e url String \u4e0e img \u53c2\u6570\u4e8c\u9009\u4e00\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e img \u56fe\u50cf\u7684 URL \u5730\u5740\u3002\u652f\u6301 HTTP/HTTPS \u548c S3 \u534f\u8bae\u3002\u8981\u6c42\u56fe\u50cf\u683c\u5f0f\u4e3a jpg/jpeg/png/bmp \uff0c\u6700\u957f\u8fb9\u4e0d\u8d85\u8fc7 4096px\u3002 img String \u4e0e url \u53c2\u6570\u4e8c\u9009\u4e00 \u8fdb\u884c Base64 \u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } { \"img\": \"Base64\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e normal Float \u8bc6\u522b\u56fe\u50cf\u7684\u6b63\u5e38\u7ef4\u5ea6\u5360\u6bd4 sexy Float \u8bc6\u522b\u56fe\u50cf\u7684\u6027\u611f\u7ef4\u5ea6\u5360\u6bd4 porn Float \u8bc6\u522b\u56fe\u50cf\u7684\u8272\u60c5\u7ef4\u5ea6\u5360\u6bd4 \u8fd4\u56de\u793a\u4f8b { \u201cnormal\u201d : 0.15993066132068634, \u201csexy\u201d : 0.5451669692993164, \u201cporn\u201d : 0.2949024438858032 }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-pornography-detection/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/pornography-detection\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/pornography-detection\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-pornography-detection/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 PornographyDetection \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-pornography-detection/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-pornography-detection/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u8272\u60c5\u5185\u5bb9\u5ba1\u6838 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 PornographyDetection \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deploy-text-similarity/","text":"\u6bd4\u8f83\u4e24\u6bb5\u4e0d\u540c\u6587\u672c\u4e4b\u95f4\u76f8\u4f3c\u5ea6\uff0c\u5e76\u8f93\u51fa\u4e00\u4e2a\u4ecb\u4e8e0\u52301\u4e4b\u95f4\u7684\u7f6e\u4fe1\u5ea6\uff0c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6bd4\u8f83\u4e24\u6bb5\u6587\u5b57\u7684\u76f8\u4f3c\u6027\u3002 \u9002\u7528\u573a\u666f \u53ef\u5e94\u7528\u4e8e\u641c\u7d22\u5f15\u64ce\u3001\u63a8\u8350\u7cfb\u7edf\u3001\u673a\u5668\u7ffb\u8bd1\u3001\u81ea\u52a8\u5e94\u7b54\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u3001\u62fc\u5199\u7ea0\u9519\u7b49\u573a\u666f\u3002 API\u53c2\u6570\u8bf4\u660e HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e text String \u6587\u672c\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"text\": \"\u6d4b\u8bd5\u6587\u672c\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result List \u4e00\u4e2a\u5177\u6709768\u4e2a\u5143\u7d20\u7684List\uff0c\u4e3a768\u7ef4\u7684\u6587\u672c\u5411\u91cf \u8fd4\u56de\u793a\u4f8b { \"result\": [ 0.025645000860095024, 0.001914000022225082, 0.007929000072181225, ... ] } \u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" } \u6210\u672c\u9884\u4f30 //TODO \u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"Text Similarity"},{"location":"deploy-text-similarity/#_1","text":"\u53ef\u5e94\u7528\u4e8e\u641c\u7d22\u5f15\u64ce\u3001\u63a8\u8350\u7cfb\u7edf\u3001\u673a\u5668\u7ffb\u8bd1\u3001\u81ea\u52a8\u5e94\u7b54\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u3001\u62fc\u5199\u7ea0\u9519\u7b49\u573a\u666f\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"deploy-text-similarity/#api","text":"HTTP \u65b9\u6cd5: POST Body \u8bf7\u6c42\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u662f\u5426\u5fc5\u9009 \u8bf4\u660e text String \u6587\u672c\u6570\u636e \u8bf7\u6c42 Body \u793a\u4f8b { \"text\": \"\u6d4b\u8bd5\u6587\u672c\" } \u8fd4\u56de\u53c2\u6570 \u540d\u79f0 \u7c7b\u578b \u8bf4\u660e result List \u4e00\u4e2a\u5177\u6709768\u4e2a\u5143\u7d20\u7684List\uff0c\u4e3a768\u7ef4\u7684\u6587\u672c\u5411\u91cf \u8fd4\u56de\u793a\u4f8b { \"result\": [ 0.025645000860095024, 0.001914000022225082, 0.007929000072181225, ... ] }","title":"API\u53c2\u6570\u8bf4\u660e"},{"location":"deploy-text-similarity/#_2","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"\u56fe\u50cf\u7684URL\u5730\u5740\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity' payload = { 'url': '\u56fe\u50cf\u7684URL\u5730\u5740' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/text_similarity\" payload = json.dumps({ \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"\u56fe\u50cf\u7684URL\u5730\u5740\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/text_similarity\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"deploy-text-similarity/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 TextSimilarity \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"\u56fe\u50cf\u7684URL\u5730\u5740\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"deploy-text-similarity/#_3","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"deploy-text-similarity/#_4","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d \u6587\u672c\u76f8\u4f3c\u5ea6 \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 TextSimilarity \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a 10 \u5206\u949f","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"deployment/","text":"This section describes how to deploy the AI Solution Kit solution via Amazon CloudFormation . Detailed deployment and usage instructions for the AI applications included in the solution are described in detail in the corresponding. Before deploying the solution, it is recommended that you review the information in this guide regarding architecture diagrams and regional support, and then follow the instructions below to configure the solution and deploy it to your account. Deployment time Deploying an AI application based on the Amazon Lambda architecture: approximately 10 minutes Deploying an AI application based on the Amazon SageMaker architecture: approximately 20 minutes Note When users activate multiple APIs in Amazon CloudFormation at the same time, the deployment time is the stacked time for each individual API. Deployment Overview Prerequisites (China region) This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests without authentication in the Beijing region, you need to apply and ensure that your Amazon Web Services account has been filed with the Internet Content Provider (ICP) and that port 80 For details, please refer to the ICP filing instructions . 8E.pdf). Deploy the Amazon CloudFormation template Log in to the Amazon Web Services Management Console and select the link to launch the AWS CloudFormation template. Quick Launch Link Description link for Amazon CloudTech China (Beijing) region operated by Halo New Network Deploy AI Solution Kit in Beijing region Amazon Cloud Technologies China (Ningxia) Regional Link operated by West Cloud Data Deploying AI Solution Kit in Ningxia region global-region link Deploy AI Solution Kit in Global region By default, the template will be launched in the default region after you log in to the console. If you need to launch the solution in the specified Amazon Web Service region, select it from the region drop-down list in the console navigation bar. On the Create Stack page, verify that the correct template URL is displayed in the Amazon S3 URL text box, and then select Next . On the Assign Stack Details page, assign a name to your solution stack that is unique within the account and meets the naming requirements. In the Parameters section, there are two sections of parameters, General Configuration and AI Application List , where you can modify the General Configuration and select the AI applications to be deployed as needed, and then select Next . Common Configuration Parameters Parameter Name Default Value Description APIGatewayAuthorization AWS_IAM The authentication method of the API gateway. The default is AWS_IAM , which will automatically use the IAM permission to control access to the API. You can also choose NONE which is the no privilege authentication method (insecure) and the user will need to manually configure the required Resource Access Policy in the API Gateway console after deploying the solution. developerguide/apigateway-control-access-to-api.html). APIGatewayStageName prod The first path field in the API gateway (URI). See also: stageVariable APIExplorer yes Deploys the API Resource Explorer based on Swagger UI to visualize and interact with API resources. It is automatically generated based on the OpenAPI (formerly known as Swagger) specification and makes it easy to view API definitions and tests through visual documentation. For more information, see: API Resource Explorer AI Application List Parameters Parameter ID Default Description GeneralOCR no Deploy General OCR , check 'yes' if you want to deploy, see General OCR GeneralOCRTraditional no Deploy GeneralOCR(Traditional Chinese) , please check 'yes' if you want to deploy, please refer to GeneralOCR(Traditional Chinese) CustomOCR no Deploy Custom Template OCR , please check 'yes' if you want to deploy, please refer to Custom Template OCR CarLicensePlate no Deploy Car License Plate Recognition , please check 'yes' if you want to deploy, please see Car License Plate Recognition PornographyDetection no deploy PornographyDetection , please check 'yes' if you want to deploy, please see Pornography Detection ImageSimilarity no Deploy ImageSimilarity , check 'yes' if you want to deploy, see Image Similarity HumanImageSegmentation no Deploy HumanImageSegmentation , please check 'yes' if you want to deploy, please see the Human Image Segmentation ObjectRecognition no Deploy Object Recognition , please check 'yes' if you want to deploy, please see Object Recognition FaceDetection no Deploy Face Detection , check 'yes' if you want to deploy, see Face Detection FaceComparison no Deploy Face Comparison , please check 'yes' if you want to deploy, see Face Comparison HumanAttributeRecognition no Deploy Human Attribute Recognition , please check 'yes' if you want to deploy, see Human Attribute Recognition ImageSuperResolution no Deploy Image Super Resolution , check 'yes' if you want to deploy, see Image Super Resolution TextSimilarity no Deploy Text Similarity , check 'yes' if you want to deploy, see the Text Similarity On the Configure Stack Options page, select Next . On the Review page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . Select Create Stack to deploy the stack. You can view the status of the stack in the Status column of the AWS CloudFormation console. You can see the status as CREATE_COMPLETE when the creation is complete. Tip After successful deployment, you can open the AI Solution Kit main stack in AWS CloudFormation's console and switch to the Outputs (Outputs) tab to query the Amazon API Gateway-based call URL by the corresponding Parameter ID . Updating the Amazon CloudFormation Stack With Amazon CloudFormation, you can change the properties of existing resources in your stack, and if you need to add or remove deployed AI features, you can do so by updating your stack. In the Amazon CloudFormation console, select the completed AI Solution Kit stack that you created in the Stack list. 2. In the Stack Details pane, select Update. 3. In the Template Parameters section, specify the AI feature or parameter information that needs to be added or removed, and then select Next. 4. On the Configure Stack Options page, select Next . 5. On the Review page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . 6. If you are satisfied with the changes made, select Updata stack.","title":"\u542f\u52a8CloudFormation\u5806\u6808"},{"location":"deployment/#deployment-overview","text":"Prerequisites (China region) This solution uses Amazon API Gateway to receive API call requests, so if you want to provide API requests without authentication in the Beijing region, you need to apply and ensure that your Amazon Web Services account has been filed with the Internet Content Provider (ICP) and that port 80 For details, please refer to the ICP filing instructions . 8E.pdf).","title":"Deployment Overview"},{"location":"deployment/#deploy-the-amazon-cloudformation-template","text":"Log in to the Amazon Web Services Management Console and select the link to launch the AWS CloudFormation template. Quick Launch Link Description link for Amazon CloudTech China (Beijing) region operated by Halo New Network Deploy AI Solution Kit in Beijing region Amazon Cloud Technologies China (Ningxia) Regional Link operated by West Cloud Data Deploying AI Solution Kit in Ningxia region global-region link Deploy AI Solution Kit in Global region By default, the template will be launched in the default region after you log in to the console. If you need to launch the solution in the specified Amazon Web Service region, select it from the region drop-down list in the console navigation bar. On the Create Stack page, verify that the correct template URL is displayed in the Amazon S3 URL text box, and then select Next . On the Assign Stack Details page, assign a name to your solution stack that is unique within the account and meets the naming requirements. In the Parameters section, there are two sections of parameters, General Configuration and AI Application List , where you can modify the General Configuration and select the AI applications to be deployed as needed, and then select Next .","title":"Deploy the Amazon CloudFormation template"},{"location":"deployment/#common-configuration-parameters","text":"Parameter Name Default Value Description APIGatewayAuthorization AWS_IAM The authentication method of the API gateway. The default is AWS_IAM , which will automatically use the IAM permission to control access to the API. You can also choose NONE which is the no privilege authentication method (insecure) and the user will need to manually configure the required Resource Access Policy in the API Gateway console after deploying the solution. developerguide/apigateway-control-access-to-api.html). APIGatewayStageName prod The first path field in the API gateway (URI). See also: stageVariable APIExplorer yes Deploys the API Resource Explorer based on Swagger UI to visualize and interact with API resources. It is automatically generated based on the OpenAPI (formerly known as Swagger) specification and makes it easy to view API definitions and tests through visual documentation. For more information, see: API Resource Explorer","title":"Common Configuration Parameters"},{"location":"deployment/#ai-application-list-parameters","text":"Parameter ID Default Description GeneralOCR no Deploy General OCR , check 'yes' if you want to deploy, see General OCR GeneralOCRTraditional no Deploy GeneralOCR(Traditional Chinese) , please check 'yes' if you want to deploy, please refer to GeneralOCR(Traditional Chinese) CustomOCR no Deploy Custom Template OCR , please check 'yes' if you want to deploy, please refer to Custom Template OCR CarLicensePlate no Deploy Car License Plate Recognition , please check 'yes' if you want to deploy, please see Car License Plate Recognition PornographyDetection no deploy PornographyDetection , please check 'yes' if you want to deploy, please see Pornography Detection ImageSimilarity no Deploy ImageSimilarity , check 'yes' if you want to deploy, see Image Similarity HumanImageSegmentation no Deploy HumanImageSegmentation , please check 'yes' if you want to deploy, please see the Human Image Segmentation ObjectRecognition no Deploy Object Recognition , please check 'yes' if you want to deploy, please see Object Recognition FaceDetection no Deploy Face Detection , check 'yes' if you want to deploy, see Face Detection FaceComparison no Deploy Face Comparison , please check 'yes' if you want to deploy, see Face Comparison HumanAttributeRecognition no Deploy Human Attribute Recognition , please check 'yes' if you want to deploy, see Human Attribute Recognition ImageSuperResolution no Deploy Image Super Resolution , check 'yes' if you want to deploy, see Image Super Resolution TextSimilarity no Deploy Text Similarity , check 'yes' if you want to deploy, see the Text Similarity On the Configure Stack Options page, select Next . On the Review page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . Select Create Stack to deploy the stack. You can view the status of the stack in the Status column of the AWS CloudFormation console. You can see the status as CREATE_COMPLETE when the creation is complete. Tip After successful deployment, you can open the AI Solution Kit main stack in AWS CloudFormation's console and switch to the Outputs (Outputs) tab to query the Amazon API Gateway-based call URL by the corresponding Parameter ID .","title":"AI Application List Parameters"},{"location":"deployment/#updating-the-amazon-cloudformation-stack","text":"With Amazon CloudFormation, you can change the properties of existing resources in your stack, and if you need to add or remove deployed AI features, you can do so by updating your stack. In the Amazon CloudFormation console, select the completed AI Solution Kit stack that you created in the Stack list. 2. In the Stack Details pane, select Update. 3. In the Template Parameters section, specify the AI feature or parameter information that needs to be added or removed, and then select Next. 4. On the Configure Stack Options page, select Next . 5. On the Review page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . 6. If you are satisfied with the changes made, select Updata stack.","title":"Updating the Amazon CloudFormation Stack"},{"location":"faq/","text":"Frequently Asked Questions What AWS Identity and Access Management (IAM) permissions are required to deploy the solution? The following permissions are required to deploy the solution and call the API via API Gateway after deployment, with sagemaker: limited to the Image Super Resolution API. Actions apigateway:DELETE apigateway:GET apigateway:PATCH apigateway:POST apigateway:PUT cloudformation:CancelUpdateStack cloudformation:ContinueUpdateRollback cloudformation:CreateChangeSet cloudformation:CreateStack cloudformation:DeleteStack cloudformation:DescribeChangeSet cloudformation:DescribeStackEvents cloudformation:DescribeStackResources cloudformation:DescribeStackStacks cloudformation:GetStackPolicy cloudformation:GetTemplateSummary cloudformation:ListChangeSets cloudformation:ListStackResources cloudformation:ListStacks cloudformation:RollbackStack cloudformation:UpdateStack cloudformation:UpdateStackSet cloudformation:UpdateStackSet ecr:BatchDeleteImage ecr:BatchGetImage ecr:CreateRepository ecr:DeleteRepository ecr:DescribeRepositories ecr:GetDownloadUrlForLayer ecr:GetRepositoryPolicy ecr:InitiateLayerUpload ecr:PutImage ecr:SetRepositoryPolicy iam:AttachRolePolicy iam:CreateRole iam:DeleteRole iam:DeleteRolePolicy iam:DetachRolePolicy iam:GetRole iam:ListRoles iam:PassRole iam:PutRolePolicy lambda:AddPermission lambda:CreateFunction lambda:DeleteFunction lambda:GetFunction lambda:InvokeFunction lambda:RemovePermission lambda:UpdateFunctionConfiguration s3:GetObject sagemaker:CreateEndpoint sagemaker:CreateEndpointConfig sagemaker:CreateModel sagemaker:DeleteEndpoint sagemaker:DeleteEndpointConfig sagemaker:DeleteModel sagemaker:DescribeEndpoint sagemaker:DescribeEndpointConfig sagemaker:DescribeModel sagemaker:InvokeEndpoint sns:ListTopics How to resolve The account-level service limit 'ml.g4dn.xlarge for endpoint usage' is 0 Instances encountered when deploying the solution? visit aws console https://console.aws.amazon.com/ click on support on the top right corner click create a case (orange button) select Service Limit Increase radio button For Limit Type, Search and Select SageMaker Notebook Instances Write a short Use case description For Limit, Select ml.[x]. [x] (in your case, ml.g4dn.xlarge) Deploying solution encountered Resource handler returned message: \"'MemorySize' value failed to satisfy constraint: Member must have value less than or equal to 3008 . How do I resolve this? //TODO How do I consistently switch how APIs are authenticated for access in Amazon API Gateway? With Amazon CloudFormation, you can change the properties of existing resources in your stack, and if you need to add or remove deployed AI features, you can do so by updating your stack. On the Amazon CloudFormation console, select the completed AI Solution Kit stack in the Stack list. 2. In the stack details pane, select Update. 3. In the Template Parameters section, modify the API Gateway Authorization parameter, and select Next. 4. On the Configure Stack Options page, select Next . 5. On the Audit page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . 6. If you are satisfied with the changes you have made, select Updata stack to complete the access rights update. How do I individually switch the access authentication method for APIs in Amazon API Gateway? Open the Services panel in the Amazon Web Service console, find Application Services, and click API Gateway. 2. Select the most recently created AI Solution Kit API in the API list, or sort by 'Created' to make it easier to find, then click the name link to open the API details page Expand the resource tree, find the 'OPTIONS' node under the path of the resource you need to modify the access rights, and click it to display the method execution configuration page. Click the Method Request link under Method Execution Then click the Edit button on the right side of the authorization, expand the drop-down list, select 'Amazon IAM', select it and click the Update button to complete the modification. After updating, the authorization item should be displayed as 'Amazon IAM'. 6. Next, click the POST button under OPTIONS in the resource tree, and modify the method of OPTIONS, change the authorization method to Amazon IAM in the method request, and then click the Update button. Click on the 'Actions' drop-down button on the left side of the method execution, and click on the 'Deploy API' option under API Actions In the Deploy API dialog box, select 'prod' or a custom name for the deployment phase, do not select [New Phase], and then click the Deploy button below to complete the deployment Create and use a usage plan with API key This solution supports API Usage Plans. After deploying the solution and testing the APIs, you can implement API Gateway Usage Plans and offer them as a customer-facing product/service. You can configure usage plans and API keys to allow customers to access selected APIs at agreed request rates and quotas that meet their business needs and budget constraints, and you can set default method level limits for APIs or set limits for individual API methods if desired. The API caller must provide an assigned API key in the x-api-key header of the API request. If you need to configure an API usage plan please refer to: Configure Usage Plan What target identification is currently supported by the Universal Target Detection API? The following is a list of supported entities for target detection. ID accordion airplane alligator apple army_tank awning backpack ball balloon banana barrel baseball baseball_bat baseball_glove basket bathtub bear bed bee beer_bottle bell_pepper belt bench bicycle billboard bird blackboard boat book bookcase boot bottle bowl bowling_ball box bracelet brassiere bread broccoli building bus_(vehicle) butterfly cabinet cake camel camera can candle candy_bar cannon canoe car_(automobile) carrot cart castle cat caterpillar cello cellular_telephone chair chicken_(animal) chopping_board chopstick christmas_tree clock coat cocktail coffee_table coin computer_keyboard computer_monitor cone cookie cow cowboy_hat crab_(animal) crown cucumber cup cupboard curtain deer desk dessert dinosaur dog doll dolphin door doorknob doughnut dragonfly drawer dress drum_(musical_instrument) duck duffel_bag eagle earring egg elephant fan faucet fireplace fireplug fish flag flower_arrangement flowerpot football_helmet fork fountain french_fries frisbee frog fruit fruit_juice frying_pan gazelle giraffe glass_(drink_container) glove goat goggles goose grape guitar gun hamburger hamster handbag handle harbor_seal hat headset helicopter helmet high_heels hog horse house icecream insect jacket jaguar jean jellyfish kitchen_table kite knife ladder lamp lantern laptop_computer lavender lemon lettuce license_plate life_jacket lightbulb lighthouse lily lion lizard maple mask microphone microwave_oven minivan mirror monkey motorcycle mouse_(computer_equipment) muffin mug mushroom musical_instrument napkin necklace necktie nightstand onion orange_(fruit) oven owl paddle painting palm_tree parachute parking_meter parrot pasta pastry pen penguin person piano pillow pizza plastic_bag plate polar_bear pool_table porch poster potted_plant pumpkin rabbit refrigerator remote_control ring roller_skate rose salad sandal_(type_of_shoe) sandwich saucer saxophone scarf scissors sculpture sheep shirt shoe short_pants shrimp sink skateboard ski skirt skullcap snake snowboard soccer_ball sock sofa sofa_bed sparrow speaker_(stero_equipment) spectacles spider spoon sportswear squirrel stool stop_sign stove straw_(for_drinking) strawberry street_sign streetlight suit_(clothing) suitcase sunflower sunglasses sunhat surfboard sushi swimming_pool swimsuit table tablet_computer taxi teddy_bear telephone television_set tennis_ball tennis_racket tent tiger toilet toilet_tissue tomato toothbrush towel tower toy traffic_light train_(railroad_vehicle) trash_can tray tree tripod trousers truck trumpet turtle umbrella vase vegetables violin wall_socket watch water_jug whale wheel wheelchair window wineglass zebra","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#what-aws-identity-and-access-management-iam-permissions-are-required-to-deploy-the-solution","text":"The following permissions are required to deploy the solution and call the API via API Gateway after deployment, with sagemaker: limited to the Image Super Resolution API. Actions apigateway:DELETE apigateway:GET apigateway:PATCH apigateway:POST apigateway:PUT cloudformation:CancelUpdateStack cloudformation:ContinueUpdateRollback cloudformation:CreateChangeSet cloudformation:CreateStack cloudformation:DeleteStack cloudformation:DescribeChangeSet cloudformation:DescribeStackEvents cloudformation:DescribeStackResources cloudformation:DescribeStackStacks cloudformation:GetStackPolicy cloudformation:GetTemplateSummary cloudformation:ListChangeSets cloudformation:ListStackResources cloudformation:ListStacks cloudformation:RollbackStack cloudformation:UpdateStack cloudformation:UpdateStackSet cloudformation:UpdateStackSet ecr:BatchDeleteImage ecr:BatchGetImage ecr:CreateRepository ecr:DeleteRepository ecr:DescribeRepositories ecr:GetDownloadUrlForLayer ecr:GetRepositoryPolicy ecr:InitiateLayerUpload ecr:PutImage ecr:SetRepositoryPolicy iam:AttachRolePolicy iam:CreateRole iam:DeleteRole iam:DeleteRolePolicy iam:DetachRolePolicy iam:GetRole iam:ListRoles iam:PassRole iam:PutRolePolicy lambda:AddPermission lambda:CreateFunction lambda:DeleteFunction lambda:GetFunction lambda:InvokeFunction lambda:RemovePermission lambda:UpdateFunctionConfiguration s3:GetObject sagemaker:CreateEndpoint sagemaker:CreateEndpointConfig sagemaker:CreateModel sagemaker:DeleteEndpoint sagemaker:DeleteEndpointConfig sagemaker:DeleteModel sagemaker:DescribeEndpoint sagemaker:DescribeEndpointConfig sagemaker:DescribeModel sagemaker:InvokeEndpoint sns:ListTopics","title":"What AWS Identity and Access Management (IAM) permissions are required to deploy the solution?"},{"location":"faq/#how-to-resolve-the-account-level-service-limit-mlg4dnxlarge-for-endpoint-usage-is-0-instances-encountered-when-deploying-the-solution","text":"visit aws console https://console.aws.amazon.com/ click on support on the top right corner click create a case (orange button) select Service Limit Increase radio button For Limit Type, Search and Select SageMaker Notebook Instances Write a short Use case description For Limit, Select ml.[x]. [x] (in your case, ml.g4dn.xlarge)","title":"How to resolve The account-level service limit 'ml.g4dn.xlarge for endpoint usage' is 0 Instances encountered when deploying the solution?"},{"location":"faq/#deploying-solution-encountered-resource-handler-returned-message-memorysize-value-failed-to-satisfy-constraint-member-must-have-value-less-than-or-equal-to-3008-how-do-i-resolve-this","text":"//TODO","title":"Deploying solution encountered Resource handler returned message: \"'MemorySize' value failed to satisfy constraint: Member must have value less than or equal to 3008. How do I resolve this?"},{"location":"faq/#how-do-i-consistently-switch-how-apis-are-authenticated-for-access-in-amazon-api-gateway","text":"With Amazon CloudFormation, you can change the properties of existing resources in your stack, and if you need to add or remove deployed AI features, you can do so by updating your stack. On the Amazon CloudFormation console, select the completed AI Solution Kit stack in the Stack list. 2. In the stack details pane, select Update. 3. In the Template Parameters section, modify the API Gateway Authorization parameter, and select Next. 4. On the Configure Stack Options page, select Next . 5. On the Audit page, review and confirm the settings. Ensure that the checkbox to confirm that the template will create an Amazon Identity and Access Management (IAM) resource is checked. Select Next . 6. If you are satisfied with the changes you have made, select Updata stack to complete the access rights update.","title":"How do I consistently switch how APIs are authenticated for access in Amazon API Gateway?"},{"location":"faq/#how-do-i-individually-switch-the-access-authentication-method-for-apis-in-amazon-api-gateway","text":"Open the Services panel in the Amazon Web Service console, find Application Services, and click API Gateway. 2. Select the most recently created AI Solution Kit API in the API list, or sort by 'Created' to make it easier to find, then click the name link to open the API details page Expand the resource tree, find the 'OPTIONS' node under the path of the resource you need to modify the access rights, and click it to display the method execution configuration page. Click the Method Request link under Method Execution Then click the Edit button on the right side of the authorization, expand the drop-down list, select 'Amazon IAM', select it and click the Update button to complete the modification. After updating, the authorization item should be displayed as 'Amazon IAM'. 6. Next, click the POST button under OPTIONS in the resource tree, and modify the method of OPTIONS, change the authorization method to Amazon IAM in the method request, and then click the Update button. Click on the 'Actions' drop-down button on the left side of the method execution, and click on the 'Deploy API' option under API Actions In the Deploy API dialog box, select 'prod' or a custom name for the deployment phase, do not select [New Phase], and then click the Deploy button below to complete the deployment","title":"How do I individually switch the access authentication method for APIs in Amazon API Gateway?"},{"location":"faq/#create-and-use-a-usage-plan-with-api-key","text":"This solution supports API Usage Plans. After deploying the solution and testing the APIs, you can implement API Gateway Usage Plans and offer them as a customer-facing product/service. You can configure usage plans and API keys to allow customers to access selected APIs at agreed request rates and quotas that meet their business needs and budget constraints, and you can set default method level limits for APIs or set limits for individual API methods if desired. The API caller must provide an assigned API key in the x-api-key header of the API request. If you need to configure an API usage plan please refer to: Configure Usage Plan","title":"Create and use a usage plan with API key"},{"location":"faq/#what-target-identification-is-currently-supported-by-the-universal-target-detection-api","text":"The following is a list of supported entities for target detection. ID accordion airplane alligator apple army_tank awning backpack ball balloon banana barrel baseball baseball_bat baseball_glove basket bathtub bear bed bee beer_bottle bell_pepper belt bench bicycle billboard bird blackboard boat book bookcase boot bottle bowl bowling_ball box bracelet brassiere bread broccoli building bus_(vehicle) butterfly cabinet cake camel camera can candle candy_bar cannon canoe car_(automobile) carrot cart castle cat caterpillar cello cellular_telephone chair chicken_(animal) chopping_board chopstick christmas_tree clock coat cocktail coffee_table coin computer_keyboard computer_monitor cone cookie cow cowboy_hat crab_(animal) crown cucumber cup cupboard curtain deer desk dessert dinosaur dog doll dolphin door doorknob doughnut dragonfly drawer dress drum_(musical_instrument) duck duffel_bag eagle earring egg elephant fan faucet fireplace fireplug fish flag flower_arrangement flowerpot football_helmet fork fountain french_fries frisbee frog fruit fruit_juice frying_pan gazelle giraffe glass_(drink_container) glove goat goggles goose grape guitar gun hamburger hamster handbag handle harbor_seal hat headset helicopter helmet high_heels hog horse house icecream insect jacket jaguar jean jellyfish kitchen_table kite knife ladder lamp lantern laptop_computer lavender lemon lettuce license_plate life_jacket lightbulb lighthouse lily lion lizard maple mask microphone microwave_oven minivan mirror monkey motorcycle mouse_(computer_equipment) muffin mug mushroom musical_instrument napkin necklace necktie nightstand onion orange_(fruit) oven owl paddle painting palm_tree parachute parking_meter parrot pasta pastry pen penguin person piano pillow pizza plastic_bag plate polar_bear pool_table porch poster potted_plant pumpkin rabbit refrigerator remote_control ring roller_skate rose salad sandal_(type_of_shoe) sandwich saucer saxophone scarf scissors sculpture sheep shirt shoe short_pants shrimp sink skateboard ski skirt skullcap snake snowboard soccer_ball sock sofa sofa_bed sparrow speaker_(stero_equipment) spectacles spider spoon sportswear squirrel stool stop_sign stove straw_(for_drinking) strawberry street_sign streetlight suit_(clothing) suitcase sunflower sunglasses sunhat surfboard sushi swimming_pool swimsuit table tablet_computer taxi teddy_bear telephone television_set tennis_ball tennis_racket tent tiger toilet toilet_tissue tomato toothbrush towel tower toy traffic_light train_(railroad_vehicle) trash_can tray tree tripod trousers truck trumpet turtle umbrella vase vegetables violin wall_socket watch water_jug whale wheel wheelchair window wineglass zebra","title":"What target identification is currently supported by the Universal Target Detection API?"},{"location":"include-call-url/","text":"\u8c03\u7528\u65b9\u5f0f \u8c03\u7528AI\u5e94\u7528\u7684URL\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u5982\u679c\u60a8\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5c06\u53c2\u6570 APIGatewayAuthorization \u8bbe\u7f6e\u4e3a NONE \uff0cAPI\u5c06\u5141\u8bb8\u533f\u540d\u8bbf\u95ee\u3002 \u5982\u679c\u60a8\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5c06\u53c2\u6570 APIGatewayAuthorization \u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u88ab\u8981\u6c42\u4f7f\u7528AWS IAM\u8eab\u4efd\u9a8c\u8bc1\u7684\u8c03\u7528API\u3002\u8be6\u60c5\u53ef\u53c2\u89c1 \u5728Amazon API Gateway\u4e2d\u8c03\u7528REST API \u3002","title":"Include call url"},{"location":"include-call-url/#_1","text":"\u8c03\u7528AI\u5e94\u7528\u7684URL\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u5982\u679c\u60a8\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5c06\u53c2\u6570 APIGatewayAuthorization \u8bbe\u7f6e\u4e3a NONE \uff0cAPI\u5c06\u5141\u8bb8\u533f\u540d\u8bbf\u95ee\u3002 \u5982\u679c\u60a8\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5c06\u53c2\u6570 APIGatewayAuthorization \u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u88ab\u8981\u6c42\u4f7f\u7528AWS IAM\u8eab\u4efd\u9a8c\u8bc1\u7684\u8c03\u7528API\u3002\u8be6\u60c5\u53ef\u53c2\u89c1 \u5728Amazon API Gateway\u4e2d\u8c03\u7528REST API \u3002","title":"\u8c03\u7528\u65b9\u5f0f"},{"location":"include-deploy-code/","text":"\u4ee3\u7801\u793a\u4f8b cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"{{ no such element: dict object['sample_image'] }}\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' payload = { 'url': '{{ no such element: dict object['sample_image'] }}' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" payload = json.dumps({ \"url\": \"{{ no such element: dict object['sample_image'] }}\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"{{ no such element: dict object['sample_image'] }}\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute(); \u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL \u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 {{ no such element: dict object['feature_id'] }} \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"{{ no such element: dict object['sample_image'] }}\" }","title":"Include deploy code"},{"location":"include-deploy-code/#_1","text":"cURL curl --location --request POST 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"url\":\"{{ no such element: dict object['sample_image'] }}\" }' Python \uff08 AWS_IAM \u8ba4\u8bc1\uff09 import requests import json from aws_requests_auth.boto_utils import BotoAWSRequestsAuth auth = BotoAWSRequestsAuth(aws_host='[API_ID].execute-api.[AWS_REGION].amazonaws.com', aws_region='[AWS_REGION]', aws_service='execute-api') url = 'https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}' payload = { 'url': '{{ no such element: dict object['sample_image'] }}' } response = requests.request(\"POST\", url, data=json.dumps(payload), auth=auth) print(json.loads(response.text)) Python \uff08 NONE \u8ba4\u8bc1\uff09 import requests import json url = \"https://[API_ID].execute-api.[AWS_REGION].amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\" payload = json.dumps({ \"url\": \"{{ no such element: dict object['sample_image'] }}\" }) headers = { 'Content-Type': 'application/json' } response = requests.request(\"POST\", url, headers=headers, data=payload) print(response.text) Java OkHttpClient client = new OkHttpClient().newBuilder() .build(); MediaType mediaType = MediaType.parse(\"application/json\"); RequestBody body = RequestBody.create(mediaType, \"{\\n \\\"url\\\":\\\"{{ no such element: dict object['sample_image'] }}\\\"\\n}\"); Request request = new Request.Builder() .url(\"https://xxxxxxxxxxx.execute-api.xxxxxxxxx.amazonaws.com/[STAGE]/{{ no such element: dict object['feature_endpoint'] }}\") .method(\"POST\", body) .addHeader(\"Content-Type\", \"application/json\") .build(); Response response = client.newCall(request).execute();","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"include-deploy-code/#postman-aws_iam-url","text":"\u5728\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5982\u679c APIGatewayAuthorization \u53c2\u6570\u8bbe\u7f6e\u4e3a AWS_IAM \uff0c\u5c06\u81ea\u52a8\u4f7f\u7528 IAM \u6743\u9650\u63a7\u5236\u5bf9 API \u7684\u8bbf\u95ee\u3002\u5728\u65b9\u6848\u90e8\u7f72\u7ed3\u675f\u540e\uff0c\u5728 Amazon CloudFormation \u7684 Outputs \u6807\u7b7e\u9875\u4e2d\u770b\u5230\u4ee5 {{ no such element: dict object['feature_id'] }} \u4e3a\u524d\u7f00\u7684URL\u3002\u5728Postman\u4e2d\u65b0\u5efa\u6807\u7b7e\u9875\uff0c\u5e76\u628a URL \u7c98\u8d34\u5230\u5730\u5740\u680f\uff0c\u9009\u62e9 POST \u4f5c\u4e3aHTTP\u8c03\u7528\u65b9\u6cd5\u3002 \u6253\u5f00Authorization\u914d\u7f6e\uff0c\u5728\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9 Amazon Web Service Signature \uff0c\u5e76\u586b\u5199\u5bf9\u5e94\u8d26\u6237\u7684AccessKey\u3001SecretKey\u548c Amazon Web Service Region\uff08\u5982 cn-north-1 \u6216 cn-northwest-1 \uff09\u3002 \u6253\u5f00 Body \u914d\u7f6e\u9879\uff0c\u9009\u4e2draw\u548cJSON\u6570\u636e\u7c7b\u578b\u3002\u5728Body\u4e2d\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5355\u51fbSend\u6309\u94ae\u5373\u53ef\u770b\u5230\u76f8\u5e94\u8fd4\u56de\u7ed3\u679c\u3002 { \"url\": \"{{ no such element: dict object['sample_image'] }}\" }","title":"\u5728 Postman \u4e2d\u4ee5 AWS_IAM \u65b9\u5f0f\u8bf7\u6c42 URL"},{"location":"include-deploy-cost/","text":"\u6210\u672c\u9884\u4f30 //TODO","title":"Include deploy cost"},{"location":"include-deploy-cost/#_1","text":"//TODO","title":"\u6210\u672c\u9884\u4f30"},{"location":"include-deploy-description/","text":"{{ no such element: dict object['feature_description'] }} \u9002\u7528\u573a\u666f {{ no such element: dict object['feature_scenario'] }}","title":"Include deploy description"},{"location":"include-deploy-description/#_1","text":"{{ no such element: dict object['feature_scenario'] }}","title":"\u9002\u7528\u573a\u666f"},{"location":"include-deploy-lambda/","text":"Solution Architecture This solution uses a serverless architecture based on AWS Lambda, Amazon API Gateway, etc. For details, please refer to Architecture overview: Lambda-based architecture .","title":"Include deploy lambda"},{"location":"include-deploy-lambda/#solution-architecture","text":"This solution uses a serverless architecture based on AWS Lambda, Amazon API Gateway, etc. For details, please refer to Architecture overview: Lambda-based architecture .","title":"Solution Architecture"},{"location":"include-deploy-plan/","text":"\u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7Amazon CloudFormation\u5378\u8f7d\u5bf9\u5e94\u7684\u5806\u6808\uff0c\u6574\u4e2a\u5220\u9664\u8fc7\u7a0b\u5927\u7ea6\u9700\u898110\u5206\u949f\u3002","title":"Include deploy plan"},{"location":"include-deploy-plan/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7Amazon CloudFormation\u5378\u8f7d\u5bf9\u5e94\u7684\u5806\u6808\uff0c\u6574\u4e2a\u5220\u9664\u8fc7\u7a0b\u5927\u7ea6\u9700\u898110\u5206\u949f\u3002","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"include-deploy-uninstall/","text":"\u5378\u8f7d\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['destroy_time'] }}","title":"Include deploy uninstall"},{"location":"include-deploy-uninstall/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u5378\u8f7d {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u90e8\u7f72\u89e3\u51b3\u65b9\u6848: \u66f4\u65b0 Amazon CloudFormation \u5806\u6808 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a no \u3002 \u4fe1\u606f \u5378\u8f7d\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['destroy_time'] }}","title":"\u5378\u8f7d\u90e8\u7f72"},{"location":"include-deploy/","text":"\u5feb\u901f\u90e8\u7f72 \u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b {{ no such element: dict object['feature_id'] }} \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['deployment_time'] }}","title":"Include deploy"},{"location":"include-deploy/#_1","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 Amazon CloudFormation \u90e8\u7f72 {{ no such element: dict object['feature_name'] }} \u529f\u80fd\uff0c\u5177\u4f53\u6b65\u9aa4\u8bf7\u89c1 \u6982\u8ff0: \u90e8\u7f72\u89e3\u51b3\u65b9\u6848 \uff0c\u5e76\u5728 \u53c2\u6570 \u90e8\u5206\u786e\u8ba4 {{ no such element: dict object['feature_id'] }} \u53c2\u6570\u8bbe\u7f6e\u4e3a yes \u3002\u5728\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u5728 Amazon CloudFormation \u63a7\u5236\u53f0\u4e0a\u7684\u5806\u6808\u5217\u8868\u91cc\u53ef\u4ee5\u67e5\u770b\u5230\u5305\u542b {{ no such element: dict object['feature_id'] }} \u540d\u79f0\u7684\u5d4c\u5957\u5806\u6808\uff08Nested Stack\uff09\u3002 \u4fe1\u606f \u90e8\u7f72\u65f6\u95f4\u5927\u7ea6\u9700\u8981\uff1a {{ no such element: dict object['deployment_time'] }}","title":"\u5feb\u901f\u90e8\u7f72"},{"location":"regions/","text":"Update time: 2022-05-05 This solution v1.2.0 supports deployment in the following Amazon Web Services regions. Supported global regions Region Name Region ID US East (N. Virginia) Region us-east-1 US East (Ohio) Region us-east-2 US West (N. California) Region us-west-1 US West (Oregon) Region us-west-2 Asia Pacific (Mumbai) Region ap-south-1 Asia Pacific (Tokyo) Region ap-northeast-1 Asia Pacific (Seoul) Region ap-northeast-2 Asia Pacific (Singapore) Region ap-southeast-1 Asia Pacific (Sydney) Region ap-southeast-2 Canada (Central) Region ca-central-1 Europe (Ireland) Region eu-west-1 Europe (London) Region eu-west-2 Europe (Paris) Region eu-west-3 Europe (Frankfurt) Region eu-central-1 South America (Sao Paulo) Region sa-east-1 Supported China regions Region Name Region ID Amazon Web Services China (Ningxia) Region operated by NWCD cn-northwest-1 Amazon Web Services China (Beijing) Region operated by Sinnet cn-north-1","title":"Supported regions"},{"location":"regions/#supported-global-regions","text":"Region Name Region ID US East (N. Virginia) Region us-east-1 US East (Ohio) Region us-east-2 US West (N. California) Region us-west-1 US West (Oregon) Region us-west-2 Asia Pacific (Mumbai) Region ap-south-1 Asia Pacific (Tokyo) Region ap-northeast-1 Asia Pacific (Seoul) Region ap-northeast-2 Asia Pacific (Singapore) Region ap-southeast-1 Asia Pacific (Sydney) Region ap-southeast-2 Canada (Central) Region ca-central-1 Europe (Ireland) Region eu-west-1 Europe (London) Region eu-west-2 Europe (Paris) Region eu-west-3 Europe (Frankfurt) Region eu-central-1 South America (Sao Paulo) Region sa-east-1","title":"Supported global regions"},{"location":"regions/#supported-china-regions","text":"Region Name Region ID Amazon Web Services China (Ningxia) Region operated by NWCD cn-northwest-1 Amazon Web Services China (Beijing) Region operated by Sinnet cn-north-1","title":"Supported China regions"},{"location":"revisions/","text":"Updated\uff1a2022-05-05 Date Description 2021-9 Release 1.0.0 AI APIs Gereral OCR Image Super Resolution Pornography Detection Human Image Segmentation 2022-5 Release 1.2.0 AI APIs Optimized General OCR Gernral OCR(Traditional Chinese) Custom OCR Image Similarity General Object Recognition Face Detection Face Similarity Human Attribute Car License Plate Text Similarity Solution Upgrade Support OpenAPI specification and integrate API Explorer AI model containerization CDK upgrade to 2.20.0 Support for CloudFormation Deployment","title":"Release Notes"},{"location":"security/","text":"Security Information When you build solutions on Amazon Web Services, security responsibilities are shared between you and Amazon Cloud. This Shared Responsibility Model reduces your operational burden due to the Amazon Web Services operations, management, and control components, including host operations The physical security of the system, the virtualization layer, and the facility where the service runs. For more information on Amazon Web Services, visit Amazon Web Services Cloud Security . IAM roles Amazon Web Services Identity and Access Management (IAM) roles allow customers to assign fine-grained access policies and permissions to services and users on Amazon Web Services. This solution creates IAM roles that grant access between components of the solution.","title":"Security"},{"location":"security/#security-information","text":"When you build solutions on Amazon Web Services, security responsibilities are shared between you and Amazon Cloud. This Shared Responsibility Model reduces your operational burden due to the Amazon Web Services operations, management, and control components, including host operations The physical security of the system, the virtualization layer, and the facility where the service runs. For more information on Amazon Web Services, visit Amazon Web Services Cloud Security .","title":"Security Information"},{"location":"security/#iam-roles","text":"Amazon Web Services Identity and Access Management (IAM) roles allow customers to assign fine-grained access policies and permissions to services and users on Amazon Web Services. This solution creates IAM roles that grant access between components of the solution.","title":"IAM roles"},{"location":"source/","text":"You can download the source files for this solution by visiting our GitHub repository . The template for the data transfer solution was generated using the Cloud Development Kit (CDK) . For more information about this, see the README.md file.","title":"Source code"},{"location":"template/","text":"Before deploying the solution, you can download the following Amazon Cloud Technologies CloudFormation template used by the solution. AI-Solution-Kit.template : You can use this template to launch the solution and related services. You can also customize the template according to your needs.","title":"CloudFormation template"},{"location":"uninstall/","text":"\u8981\u5378\u8f7d\u4eba\u5de5\u667a\u80fd\u89e3\u51b3\u65b9\u6848\u5408\u96c6\u65b9\u6848\uff0c\u8bf7\u5220\u9664CloudFormation\u5806\u6808\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u7ba1\u7406\u63a7\u5236\u53f0\u6216CLI\u5220\u9664CloudFormation\u5806\u6808\u3002 \u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u7ba1\u7406\u63a7\u5236\u53f0\u5220\u9664\u5806\u6808 \u767b\u5f55 AWS CloudFormation \u63a7\u5236\u53f0\u3002 \u5728 \u5806\u6808 \u9875\u9762\u4e0a\uff0c\u9009\u62e9\u6b64\u65b9\u6848\u7684\u5b89\u88c5\u5806\u6808\u3002 \u9009\u62e9 \u5220\u9664 \u3002 \u4f7f\u7528CLI\u5220\u9664\u5806\u6808 \u786e\u5b9a\u547d\u4ee4\u884c\u5728\u60a8\u7684\u73af\u5883\u4e2d\u662f\u5426\u53ef\u7528\u3002\u6709\u5173\u5b89\u88c5\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605CLI\u7528\u6237\u6307\u5357\u4e2d\u7684 CLI\u662f\u4ec0\u4e48 \u3002 \u786e\u8ba4CLI\u53ef\u7528\u540e\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4: bash aws cloudformation delete-stack --stack-name <installation-stack-name>","title":"Uninstall"},{"location":"uninstall/#_1","text":"\u767b\u5f55 AWS CloudFormation \u63a7\u5236\u53f0\u3002 \u5728 \u5806\u6808 \u9875\u9762\u4e0a\uff0c\u9009\u62e9\u6b64\u65b9\u6848\u7684\u5b89\u88c5\u5806\u6808\u3002 \u9009\u62e9 \u5220\u9664 \u3002","title":"\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u7ba1\u7406\u63a7\u5236\u53f0\u5220\u9664\u5806\u6808"},{"location":"uninstall/#cli","text":"\u786e\u5b9a\u547d\u4ee4\u884c\u5728\u60a8\u7684\u73af\u5883\u4e2d\u662f\u5426\u53ef\u7528\u3002\u6709\u5173\u5b89\u88c5\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605CLI\u7528\u6237\u6307\u5357\u4e2d\u7684 CLI\u662f\u4ec0\u4e48 \u3002 \u786e\u8ba4CLI\u53ef\u7528\u540e\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4: bash aws cloudformation delete-stack --stack-name <installation-stack-name>","title":"\u4f7f\u7528CLI\u5220\u9664\u5806\u6808"},{"location":"upgrade/","text":"Updated: 2022-05-05 When you have deployed and are using some of the API features from version 1.0.0, you can continue to use the original APIs that have been deployed inside your AWS account while deploying the features provided in the new APIs available in 1.2.0. If you want to switch the original API call URL to the new version, you can find the call URL from the corresponding AWS CloudFormation stack Outputs tab after the new version is deployed, and replace the original URL with the one from the four APIs included in the current 1.0.0 release (Universal Text Recognition, Image Super Resolution, Intelligent Portrait Segmentation, and Pornography Review). The interface definition parameters of the four APIs (Universal Text Recognition, Image Super Resolution, Smart Portrait Segmentation, Pornography Review) in the 1.0.0 release are identical to the same four functions in the 1.2.0 release, and you only need to replace the original URLs to use them. After the switch is complete, you can completely remove the original stack in the AWS CloudFormation console, which takes about 10 minutes.","title":"How to Upgrade"}]}